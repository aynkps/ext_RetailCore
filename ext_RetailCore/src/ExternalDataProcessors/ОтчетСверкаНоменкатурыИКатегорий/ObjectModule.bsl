//1. При внедрении заменить имена "ЗаменаИмяОбработки" функций Запрос, Ответ, ОбработкаОтвета на Имя обработки (например "РегламентУстановкиРозничныхЦенМП_")
//2. Если нужно скорретировать параметры в функции ПолучитьСтруктуруНастроекЗапроса
//3. После отладки, при внедрении перенести полностью область Имя обработки (например "РегламентУстановкиРозничныхЦенМП_") в ОМ.оду_ОбменДанными 
//4. В ОМ.оду_ОбменДанными убрать лишние методы обработки 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	//Номер задачи Текст задачи Исполнитель Дата
	ПараметрыРегистрации.Версия = "2024-01-26";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОбработки; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента");
	
	//ПараметрыРегистрации.Информация = "кпс_"; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОбработки;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//СтрТаблицы.ПоказыватьОповещение = Истина;
	//СтрТаблицы.Модификатор = "ПечатьMXL";
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	РезультатВыполнения = РезультатВыполненияРегламентаПроизвольногоЗапроса();
	
КонецПроцедуры

//TODO:  Получать настройки динамичестки из ОбработкиПроизвольногоЗапроса и  С_оду_БазыУчастникиОбмена, и РС_Настроек
Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль)
	
	Попытка
	
		ИДБазыПриемник = "d9b5685d-27f0-49e8-90d6-3a73f0962514"; //Тест  ytaptest6
		//ИДБазыИсточник = 
		
		//СсылкаУО = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ИДБазыПриемник);
		//Если СсылкаУО = Неопределено Тогда
		//	Возврат Неопределено;                                                                   
		//КонецЕсли; 
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		//СтруктураЗапроса.ИДБазыИсточник = ИДБазыИсточник;
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним;
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		//СтруктураНастроек.ВыполнятьВФоне = Истина;
		//СтруктураНастроек.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(пр_НастройкиПовтИсп.ТекущийПользователь());
		СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		оду_Общий.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса = Неопределено) Экспорт
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль);
	КонецЕсли; 
	
	РезультатЗапроса = пр_Модуль.РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, ЭтотОбъект); 
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если СтруктураЗапроса.ПодготовитьДанные = Истина  Тогда
		Возврат РезультатЗапроса;	
	КонецЕсли; 
	
	РезультатОбработкиОтвета = ОтчетСверкаНоменкатурыИКатегорий_ОбработкаОтвета(РезультатЗапроса);
	
	Возврат РезультатОбработкиОтвета;
	
КонецФункции 

#Область  ДляОтладкиБезФоновомРежиме

Функция оду_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорий_Запрос(СтруктураЗапроса);
КонецФункции 

Функция оду_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорий_Ответ(СтруктураЗапроса);
КонецФункции 

Функция оду_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорий_ОбработкаОтвета(СтруктураЗапроса);
КонецФункции 

#КонецОбласти


//TODO:  Перенести после отладки в ОМ.оду_ОбменДанными
#Область  ОтчетСверкаНоменкатурыИКатегорий_
 
#Область  Запрос

//СтруктураЗапроса
Функция ОтчетСверкаНоменкатурыИКатегорий_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Для примера
		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Структура();
			//ПараметрыЗапроса.Вставить("ПериодСреза", НачалоДня(ТекущаяДата()) + 60*60);
			//СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		КонецЕсли; 

		
		//TODO:  Написать функциию обработки ответа
		ДанныеЗапроса = Неопределено;
		Данные = Новый Структура();

		
		Возврат Данные;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорий_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область  Ответ

Функция ОтчетСверкаНоменкатурыИКатегорий_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			//|	Номенклатура.Ссылка КАК Ссылка,
			|	УникальныйИдентификатор(Номенклатура.Ссылка) КАК Ссылка,
			|	Номенклатура.Код КАК Код,
			|	Номенклатура.Наименование КАК Наименование,
			|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
			|	ЕСТЬNULL(Номенклатура.КатегорияНоменклатуры.Наименование, """") КАК К_Наименование
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//ВДЗ = РезультатЗапроса.Выбрать();
		
		//МассивНоменклатуры;
		//Пока ВДЗ.Следующий() Цикл
		//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
		//КонецЦикла;  
		
		ДанныеОвета = пр_Общий.МассивСтруктурПоЗапросу(РезультатЗапроса); 

		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорий_Ответ", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#Область  ОбработкаОтвета
 
Функция ОтчетСверкаНоменкатурыИКатегорий_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		//ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		ТаблицаДанных = ПолучитьТаблицуДанных(ДанныеЗапроса);
		
		//TODO:  Написать функциию обработки ответа
		ДанныеОбработкиОтвета = Неопределено;
		Возврат ДанныеОбработкиОтвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорий_ОбработкаОтвета", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

Функция ТекстЗапросаСверкиНоменклатуры()
	
	
	Возврат
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ТЗ.Наименование КАК Наименование,
		|	ТЗ.Код КАК Код,
		|	ТЗ.ПометкаУдаления КАК ПометкаУдаления,
		|	ТЗ.К_Наименование КАК К_Наименование
		|ПОМЕСТИТЬ ВТ_Розница
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НоменклатураУТ.Ссылка, ВТ_Розница.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(НоменклатураУТ.Код, ВТ_Розница.Код) КАК Код,
		|	ЕСТЬNULL(НоменклатураУТ.Наименование, ВТ_Розница.Наименование) КАК Наименование,
		|	ЕСТЬNULL(НоменклатураУТ.ПометкаУдаления, НЕОПРЕДЕЛЕНО) КАК ПометкаУдаления,
		|	ЕСТЬNULL(ВТ_Розница.ПометкаУдаления, НЕОПРЕДЕЛЕНО) КАК ПометкаУдаленияР,
		|	ЕСТЬNULL(НоменклатураУТ.ВидНоменклатуры, """") КАК ВидНоменклатуры,
		|	ЕСТЬNULL(НоменклатураУТ.ВидНоменклатуры.Наименование, """") КАК ВидНоменклатурыНаименование,
		|	ЕСТЬNULL(ВТ_Розница.К_Наименование, """") КАК К_Наименование
		|ПОМЕСТИТЬ ВТ_Связь
		|ИЗ
		|	ВТ_Розница КАК ВТ_Розница
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУТ
		|		ПО ВТ_Розница.Номенклатура = НоменклатураУТ.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Связь.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИЛИ ВТ_Связь.ПометкаУдаления <> ВТ_Связь.ПометкаУдаленияР КАК РазныеСостояния,
		|	ВТ_Связь.Номенклатура КАК Номенклатура,
		|	ВТ_Связь.Код КАК Код,
		|	ВТ_Связь.Наименование КАК Наименование,
		|	ВТ_Связь.ПометкаУдаления КАК ПометкаУдаления,
		|	ВТ_Связь.ПометкаУдаленияР КАК ПометкаУдаленияР,
		|	ВТ_Связь.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВТ_Связь.ВидНоменклатурыНаименование КАК ВидНоменклатурыНаименование,
		|	ВТ_Связь.К_Наименование КАК К_Наименование
		|ИЗ
		|	ВТ_Связь КАК ВТ_Связь";
	
	
КонецФункции 

Функция ПолучитьТаблицуДанных(МассивДанных)
	
	// ИД, Ссылка
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТЗ.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТЗ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("К_Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для каждого Стр Из МассивДанных Цикл
		
		Номенклатура = пр_Общий.СсылкаПоТипXML("CatalogRef.Номенклатура", Строка(Стр.Ссылка));
		//Номенклатура = пр_Общий.СсылкаПоGUID(Справочники.Номенклатура, Стр.Ссылка);
		//
		//пр_Общий.ИД_Ссылки(пр_Общий.СсылкаПоGUID(Справочники.Номенклатура, Стр.Ссылка));
		
		Нстр = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр, Стр); 
		Нстр.Номенклатура = Номенклатура;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСверкиНоменклатуры();
		
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВДЗ = РезультатЗапроса.Выбрать();
	Возврат РезультатЗапроса.Выгрузить(); 
	
	
КонецФункции 


#КонецОбласти

#КонецОбласти

#КонецЕсли
