//1. При внедрении заменить имена "ЗаменаИмяОбработки" функций Запрос, Ответ, ОбработкаОтвета на Имя обработки (например "РегламентУстановкиРозничныхЦенМП_")
//2. Если нужно скорретировать параметры в функции ПолучитьСтруктуруНастроекЗапроса
//3. После отладки, при внедрении перенести полностью область Имя обработки (например "РегламентУстановкиРозничныхЦенМП_") в ОМ.оду_ОбменДанными 
//4. В ОМ.оду_ОбменДанными убрать лишние методы обработки 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	//Номер задачи Текст задачи Исполнитель Дата
	ПараметрыРегистрации.Версия = "2024-01-26";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОбработки; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента");
	
	//ПараметрыРегистрации.Информация = "кпс_"; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОбработки;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//СтрТаблицы.ПоказыватьОповещение = Истина;
	//СтрТаблицы.Модификатор = "ПечатьMXL";
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	РезультатВыполнения = РезультатВыполненияРегламентаПроизвольногоЗапроса();
	
КонецПроцедуры

//TODO:  Получать настройки динамичестки из ОбработкиПроизвольногоЗапроса и  С_оду_БазыУчастникиОбмена, и РС_Настроек
Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, СтруктураЗапроса)
	
	Попытка
	
		ИДБазыПриемник = "d9b5685d-27f0-49e8-90d6-3a73f0962514"; //Тест  ytaptest6
		//ИДБазыИсточник = 
		
		//СсылкаУО = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ИДБазыПриемник);
		//Если СсылкаУО = Неопределено Тогда
		//	Возврат Неопределено;                                                                   
		//КонецЕсли; 
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		//СтруктураЗапроса.ИДБазыИсточник = ИДБазыИсточник;
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним;
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		//СтруктураНастроек.ВыполнятьВФоне = Истина;
		//СтруктураНастроек.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(пр_НастройкиПовтИсп.ТекущийПользователь());
		СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		оду_Общий.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса = Неопределено) Экспорт
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, СтруктураЗапроса);
	КонецЕсли; 
	
	РезультатЗапроса = пр_Модуль.РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, ЭтотОбъект); 
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если СтруктураЗапроса.ПодготовитьДанные = Истина  Тогда
		Возврат РезультатЗапроса;	
	КонецЕсли; 
	
	РезультатОбработкиОтвета = НачальнаяСверкаОбъектовОбмена_ОбработкаОтвета(РезультатЗапроса);
	
	Возврат РезультатОбработкиОтвета;
	
КонецФункции 

#Область  ДляОтладкиБезФоновомРежиме

Функция оду_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	Возврат НачальнаяСверкаОбъектовОбмена_Запрос(СтруктураЗапроса);
КонецФункции 

Функция оду_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	Возврат НачальнаяСверкаОбъектовОбмена_Ответ(СтруктураЗапроса);
КонецФункции 

Функция оду_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	Возврат НачальнаяСверкаОбъектовОбмена_ОбработкаОтвета(СтруктураЗапроса);
КонецФункции 

#КонецОбласти


//TODO:  Перенести после отладки в ОМ.оду_ОбменДанными
#Область  НачальнаяСверкаОбъектовОбмена_
 
#Область  Запрос

//СтруктураЗапроса
Функция НачальнаяСверкаОбъектовОбмена_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		ТипЗапроса = "";
		КоличествоВыборки = "";
		
		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Структура();
			//ПараметрыЗапроса.Вставить("ПериодСреза", НачалоДня(ТекущаяДата()) + 60*60);
			//СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		ИначеЕсли ТипЗнч(ПараметрыЗапроса) = Тип("Массив") Тогда  
			ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, ТипЗапроса, КоличествоВыборки);
		КонецЕсли; 
		
		Если ТипЗапроса = "ЦеныНоменклатуры" Тогда
			ДанныеЗапроса = ЗапросЦеныНоменклатуры(СтруктураЗапроса);
		ИначеЕсли ТипЗапроса = "СверкаСотрудников" Тогда
			ДанныеЗапроса = ЗапросСборСотрудников();
		Иначе
			ДанныеЗапроса = Новый Структура();
		КонецЕсли;
		
		//Данные = Новый Структура("ДанныеЗапроса", ДанныеЗапроса);
		
		Возврат ДанныеЗапроса;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("НачальнаяСверкаОбъектовОбмена_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции   

#КонецОбласти

#Область  Ответ

Функция НачальнаяСверкаОбъектовОбмена_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса; 
		
		//Если ДанныеЗапроса = Неопределено Тогда
		//	Возврат Неопределено;		
		//КонецЕсли; 
		//
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		Если Не ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
			Возврат Неопределено;	
		КонецЕсли;     
		
		КоличествоВыборки = ""; 
		ТипЗапроса = "";
		ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, ТипЗапроса, КоличествоВыборки);
		
		Если ТипЗапроса = "ЦеныНоменклатуры" Тогда      
			Если ЗначениеЗаполнено(СтруктураЗапроса.ДанныеЗапроса) Тогда
				ДанныеОвета = ОтветАктуальныеЦеныНоменклатуры(КоличествоВыборки, СтруктураЗапроса);	 
			Иначе 	
				ДанныеОвета = СобратьАктуальныеЦеныНоменклатуры(КоличествоВыборки);	 
			КонецЕсли;
		ИначеЕсли  ТипЗапроса = "ОчиститьПоОтборуБД" Тогда
			ДанныеОвета = ОчиститьПоОтборуБД(КоличествоВыборки, СтруктураЗапроса.РежимОтладки);	 
		ИначеЕсли  ТипЗапроса = "ШтрихкодыНоменклатуры" Тогда
			ДанныеОвета = СобратьШКНоменклатуры(КоличествоВыборки);	 
		ИначеЕсли  ТипЗапроса = "ПолучениеАктуальногоВидаЦен" Тогда
			ДанныеОвета = ПолучитьАктуальныйВидЦен();
		ИначеЕсли  ТипЗапроса = "СверкаСотрудников" Тогда
			ДанныеОвета = Ответ_СверитьСотрудников(СтруктураЗапроса);	
		Иначе
			ДанныеОвета = Неопределено; 
		КонецЕсли;
		
		Если ДанныеОвета <> Неопределено И (ТипЗапроса = "ЦеныНоменклатуры" ИЛИ ТипЗапроса = "ШтрихкодыНоменклатуры") Тогда
			//TODO:  Доделать мх чз файл                          
			ИмяФайлаЗапроса = "\\192.168.100.11\core-sync\Обмен\Данные\СверкаЯдро__ТТ.json";
			ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныеОвета, ИмяФайлаЗапроса);
			
			//СтруктураЗапроса.ОбменЧерезФайл = Истина;
			//СтруктураЗапроса.ИмяФайлаЗапроса = "\\AT-RETAIL-CORE\core-sync\Обмен\Данные\СверкаЯдроТТ.json";
			ДанныеОвета = Новый Структура("ИмяФайлаЗапроса", ИмяФайлаЗапроса);
			
		КонецЕсли;
		
		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("НачальнаяСверкаОбъектовОбмена_Ответ", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции  

#КонецОбласти

#Область  ОбработкаОтвета
 
Функция НачальнаяСверкаОбъектовОбмена_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
 		ИмяЗапроса = СтруктураЗапроса.ИмяЗапроса;
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		
		КоличествоВыборки = "";
		ВРежимеОтладки = Ложь;
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса; 
		Для каждого Стр Из ПараметрыЗапроса Цикл        
			Если Стр.ИмяПараметра = "ТипОбъекта"  ИЛИ Стр.ИмяПараметра = "ТипЗапроса" Тогда
				//ТипОбъекта = Значение;
				//пр_Общий.СсылкаПоТипXML("CatalogRef.ИдентификаторыОбъектовМетаданных", Стр.Значение); 
				//пр_Общий.СсылкаПоТипXML(Стр.Тип, Стр.Значение); 
				ТипЗапроса = Стр.Значение;
			ИначеЕсли Стр.ИмяПараметра = "КоличествоВыборки" Тогда 
				
				КоличествоВыборки = Стр.Значение;
				Если КоличествоВыборки <> "" Тогда
					КоличествоВыборки = СтрШаблон("ПЕРВЫЕ %1", КоличествоВыборки);
				КонецЕсли; 
				
			ИначеЕсли Стр.ИмяПараметра = "ВРежимеОтладки" Тогда 
				
				Тип = ИзXMLТипа(Стр.Тип, "http://www.w3.org/2001/XMLSchema");
				//ВРежимеОтладки = пр_Общий.СсылкаПоТипXML(Тип, Стр.Значение);
				ВРежимеОтладки = XMLЗначение(Тип, Стр.Значение);
				
			КонецЕсли;	
			
		КонецЦикла;    
		
		
		Если ВРежимеОтладки = Истина Тогда        
			Для каждого Стр Из СтруктураЗапроса.ПараметрыЗапроса Цикл
				Если Стр.ИмяПараметра = "ВРежимеОтладки" Тогда   
					Стр.Значение = XMLСтрока(Ложь);	
				КонецЕсли;			
			КонецЦикла;
			СтруктураЗапроса.СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_ОбработкаОтвета();	
			РезультатЗаписи = оду_Общий.РезультатЗаписиВСостояниеПроизвольныхЗапросов(Неопределено, СтруктураЗапроса);
			ТекстОтвета = СтрШаблон("*оду. Запрос в режиме отладки. Результат записи запроса в приемнике = %1", ?(РезультатЗаписи = Истина, "Истина", "Ложь")); 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОтвета;
			Сообщение.Сообщить();
			//Возврат ТекстОтвета;
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
			Если ДанныеЗапроса.Свойство("ИмяФайлаЗапроса") Тогда
				ДанныеЗапроса = оду_Общий.ПрочитатьJSON_ИзТела_Сериализ(, ДанныеЗапроса.ИмяФайлаЗапроса);
			КонецЕсли;
		КонецЕсли;
		
		//СоотвУпаковки = СтруктураСоответвийУпаковок(ИмяЗапроса, ДанныеЗапроса.МассивУпаковок);
		//
		//Если СоотвУпаковки = Неопределено  Тогда
		//	Ошибка = "Не удалось найти соответсвия упаковкам в УТ Розница";
		//    Возврат Ошибка;
		//КонецЕсли;    
		СоотвУпаковки = Неопределено;
		
		Если ТипЗапроса = "ЦеныНоменклатуры" Тогда
			РезультатЗапроса = РезультатСверкиЦеныНоменклатуры(ИмяЗапроса, ДанныеЗапроса, СоотвУпаковки, КоличествоВыборки)
		ИначеЕсли  ТипЗапроса = "ШтрихкодыНоменклатуры" Тогда
			РезультатЗапроса = РезультатСверкиШтрихкодыНоменклатуры(ИмяЗапроса, ДанныеЗапроса, СоотвУпаковки, КоличествоВыборки)
		ИначеЕсли  ТипЗапроса = "ПолучениеАктуальногоВидаЦен" Тогда
			ДанныеОвета = РезультатПолученияАктуальногоВидаЦен(СтруктураЗапроса);
		ИначеЕсли  ТипЗапроса = "СверкаСотрудников" Тогда
			ДанныеОвета = РезультатСверкиСотрудников(СтруктураЗапроса);	
		Иначе
			РезультатЗапроса = Неопределено; 
		КонецЕсли;
		
		Если ТипЗапроса = "ЦеныНоменклатуры" ИЛИ ТипЗапроса = "ШтрихкодыНоменклатуры" Тогда 
			
			Если РезультатЗапроса = Неопределено  Тогда
				Ошибка = "Не удалось получить таблицу данных цен в УТ";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Ошибка;
				Сообщение.Сообщить();
				Возврат Ошибка;
			КонецЕсли; 
			
			Если РезультатЗапроса.Пустой()  Тогда
				Ошибка = "Все цены совпадают в УТ - Ядро";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Ошибка;
				Сообщение.Сообщить();
				Возврат Ошибка;
			КонецЕсли; 
			
			ДанныеОвета = ВыгрузитьСверку(РезультатЗапроса, СтруктураЗапроса, ТипЗапроса);
			
		КонецЕсли; 
		
		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("НачальнаяСверкаОбъектовОбмена_ОбработкаОтвета", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;  
	
	Возврат ДанныеОвета;
	
КонецФункции 

#КонецОбласти

#КонецОбласти  



#Область  СверкаСотрудников

Функция ЗапросСборСотрудников()
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Сотрудники.Ссылка) КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ПометкаУдаления = ЛОЖЬ
			|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудники.Наименование КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ПометкаУдаления = ИСТИНА
			|	И Сотрудники.ЭтоГруппа = ЛОЖЬ";

		Пакет = Запрос.ВыполнитьПакет();
		
		//Если РезультатЗапроса.Пустой() Тогда
		//	Возврат Неопределено;
		//КонецЕсли;  
		
		//ВДЗ = РезультатЗапроса.Выбрать();
		//Данные = МассивСотрудников;
		
		ВДЗ = Пакет[0].Выбрать();
		
		МассивСотрудников = Новый Массив;
						  
		Пока ВДЗ.Следующий() Цикл
			МассивСотрудников.Добавить(ВДЗ.Сотрудник); 
		КонецЦикла;   
		
		
		ВДЗ = Пакет[1].Выбрать();
		
		МассивСотрудниковУдалить = Новый Массив;
						  
		Пока ВДЗ.Следующий() Цикл
			МассивСотрудниковУдалить.Добавить(ВДЗ.Сотрудник); 
		КонецЦикла;   
		
		Данные = Новый Структура("МассивСотрудников, МассивСотрудниковУдалить", МассивСотрудников, МассивСотрудниковУдалить);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;			

КонецФункции

//|	И Сотрудники.Наименование = ""WebRetail""
Функция ТекстЗапросаОтветСверкаСотрудников()
	Возврат
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_СотрудникиЯдра
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Наименование КАК Наименование
		|ПОМЕСТИТЬ ВТ_УдалитьИзМассива
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	ИСТИНА
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		//|	И Сотрудники.Ссылка В(&МассивСотрудниковУдалить)
		|	И Сотрудники.Наименование В(&МассивСотрудниковУдалить)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Наименование
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	ИСТИНА
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		|	И Сотрудники.Наименование В (""WebRetail"", ""RetailUser"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Удалить
		|ИЗ
		|	ВТ_СотрудникиЯдра КАК ВТ_СотрудникиЯдра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Наименование = ВТ_СотрудникиЯдра.Наименование)
		|			И ВТ_СотрудникиЯдра.Ссылка <> Сотрудники.Ссылка
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	ВТ_УдалитьИзМассива КАК ВТ_УдалитьИзМассива
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ВТ_УдалитьИзМассива.Наименование = Сотрудники.Наименование
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Код КАК Код,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.ШтрихКод КАК ШтрихКод,
		|	Сотрудники.МагнитныйКод КАК МагнитныйКод,
		|	Сотрудники.Недействителен КАК Недействителен,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	Сотрудники.УточнениеНаименования КАК УточнениеНаименования,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ФизическоеЛицо.Код КАК ФизическоеЛицоКод,
		|	Сотрудники.ФизическоеЛицо.Наименование КАК ФизическоеЛицоНаименование
		|ПОМЕСТИТЬ ВТ_Новые
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.ЭтоГруппа = ЛОЖЬ
		|	И НЕ Сотрудники.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_СотрудникиЯдра.Ссылка КАК Сотрудник
		|				ИЗ
		|					ВТ_СотрудникиЯдра КАК ВТ_СотрудникиЯдра
		|		
		|				ОБЪЕДИНИТЬ
		|		
		|				ВЫБРАТЬ
		|					ВТ_Удалить.Сотрудник
		|				ИЗ
		|					ВТ_Удалить КАК ВТ_Удалить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_Новые.Сотрудник) КАК Сотрудник,
		|	ВТ_Новые.Наименование КАК Наименование,
		|	ВТ_Новые.Код КАК Код
		|ПОМЕСТИТЬ ВТ_ОтборНовые
		|ИЗ
		|	ВТ_Новые КАК ВТ_Новые
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Новые.Наименование,
		|	ВТ_Новые.Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СотрудникиЯдра.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_СотрудникиЯдра КАК ВТ_СотрудникиЯдра
		|ГДЕ
		|	ВТ_СотрудникиЯдра.Ссылка.ПометкаУдаления = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Удалить.Сотрудник КАК Ссылка
		|ИЗ
		|	ВТ_Удалить КАК ВТ_Удалить
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Новые.Сотрудник
		|ИЗ
		|	ВТ_Новые КАК ВТ_Новые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНовые КАК ВТ_ОтборНовые
		|		ПО ВТ_Новые.Сотрудник = ВТ_ОтборНовые.Сотрудник
		|ГДЕ
		|	ВТ_ОтборНовые.Сотрудник ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТ_Новые.Сотрудник) КАК СотрудникСсылка,
		|	ВТ_Новые.Сотрудник КАК Сотрудник,
		|	ВТ_Новые.Код КАК Код,
		|	ВТ_Новые.Наименование КАК Наименование,
		|	ВТ_Новые.ШтрихКод КАК ШтрихКод,
		|	ВТ_Новые.МагнитныйКод КАК МагнитныйКод,
		|	ВТ_Новые.Недействителен КАК Недействителен,
		|	ВТ_Новые.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВТ_Новые.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ВТ_Новые.УточнениеНаименования КАК УточнениеНаименования,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ВТ_Новые.ФизическоеЛицо) КАК ФизическоеЛицоСсылка,
		|	ВТ_Новые.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Новые.ФизическоеЛицоКод КАК ФизическоеЛицоКод,
		|	ВТ_Новые.ФизическоеЛицоНаименование КАК ФизическоеЛицоНаименование
		|ИЗ
		|	ВТ_ОтборНовые КАК ВТ_ОтборНовые
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Новые КАК ВТ_Новые
		|		ПО (ВТ_Новые.Сотрудник = ВТ_ОтборНовые.Сотрудник)";
	
КонецФункции 

Функция Ответ_СверитьСотрудников(СтруктураЗапроса)
	
	Попытка
		
		МассивСотрудников = Новый Массив;
		
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		
		Если ТипЗнч(ДанныеЗапроса) <> Тип("Структура") Тогда
			Возврат Неопределено;
		КонецЕсли;               
		
		МассивСотрудниковИсточник =  СтруктураЗапроса.ДанныеЗапроса.МассивСотрудников;
		МассивСотрудниковУдалитьИсточник =  СтруктураЗапроса.ДанныеЗапроса.МассивСотрудниковУдалить;
		
		Для каждого Стр Из МассивСотрудниковИсточник Цикл
		
			Сотрудник = пр_Общий.СсылкаПоGUID(Справочники.Сотрудники, Стр);	
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				МассивСотрудников.Добавить(Сотрудник);	
			КонецЕсли;
		
		КонецЦикла;
		
		МассивСотрудниковУдалить = МассивСотрудниковУдалитьИсточник;
		//МассивСотрудниковУдалить = Новый Массив;
		//					 	
		//Для каждого Стр Из МассивСотрудниковУдалитьИсточник Цикл
		//
		//	Сотрудник = пр_Общий.СсылкаПоGUID(Справочники.Сотрудники, Стр);	
		//	Если ЗначениеЗаполнено(Сотрудник) Тогда
		//		МассивСотрудниковУдалить.Добавить(Сотрудник);	
		//	КонецЕсли;
		//
		//КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаОтветСверкаСотрудников();
		
		Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
		Запрос.УстановитьПараметр("МассивСотрудниковУдалить", МассивСотрудниковУдалить);

		Пакет = Запрос.ВыполнитьПакет();
		
		НомерПакета = 5;
		
		ВДЗ_Исправить = Пакет[НомерПакета].Выбрать();
		ВДЗ_Удалить	  = Пакет[НомерПакета + 1].Выбрать();
		ВДЗ_Новые 	  = Пакет[НомерПакета + 2].Выбрать(); 
		
		//ВыполнитьВТранзакции(ВДЗ_Исправить, ВДЗ_Удалить);
		
		//Выполнить("ВыполнитьВТранзакции(ВДЗ_Исправить, ВДЗ_Удалить)"); 
		
		//ВДЗ - не поддерживает сериализацию
		НаименованиеФоновогоЗадания = "аян_СверкаСотрудников";  
		//ОбъектОбработка = ЭтотОбъект;
 
		//ВнешняяОбработка = ЭтотОбъект;
		//ИмяМетода = "ВнешняяОбработка.НачальнаяСверкаОбъектовОбмена.ВыполнитьВТранзакцииФоне";      
		//ИмяМетода = "ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)"; 
		//ИмяМетода = "ВнОбработка.ВыполнитьВТранзакцииФоне(МассивСтруктурПараметров)";     
		
		МассивСтруктурПараметров = Новый Массив;
		МассивСтруктурПараметров.Добавить(Новый Структура("МассивСотрудников", МассивСотрудников));						 
		МассивСтруктурПараметров.Добавить(Новый Структура("МассивСотрудниковУдалить", МассивСотрудниковУдалить));						 
		
		//пр_Общий.ЗапуститьФоновоеВыполнениеВнешнейОбработки(ЭтотОбъект, ИмяМетода, МассивСтруктурПараметров, НаименованиеФоновогоЗадания);
		
		//Выполнить("ОбъектОбработка.ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)"); 
		
		МассивПараметров = Новый Массив;   
		МассивПараметров.Добавить(СтруктураЗапроса.ПутьКОбработкеПриемник);
		МассивПараметров.Добавить("ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)");
		МассивПараметров.Добавить(Неопределено);   
		МассивПараметров.Добавить(Неопределено);
		МассивПараметров.Добавить(МассивСотрудников);
		МассивПараметров.Добавить(МассивСотрудниковУдалить);
		//
		////пр_Общий.ЗапуститьФоновоеВыполнение(ИмяМетода, МассивПараметров, , НаименованиеЗадания);
		
		//пр_Общий.ВыполнитьМетодФункцииМодуля(СтруктураЗапроса.ПутьКОбработкеПриемник, "ВыполнитьВТранзакцииФоне(МассивСтруктурПараметров)",,, МассивСтруктурПараметров);
		
		//ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, "", НаименованиеФоновогоЗадания);
		
		//пр_Общий.ВыполнитьМетодФункцииМодуля(СтруктураЗапроса.ПутьКОбработкеПриемник, "ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)",,, МассивСотрудников, МассивСотрудниковУдалить);
		ИмяМетода = "пр_Общий.ВыполнитьМетодФункцииМодуля";     
		ФоновыеЗадания.Выполнить(ИмяМетода, МассивПараметров, "", НаименованиеФоновогоЗадания);
		
		
		Если  ВДЗ_Новые.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		МассивСотрудниковОтвет = пр_Общий.МассивСтруктурПоЗапросу(ВДЗ_Новые);     
		
		Для каждого Стр Из МассивСотрудниковОтвет Цикл
		
			Стр.Вставить("ГоловнаяОрганизация", оду_Общий.СтруктураСсылки(Стр.ГоловнаяОрганизация, Стр));   
			Стр.Вставить("ГоловнойСотрудник", оду_Общий.СтруктураСсылки(Стр.ГоловнойСотрудник, Стр));   
			Стр.Вставить("Сотрудник", оду_Общий.СтруктураСсылки(Стр.Сотрудник, Стр)); 
			Стр.Вставить("ФизическоеЛицо", оду_Общий.СтруктураСсылки(Стр.ФизическоеЛицо, Стр)); 
			//Стр.Вставить("Физлицо", оду_Общий.СтруктураСсылки(Стр.Физлицо, Стр)); 
			
		КонецЦикла;
				
		Данные = Новый Структура("МассивСотрудниковОтвет", МассивСотрудниковОтвет);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;			

КонецФункции   

//Функция ВыполнитьВТранзакцииФоне(МассивСтруктурПараметров)  Экспорт
Функция ВыполнитьВТранзакцииФоне(МассивСотрудников, МассивСотрудниковУдалить)  Экспорт
	
	//МассивСотрудников = МассивСтруктурПараметров.МассивСотрудников;
	//МассивСотрудниковУдалить = МассивСтруктурПараметров.МассивСотрудниковУдалить;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОтветСверкаСотрудников();
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("МассивСотрудниковУдалить", МассивСотрудниковУдалить);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	НомерПакета = 5;
	
	ВДЗ_Исправить = Пакет[НомерПакета].Выбрать();
	ВДЗ_Удалить	  = Пакет[НомерПакета + 1].Выбрать();
	
	Результат =	ВыполнитьВТранзакции(ВДЗ_Исправить, ВДЗ_Удалить);
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьВТранзакции(ВДЗ_Исправить, ВДЗ_Удалить)  Экспорт
	
	НачатьТранзакцию(); 
	Попытка
		
		Пока ВДЗ_Исправить.Следующий() Цикл
			Сотрудник = ВДЗ_Исправить.Ссылка.ПолучитьОбъект();
			Сотрудник.ПометкаУдаления = Ложь;
			Сотрудник.ОбменДанными.Загрузка = Истина;
			Сотрудник.Записать();
		КонецЦикла;
		
		Пока ВДЗ_Удалить.Следующий() Цикл
			Сотрудник = ВДЗ_Удалить.Ссылка.ПолучитьОбъект();
			Сотрудник.ПометкаУдаления = Истина;
			Сотрудник.ОбменДанными.Загрузка = Истина;
			Сотрудник.Записать();
		КонецЦикла;   
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;     
	
	Возврат Истина;
	
КонецФункции

Функция РезультатСверкиСотрудников(СтруктураЗапроса) 
	
	РежимОтладки = СтруктураЗапроса.РежимОтладки;  
	
	Если РежимОтладки = Истина Тогда
		УО = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", СтруктураЗапроса.ИДБазыИсточник);	
	Иначе
		
		Если ЗначениеЗаполнено(СтруктураЗапроса.СсылкаУО) Тогда
			УО = СтруктураЗапроса.СсылкаУО;	
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктураЗапроса.ИДБазыИсточник) Тогда
				Возврат Неопределено;
			Иначе	
				УО = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", СтруктураЗапроса.ИДБазыИсточник);	
			КонецЕсли;  
		КонецЕсли;
		
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(УО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураЗапроса.ДанныеЗапроса) = Тип("Структура") Тогда   
		
		МассивСотрудниковОтвет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса.ДанныеЗапроса, "МассивСотрудниковОтвет", Неопределено);
																						 
		Если НЕ ЗначениеЗаполнено(МассивСотрудниковОтвет) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если МассивСотрудниковОтвет.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	МассивКДобавлению = Новый Массив;
	К = 0;       
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь;  
	//РежимОтладки = Ложь;
	
	НачатьТранзакцию(); 
	
	//Место создания (Сотрудники)
	Свойство = пр_Общий.СсылкаПоТипXML("ChartOfCharacteristicTypesRef.ДополнительныеРеквизитыИСведения", "433590b8-286f-11ef-b05f-9535873bd8a1");
    СтруктураПолей = пр_Общий.ЗначенияРеквизитовОбъекта(УО, "Сервер, Наименование");
	МестоСоздания = СтрШаблон("%1 %2", СтруктураПолей.Сервер, СтруктураПолей.Наименование);
	
	Попытка
		
		Для каждого Стр Из МассивСотрудниковОтвет Цикл
			
			Если ПрерватьЦикл = Истина Тогда
				Прервать;
			КонецЕсли; 
			
			ГоловнаяОрганизация = оду_Общий.СсылкаПоСтруктуре(Стр.ГоловнаяОрганизация);
			ГоловнойСотрудник = оду_Общий.СсылкаПоСтруктуре(Стр.ГоловнойСотрудник);
			Сотрудник = оду_Общий.СсылкаПоСтруктуре(Стр.Сотрудник);
			ФизическоеЛицо = оду_Общий.СсылкаПоСтруктуре(Стр.ФизическоеЛицо); 
			Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) И ЗначениеЗаполнено(Стр.ФизическоеЛицоНаименование) Тогда
				ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(Стр.ФизическоеЛицоНаименование, Истина);
				Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
					
					ФизическоеЛицоОбъект = ПолучитьОбъектСУстановленнойСсылкой(Справочники.ФизическиеЛица, Стр.ФизическоеЛицоСсылка);
					//ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент(); 
					//ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Стр.ФизическоеЛицоСсылка); 
					//ФизическоеЛицоОбъект.УстановитьСсылкуНового(ФизическоеЛицоСсылка);
					ФизическоеЛицоОбъект.Код = Стр.ФизическоеЛицоКод;
					ФизическоеЛицоОбъект.Наименование = Стр.ФизическоеЛицоНаименование;
					
					ФизическоеЛицоОбъект.ОбменДанными.Загрузка = Истина;
					ФизическоеЛицоОбъект.Записать();	
				ИначеЕсли ФизическоеЛицо.ПометкаУдаления = Истина Тогда
					ФизическоеЛицоОбъект = ФизическоеЛицо.ПолучитьОбъект();
					ФизическоеЛицоОбъект.ПометкаУдаления = Ложь;   
					ФизическоеЛицоОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
			
			Если Не ЗначениеЗаполнено(Сотрудник) Тогда
				
				Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(Стр.Наименование, Истина);
				
				Если Не ЗначениеЗаполнено(Сотрудник) Тогда
					
					СотрудникОбъект = ПолучитьОбъектСУстановленнойСсылкой(Справочники.Сотрудники, Стр.СотрудникСсылка);
					//СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент(); 
					//СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку(Стр.СотрудникСсылка); 
					//СотрудникОбъект.УстановитьСсылкуНового(СотрудникСсылка);
					ЗаполнитьЗначенияСвойств(СотрудникОбъект, Стр);  
					
					СотрудникОбъект.ПометкаУдаления = Ложь; 
					СотрудникОбъект.Физлицо = ФизическоеЛицо;   
					СотрудникОбъект.ФизическоеЛицо = ФизическоеЛицо;   
					СотрудникОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация; 
					//СотрудникОбъект.ГоловнойСотрудник = СотрудникСсылка; 
					СотрудникОбъект.ГоловнойСотрудник = СотрудникОбъект.Ссылка; 
					
					//СотрудникОбъект.ОбменДанными.Загрузка = Истина;
					СотрудникОбъект.Записать();
					
					пр_Общий.РезультатЗаписиДопСведений(СотрудникОбъект.Ссылка, Свойство, МестоСоздания); 
					
				ИначеЕсли Сотрудник.ПометкаУдаления = Истина Тогда
					СотрудникОбъект = Сотрудник.ПолучитьОбъект();
					СотрудникОбъект.ПометкаУдаления = Ложь;   
					СотрудникОбъект.Записать();
				КонецЕсли;
				
				//Прервать;
				//МассивКДобавлению.Добавить(Стр);
				//Сотрудник Стр.Сотрудник.ИД
			Иначе
				К = К + 1;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			Если РежимОтладки = Истина Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	//
	
	РезультатВыполненияЗапроса = Неопределено;
	
	Возврат  РезультатВыполненияЗапроса;
	
КонецФункции 

Функция ПолучитьОбъектСУстановленнойСсылкой(МенеджерТипа, ГУИД = Неопределено, УникальныйИдентификаторСтрокой = "") Экспорт
	
	Если ЗначениеЗаполнено(ГУИД) Тогда
		УникальныйИдентификатор = ГУИД;		
	ИначеЕсли ЗначениеЗаполнено(УникальныйИдентификаторСтрокой) Тогда 
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе 
		//Возврат ?(ВозвращатьПустуюСсылку = Ложь, Неопределено, МенеджерТипа.ПустаяСсылка());	
		Возврат Неопределено;
	КонецЕсли;
	
	Объект1С = МенеджерТипа.СоздатьЭлемент(); 
	Ссылка1С = МенеджерТипа.ПолучитьСсылку(УникальныйИдентификатор); 
	Объект1С.УстановитьСсылкуНового(Ссылка1С);
	
	Возврат Объект1С;
	
КонецФункции

#КонецОбласти


#Область  ОчисткаБД

Процедура ЗаписатьОчиститьРСПоИмени(ИмяРС, Данные = Неопределено, Отбор = Неопределено, ИмяПоляОтбора = "")
	
	Набор = РегистрыСведений[ИмяРС].СоздатьНаборЗаписей();  
	
	Если Данные <> Неопределено Тогда
		Набор.Загрузить(Данные);	
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		Набор.Отбор[ИмяПоляОтбора].Установить(Отбор); 
		Набор.Прочитать();
		Набор.Очистить();
	КонецЕсли;
	
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
КонецПроцедуры 


Функция ТекстЗапросаНаОчисткуБазы()
	Возврат

		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
		|ПОМЕСТИТЬ ВТ_ВидЦены
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	ИСТИНА
		|	И НастройкиПользователей.Настройка.Наименование = ""Основной склад""
		|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
		|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены
		|ПОМЕСТИТЬ ВТ_ЦеныОтбор
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ИСТИНА
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%""
		|				И ВидЦен В
		|					(ВЫБРАТЬ
		|						ВТ_ВидЦены.РозничныйВидЦен КАК РозничныйВидЦен
		|					ИЗ
		|						ВТ_ВидЦены КАК ВТ_ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ИСТИНА
		|	И ЦеныНоменклатурыСрезПоследних.Цена > 0
		|	И ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныОтбор.Период КАК Период,
		|	ВТ_ЦеныОтбор.ВидЦен КАК ВидЦен,
		|	ВТ_ЦеныОтбор.Номенклатура КАК Номенклатура,
		|	ВТ_ЦеныОтбор.Характеристика КАК Характеристика,
		|	ВТ_ЦеныОтбор.Цена КАК Цена,
		|	ВТ_ЦеныОтбор.Актуальность КАК Актуальность,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ВТ_ЦеныОтбор.ВалютаЦены КАК ВалютаЦены
		|ПОМЕСТИТЬ ВТ_ЦеныНачало
		|ИЗ
		|	ВТ_ЦеныОтбор КАК ВТ_ЦеныОтбор
		|ГДЕ
		|	ВТ_ЦеныОтбор.Цена > 0
		|	И ВТ_ЦеныОтбор.Актуальность = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена,
		|	ЦеныНоменклатурыСрезПоследних.Актуальность,
		|	НЕОПРЕДЕЛЕНО,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура, ВидЦен) В
		|				(ВЫБРАТЬ
		|					ВТ_Данные.Номенклатура КАК Номенклатура,
		|					&ВидЦеныПоКарте КАК ВидЦеныПоКарте
		|				ИЗ
		|					ВТ_ЦеныОтбор КАК ВТ_Данные)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ИСТИНА
		|	И ЦеныНоменклатурыСрезПоследних.Цена > 0
		|	И ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ЦеныНачало.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ОтборНоменклатуры
		|ИЗ
		|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка
		|ИЗ
		|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ((ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК Справочник.Номенклатура)) = ВТ_ЦеныНачало.Номенклатура)
		|			И (НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования"")
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура_.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура_
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО (ВТ_ОтборНоменклатуры.Номенклатура = Номенклатура_.Ссылка)
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL";

КонецФункции


Функция ТекстЗапросаНаОчисткуБазы_Полн()
	Возврат

		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
		|ПОМЕСТИТЬ ВТ_ВидЦены
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Настройка.Наименование = ""Основной склад""
		|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
		|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены
		|ПОМЕСТИТЬ ВТ_ЦеныНачало
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%""
		|				И ВидЦен В
		|					(ВЫБРАТЬ
		|						ВТ_ВидЦены.РозничныйВидЦен КАК РозничныйВидЦен
		|					ИЗ
		|						ВТ_ВидЦены КАК ВТ_ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Цена > 0
		|	И ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныНачало.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ОтборНоменклатуры
		|ИЗ
		|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|		ПО ((ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК Справочник.Номенклатура)) = ВТ_ЦеныНачало.Номенклатура)
		|			И (НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования"")
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО (ВТ_ОтборНоменклатуры.Номенклатура = (ВЫРАЗИТЬ(ВерсииОбъектов.Объект КАК Справочник.Номенклатура)))
		|ГДЕ
		|	ВерсииОбъектов.Объект ССЫЛКА Справочник.Номенклатура
		|	И ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
		|	СоставНаборов.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО (СоставНаборов.Номенклатура = ВТ_ОтборНоменклатуры.Номенклатура
		|				ИЛИ СоставНаборов.НоменклатураНабора = ВТ_ОтборНоменклатуры.Номенклатура)
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_ОтборНоменклатуры.Номенклатура
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура_.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура_
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО (ВТ_ОтборНоменклатуры.Номенклатура = Номенклатура_.Ссылка)
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = ВТ_ОтборНоменклатуры.Номенклатура
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставСегментаНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.СоставСегментаНоменклатуры КАК СоставСегментаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО СоставСегментаНоменклатуры.Номенклатура = ВТ_ОтборНоменклатуры.Номенклатура
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОписаниеНоменклатурыИС.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ПО ОписаниеНоменклатурыИС.Номенклатура = ВТ_ОтборНоменклатуры.Номенклатура
		|ГДЕ
		|	ВТ_ОтборНоменклатуры.Номенклатура ЕСТЬ NULL";

КонецФункции


Функция ОчиститьПоОтборуБД(КоличествоВыборки, РежимОтладки = Истина)  Экспорт 
	//
	//Если РежимОтладки = Истина Тогда
	//	Возврат;	
	//КонецЕсли; 
	
	НачатьТранзакцию();   
	
	Попытка
		
		Начало = ТекущаяДатаСеанса();
		
		//Д.УстановкаЦен  
		ВДЗ = Документы.УстановкаЦенНоменклатуры.Выбрать();
		Пока ВДЗ.Следующий() Цикл
        	Док = ВДЗ.ПолучитьОбъект();
			Док.Удалить(); //непосредственное удаление    
			Если РежимОтладки = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимОтладки = Ложь Тогда
			//01 Очистка не нужных РС
			ЗаписатьОчиститьРСПоИмени("СП_ДанныеНаОтправкуВРТ"); //2,3 млн
			ЗаписатьОчиститьРСПоИмени("ЗамерыВремени"); //63.5 т
			ЗаписатьОчиститьРСПоИмени("ЗамерыВремениТехнологические");
			ЗаписатьОчиститьРСПоИмени("ЗамерыСтатистики"); //7,3 т
			ЗаписатьОчиститьРСПоИмени("ОрганизацииВКоторыхРаботалиСотрудники"); //16 т
			ЗаписатьОчиститьРСПоИмени("СоставСегментаНоменклатуры"); //28 т 
		КонецЕсли;
		
		//02 Очистка по Номенклатуре  
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаНаОчисткуБазы();
		
		Запрос.УстановитьПараметр("ВидЦеныПоКарте", Справочники.ВидыЦен.НайтиПоНаименованию("ЦенаПоКарте", Истина));
		
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();  
		//НомерПакета = 1; //ЦеныНоменклатуры - 682 т
		НомерПакета = 2;
		
		Если РежимОтладки = Ложь Тогда
			ЗаписатьОчиститьРСПоИмени("ЦеныНоменклатуры"); // 682 т
			ЗаписатьОчиститьРСПоИмени("ЦеныНоменклатуры", Пакет[НомерПакета].Выгрузить()); // 682 т
		КонецЕсли;
		
		// по ведущим очистка должна быть автоматом
		////ЗаписатьОчиститьРСПоИмени("ВерсииОбъектов"); //295 т 
		//ВДЗ = Пакет[НомерПакета + 2].Выбрать();
		//
		//Пока ВДЗ.Следующий() Цикл
		//	ЗаписатьОчиститьРСПоИмени("ВерсииОбъектов",, ВДЗ.Объект, "Объект"); //295 т 
		//КонецЦикла;
		
        //СоставНаборов - 4т , -
		//ШтрихкодыНоменклатуры - 34,7 т	
		//ЗаписатьОчиститьРСПоИмени("ОписаниеНоменклатурыИС"); - 4 т
		
		//Справочник.ДисконтныеКарты -95,5 т
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОчиститьПоОтборуБД", Ошибка);	
		ОтменитьТранзакцию();
		Возврат Ошибка;
	КонецПопытки; 
	
	Если  ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//Справочник.Номенклатура  -44 т   
	//ВДЗ = Пакет[НомерПакета + 5].Выбрать();
	ВДЗ = Пакет[НомерПакета + 2].Выбрать();
	//ВДЗ = Пакет[НомерПакета + 3].Выбрать();

	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	ОбъемТранзакции = 500;
	
	ТекТранз = ОбъемТранзакции;
	Осч = 1;
	Сч = 1; 
	КолВыборки = ВДЗ.Количество();
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Попытка
			
			Ном = ВДЗ.Ссылка.ПолучитьОбъект();
			//Если ЗначениеЗаполнено(Ном.Ссылка) Тогда
			Если Ном <> Неопределено Тогда
				Ном.Удалить(); //непосредственное удаление  
			КонецЕсли;
			Если РежимОтладки = Истина Тогда
				Прервать;
			КонецЕсли;
			
		Исключение                                 
			
			Ошибка = ОписаниеОшибки();
			оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОчиститьПоОтборуБД", Ошибка);	
			ОтменитьТранзакцию();
			Возврат Ошибка;  
			
		КонецПопытки;
		
		Если Сч >= ТекТранз ИЛИ Осч = КолВыборки Тогда //Последняя запись
			//Зафиксировать транзакцию
			ЗафиксироватьТранзакцию();
			
			Если Осч <> КолВыборки Тогда //Если запись не последняя продолжаем
				ТекТранз = ОбъемТранзакции;
				Сч = 1;
				НачатьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
	
		Сч = Сч + 1;
		Осч = Осч + 1;
		
	КонецЦикла;
	
	Если  ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ВремяОперации = ТекущаяДатаСеанса() - Начало;
	
 	Возврат ВремяОперации;				
	
КонецФункции

#КонецОбласти

#Область  РезультатПолученияАктуальногоВидаЦен

Функция ПолучитьАктуальныйВидЦен()
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы) КАК Склад,
			|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ
			|	НастройкиПользователей.Настройка.Наименование = ""Основной склад""
			|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
			|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|";

		РезультатЗапроса = Запрос.Выполнить();   
		ВДЗ = РезультатЗапроса.Выбрать();
		
		Если ВДЗ.Следующий() Тогда 
			Данные = Новый Структура();   
			Данные.Вставить("Склад", XMLСтрока(ВДЗ.Склад));
			Данные.Вставить("РозничныйВидЦен", XMLСтрока(ВДЗ.РозничныйВидЦен));
			Данные.Вставить("ВерсияКонфигурации", Метаданные.Версия);
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;				
	
КонецФункции

Функция РезультатПолученияАктуальногоВидаЦен(СтруктураЗапроса) 
	
	Если СтруктураЗапроса.РежимОтладки = Истина Тогда
		УО = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", СтруктураЗапроса.ИДБазыИсточник);	
	Иначе
		
		Если ЗначениеЗаполнено(СтруктураЗапроса.СсылкаУО) Тогда
			УО = СтруктураЗапроса.СсылкаУО;	
		Иначе
			Если НЕ ЗначениеЗаполнено(СтруктураЗапроса.ИДБазыИсточник) Тогда
				Возврат Неопределено;
			Иначе	
				УО = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", СтруктураЗапроса.ИДБазыИсточник);	
			КонецЕсли;  
		КонецЕсли;
		
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено(УО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	                                                      
	СтруктураДанных = Новый Структура("Склад, РозничныйВидЦен, ВерсияКонфигурации"); 
	ЗаполнитьЗначенияСвойств(СтруктураДанных, СтруктураЗапроса.ДанныеЗапроса);
	РозничныйВидЦен = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураДанных.РозничныйВидЦен) Тогда    
		СтруктураДанных.РозничныйВидЦен = пр_Общий.СсылкаПоТипXML("CatalogRef.ВидыЦен", СтруктураДанных.РозничныйВидЦен);
	//Иначе
	//	Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда    
		СтруктураДанных.Склад = пр_Общий.СсылкаПоТипXML("CatalogRef.СтруктурныеЕдиницы", СтруктураДанных.Склад);
	//Иначе
	//	Возврат Неопределено;
	КонецЕсли;	
	
	//Если ЗначениеЗаполнено(РозничныйВидЦен) Тогда
		РезультатВыполненияЗапроса = РезультатЗаписиОтбораОбъектовОбмена(УО, СтруктураДанных, СтруктураЗапроса.РежимОтладки);
	//КонецЕсли;
	
	Возврат  РезультатВыполненияЗапроса;
	
КонецФункции 

//TODO:  переделать
Функция РезультатЗаписиОтбораОбъектовОбмена(УО, СтруктураДанных, РежимОтладки = Ложь)

	Попытка
		
		УООбъект = УО.ПолучитьОбъект();
		
		//Запись ограничений 
		ЕстьИзменения = Ложь;
		
		Если ЗначениеЗаполнено(СтруктураДанных.РозничныйВидЦен) Тогда
			ТЧОграничения = УООбъект.Организации;       
			//СтрПоиска = Новый Структура("Организация", СтруктураДанных.РозничныйВидЦен);
			//МПоиска = ТЧОграничения.НайтиСтроки(СтрПоиска); 
			//Если МПоиска.Количество() = 0 Тогда        
			Если ТЧОграничения.Количество() = 0 Тогда
				Нстр = ТЧОграничения.Добавить();
				Нстр.Организация = СтруктураДанных.РозничныйВидЦен;  
				ЕстьИзменения = Истина;
			Иначе
				//Нстр = МПоиска[0];
				Нстр = ТЧОграничения[0];
				Если Нстр.Организация <> СтруктураДанных.РозничныйВидЦен Тогда
					Нстр.Организация = СтруктураДанных.РозничныйВидЦен;  
					ЕстьИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		//Версия конфигурации
		Если ЗначениеЗаполнено(СтруктураДанных.ВерсияКонфигурации) Тогда
			Если УООбъект.ТекущаяВерсияКонфигурации <> СтруктураДанных.ВерсияКонфигурации Тогда
				УООбъект.ТекущаяВерсияКонфигурации = СтруктураДанных.ВерсияКонфигурации;
				ЕстьИзменения = Истина;
			КонецЕсли;	
		КонецЕсли;    
		
		//Склад
		Если ЗначениеЗаполнено(СтруктураДанных.Склад) Тогда
			Если УООбъект.Склад <> СтруктураДанных.Склад Тогда  
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("У магаза %1 склад %2 отличается %3", УООбъект.Сервер, СтруктураДанных.Склад, УООбъект.Склад);
				Сообщение.Сообщить();
				//УООбъект.Склад = СтруктураДанных.Склад;
				//ЕстьИзменения = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если РежимОтладки = Ложь И ЕстьИзменения = Истина Тогда   
			
			УООбъект.ОбменДанными.Загрузка = Истина;
			УООбъект.Записать();
		КонецЕсли;
		
		Возврат Истина;
			
	Исключение
		оду_Общий.ЗафиксироватьОшибкуExchange("РезультатЗаписиОтбораОбъектовОбмена",,,, ОписаниеОшибки());
	 	Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти


#Область ЦеныНоменклатуры 


Функция ТекстЗапросаЦеныНоменклатуры()
	Возврат	
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбменаОрганизации.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_Отбор
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|ГДЕ
		|	оду_БазыУчастникиОбменаОрганизации.Ссылка = &Ссылка
		|	И оду_БазыУчастникиОбменаОрганизации.Организация ССЫЛКА Справочник.ВидыЦен
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбменаОрганизации.Организация
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|ГДЕ
		|	оду_БазыУчастникиОбменаОрганизации.Ссылка = &ВидЦеныПоКарте
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦен В
		|				(ВЫБРАТЬ
		|					ВТ_Отбор.Организация КАК Организация
		|				ИЗ
		|					ВТ_Отбор КАК ВТ_Отбор)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ПометкаУдаления = ЛОЖЬ";

КонецФункции

Функция ЗапросЦеныНоменклатуры(СтруктураЗапроса)
	
	Попытка
		
	ИмяФайлаЗапроса = "\\192.168.100.11\core-sync\Обмен\Данные\СверкаЦен_Ядро_ТТ.json";
	НомерУО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "НомерУО", 1);
	
	Если НомерУО > 1 Тогда
		Возврат ИмяФайлаЗапроса;			
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЦеныНоменклатуры(); 
	
	ТекущиеНастройки = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	Запрос.УстановитьПараметр("Ссылка", ТекущиеНастройки.БазаДанных);
	Запрос.УстановитьПараметр("ВидЦеныПоКарте", Справочники.ВидыЦен.НайтиПоНаименованию("ЦенаПоКарте", Истина));  
		
	РезультатЗапроса = Запрос.Выполнить();    
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();

	МассивДанных = Новый Массив;
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();
		
		СтруктураДанных.Вставить("Период", ВыборкаДанных.Период); 
		СтруктураДанных.Вставить("Номенклатура", СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
		//СтруктураДанных.Вставить("Характеристика", СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
		СтруктураДанных.Вставить("ВидЦен", СтруктураСсылки(ВыборкаДанных.ВидЦен, ВыборкаДанных));
		СтруктураДанных.Вставить("ЕдиницаИзмерения", СтруктураСсылки(ВыборкаДанных.ЕдиницаИзмерения, ВыборкаДанных));
		
		СтруктураДанных.Вставить("Цена", ВыборкаДанных.Цена);
		
		МассивДанных.Добавить(СтруктураДанных);
		
	КонецЦикла; 
	
	Данные = Новый Структура();   
	Данные.Вставить("МассивДанных", МассивДанных);  
	
	ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(Данные, ИмяФайлаЗапроса);
	
	ДанныеЗапроса = ИмяФайлаЗапроса;
	
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ЗапросЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат ДанныеЗапроса;			

КонецФункции

#Область  Ответ


Функция ТекстОтветаСбораЦен()
	Возврат
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
	|ПОМЕСТИТЬ ВТ_ВидЦены
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	ИСТИНА
	|	И НастройкиПользователей.Настройка.Наименование = ""Основной склад""
	|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
	|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ДанныеНач
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура.ПометкаУдаления = ЛОЖЬ
	|				И Актуальность = ИСТИНА
	|				И ВидЦен В
	|					(ВЫБРАТЬ
	|						ВТ_ВидЦены.РозничныйВидЦен КАК РозничныйВидЦен
	|					ИЗ
	|						ВТ_ВидЦены КАК ВТ_ВидЦены)
	|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%"") КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ #КоличествоВыборки
	//|ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВТ_ДанныеНач.Период КАК Период,
	|	ВТ_ДанныеНач.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеНач.Характеристика КАК Характеристика,
	|	ВТ_ДанныеНач.ВидЦен КАК ВидЦен,
	|	ВТ_ДанныеНач.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ДанныеНач.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_ДанныеНач КАК ВТ_ДанныеНач
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ВидЦен) В
	|				(ВЫБРАТЬ
	|					ВТ_Данные.Номенклатура КАК Номенклатура,
	|					&ВидЦеныПоКарте КАК ВидЦеныПоКарте
	|				ИЗ
	|					ВТ_ДанныеНач КАК ВТ_Данные)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Данные.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВТ_Данные.ЕдиницаИзмерения.Владелец КАК Владелец,
	|	ВТ_Данные.ЕдиницаИзмерения.Код КАК Код
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.ЕдиницаИзмерения.Наименование ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ВидЦен КАК ВидЦен,
	|	ВТ_Данные.ВидЦен.Наименование КАК Наименование,
	|	ВТ_Данные.ВидЦен.Код КАК Код
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.ВидЦен.Наименование ЕСТЬ НЕ NULL 
	|";	
	
КонецФункции

Функция ОтветАктуальныеЦеныНоменклатуры(КоличествоВыборки, СтруктураЗапроса)
	
	Попытка
		
		Запрос = Новый Запрос;  
		
		Запрос.УстановитьПараметр("ВидЦеныПоКарте", Справочники.ВидыЦен.НайтиПоНаименованию("ЦенаПоКарте", Истина));
		
		Запрос.Текст = ТекстОтветаСбораЦен();     
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоВыборки", КоличествоВыборки);
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		//НомерПакета = 0;
		//ВыборкаЦен = Пакет[НомерПакета].Выбрать();
		//МассивОграниченияВидЦен = Новый Массив;
		//
		//Пока ВыборкаЦен.Следующий() Цикл
		//	
		//	СтруктураДанных = Новый Структура("РозничныйВидЦен", XMLСтрока(ВыборкаЦен.РозничныйВидЦен)); 
		//	
		//	МассивОграниченияВидЦен.Добавить(СтруктураДанных);
		//	
		//КонецЦикла;
		//
		//НомерПакета = НомерПакета + 1;	
		//ВыборкаДанных = Пакет[НомерПакета + 1].Выбрать();
		//ВыборкаУпаковок = Пакет[НомерПакета + 2].Выбрать();
		//ВыборкаВидЦен = Пакет[НомерПакета + 3].Выбрать();
		//
		//Если ВыборкаДанных.Количество() = 0 Тогда
		//	Возврат Неопределено;
		//КонецЕсли;
		//
		//МассивДанных = Новый Массив;
		//
		//Пока ВыборкаДанных.Следующий() Цикл
		//	
		//	СтруктураДанных = Новый Структура();
		//	
		//	СтруктураДанных.Вставить("Период", ВыборкаДанных.Период); 
		//	СтруктураДанных.Вставить("Номенклатура", СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
		//	СтруктураДанных.Вставить("Характеристика", СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
		//	СтруктураДанных.Вставить("ВидЦен", СтруктураСсылки(ВыборкаДанных.ВидЦен, ВыборкаДанных));
		//	СтруктураДанных.Вставить("ЕдиницаИзмерения", СтруктураСсылки(ВыборкаДанных.ЕдиницаИзмерения, ВыборкаДанных));
		//	
		//	СтруктураДанных.Вставить("Цена", ВыборкаДанных.Цена);
		//	
		//	МассивДанных.Добавить(СтруктураДанных);
		//	
		//КонецЦикла;
		//
		////СтруктураСсылки = Новый Структура("ТипСсылки, ИД, ПоляПоиска"); 
		//МассивУпаковок = Новый Массив;
		//
		////Пока ВыборкаУпаковок.Следующий() Цикл
		////	
		////	СтруктураУпаковки = Новый Структура("ЕдиницаИзмерения, Наименование, Владелец, Код");
		////	СтруктураУпаковки.ЕдиницаИзмерения = СтруктураСсылки(ВыборкаУпаковок.ЕдиницаИзмерения, ВыборкаУпаковок);
		////	СтруктураУпаковки.Владелец = СтруктураСсылки(ВыборкаУпаковок.Владелец, ВыборкаУпаковок);
		////	СтруктураУпаковки.Код = ВыборкаУпаковок.Код;
		////	СтруктураУпаковки.Наименование = ВыборкаУпаковок.Наименование;
		////	
		////	МассивУпаковок.Добавить(СтруктураУпаковки);
		////	
		////КонецЦикла; 
		//
		//МассивВидЦен = Новый Массив;
		//
		//Пока ВыборкаВидЦен.Следующий() Цикл
		//	
		//	СтруктураДанных = Новый Структура();
		//	СтруктураДанных.Вставить("ВидЦен", СтруктураСсылки(ВыборкаВидЦен.ВидЦен, ВыборкаВидЦен));
		//	СтруктураДанных.Вставить("Код", ВыборкаВидЦен.Код);
		//	СтруктураДанных.Вставить("Наименование", ВыборкаВидЦен.Наименование);
		//	
		//	МассивВидЦен.Добавить(СтруктураДанных);
		//	
		//КонецЦикла;
		//   
		
		Данные = Новый Структура();    
		//Данные.Вставить("ВидЦены", МассивОграниченияВидЦен);
		//Данные.Вставить("МассивДанных", МассивДанных);
		//Данные.Вставить("МассивУпаковок", МассивУпаковок);
		//Данные.Вставить("МассивВидЦен", МассивВидЦен);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;				
	
КонецФункции


  
#Область  СтарСхем

Функция ТекстЗапросаСбораЦен()
	Возврат
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
	|ПОМЕСТИТЬ ВТ_ВидЦены
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	ИСТИНА
	|	И НастройкиПользователей.Настройка.Наименование = ""Основной склад""
	|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
	|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ДанныеНач
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			Номенклатура.ПометкаУдаления = ЛОЖЬ
	|				И Актуальность = ИСТИНА
	|				И ВидЦен В
	|					(ВЫБРАТЬ
	|						ВТ_ВидЦены.РозничныйВидЦен КАК РозничныйВидЦен
	|					ИЗ
	|						ВТ_ВидЦены КАК ВТ_ВидЦены)
	|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%"") КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ #КоличествоВыборки
	//|ВЫБРАТЬ ПЕРВЫЕ 3
	|	ВТ_ДанныеНач.Период КАК Период,
	|	ВТ_ДанныеНач.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеНач.Характеристика КАК Характеристика,
	|	ВТ_ДанныеНач.ВидЦен КАК ВидЦен,
	|	ВТ_ДанныеНач.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ДанныеНач.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	ВТ_ДанныеНач КАК ВТ_ДанныеНач
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Период,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			(Номенклатура, ВидЦен) В
	|				(ВЫБРАТЬ
	|					ВТ_Данные.Номенклатура КАК Номенклатура,
	|					&ВидЦеныПоКарте КАК ВидЦеныПоКарте
	|				ИЗ
	|					ВТ_ДанныеНач КАК ВТ_Данные)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_Данные.ЕдиницаИзмерения.Наименование КАК Наименование,
	|	ВТ_Данные.ЕдиницаИзмерения.Владелец КАК Владелец,
	|	ВТ_Данные.ЕдиницаИзмерения.Код КАК Код
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.ЕдиницаИзмерения.Наименование ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Данные.ВидЦен КАК ВидЦен,
	|	ВТ_Данные.ВидЦен.Наименование КАК Наименование,
	|	ВТ_Данные.ВидЦен.Код КАК Код
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|ГДЕ
	|	ВТ_Данные.ВидЦен.Наименование ЕСТЬ НЕ NULL 
	|";	
	
КонецФункции

Функция СобратьАктуальныеЦеныНоменклатуры(КоличествоВыборки)
	
	Попытка
		
		Запрос = Новый Запрос;  
		
		Запрос.УстановитьПараметр("ВидЦеныПоКарте", Справочники.ВидыЦен.НайтиПоНаименованию("ЦенаПоКарте", Истина));
		
		Запрос.Текст = ТекстЗапросаСбораЦен();     
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоВыборки", КоличествоВыборки);
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		НомерПакета = 0;
		ВыборкаЦен = Пакет[НомерПакета].Выбрать();
		МассивОграниченияВидЦен = Новый Массив;
		
		Пока ВыборкаЦен.Следующий() Цикл
			
			СтруктураДанных = Новый Структура("РозничныйВидЦен", XMLСтрока(ВыборкаЦен.РозничныйВидЦен)); 
			
			МассивОграниченияВидЦен.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		НомерПакета = НомерПакета + 1;	
		ВыборкаДанных = Пакет[НомерПакета + 1].Выбрать();
		ВыборкаУпаковок = Пакет[НомерПакета + 2].Выбрать();
		ВыборкаВидЦен = Пакет[НомерПакета + 3].Выбрать();
		
		Если ВыборкаДанных.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивДанных = Новый Массив;
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			
			СтруктураДанных.Вставить("Период", ВыборкаДанных.Период); 
			СтруктураДанных.Вставить("Номенклатура", СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
			СтруктураДанных.Вставить("Характеристика", СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
			СтруктураДанных.Вставить("ВидЦен", СтруктураСсылки(ВыборкаДанных.ВидЦен, ВыборкаДанных));
			СтруктураДанных.Вставить("ЕдиницаИзмерения", СтруктураСсылки(ВыборкаДанных.ЕдиницаИзмерения, ВыборкаДанных));
			
			СтруктураДанных.Вставить("Цена", ВыборкаДанных.Цена);
			
			МассивДанных.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		//СтруктураСсылки = Новый Структура("ТипСсылки, ИД, ПоляПоиска"); 
		МассивУпаковок = Новый Массив;
		
		//Пока ВыборкаУпаковок.Следующий() Цикл
		//	
		//	СтруктураУпаковки = Новый Структура("ЕдиницаИзмерения, Наименование, Владелец, Код");
		//	СтруктураУпаковки.ЕдиницаИзмерения = СтруктураСсылки(ВыборкаУпаковок.ЕдиницаИзмерения, ВыборкаУпаковок);
		//	СтруктураУпаковки.Владелец = СтруктураСсылки(ВыборкаУпаковок.Владелец, ВыборкаУпаковок);
		//	СтруктураУпаковки.Код = ВыборкаУпаковок.Код;
		//	СтруктураУпаковки.Наименование = ВыборкаУпаковок.Наименование;
		//	
		//	МассивУпаковок.Добавить(СтруктураУпаковки);
		//	
		//КонецЦикла; 
		
		МассивВидЦен = Новый Массив;
		
		Пока ВыборкаВидЦен.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			СтруктураДанных.Вставить("ВидЦен", СтруктураСсылки(ВыборкаВидЦен.ВидЦен, ВыборкаВидЦен));
			СтруктураДанных.Вставить("Код", ВыборкаВидЦен.Код);
			СтруктураДанных.Вставить("Наименование", ВыборкаВидЦен.Наименование);
			
			МассивВидЦен.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		Данные = Новый Структура();    
		Данные.Вставить("ВидЦены", МассивОграниченияВидЦен);
		Данные.Вставить("МассивДанных", МассивДанных);
		Данные.Вставить("МассивУпаковок", МассивУпаковок);
		Данные.Вставить("МассивВидЦен", МассивВидЦен);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;				
	
КонецФункции

#КонецОбласти


#КонецОбласти



Функция РезультатСверкиЦеныНоменклатуры(ИмяЗапроса, ДанныеЗапроса, СоотвУпаковки, КоличествоВыборки)
	
	СоотвВидЦен = СтруктураСоответвийвВидЦен(ИмяЗапроса, ДанныеЗапроса.МассивВидЦен);
	
	Если СоотвВидЦен = Неопределено  Тогда
		Ошибка = "Не удалось найти соответсвия видам цен УТ Розница";
		Возврат Ошибка;
	КонецЕсли; 

	ТаблицаДанных = ТаблицаАктуальныхЦенНоменклатурыЯдра(ИмяЗапроса, ДанныеЗапроса.МассивДанных, СоотвУпаковки, СоотвВидЦен);
	
	Если ТаблицаДанных = Неопределено  Тогда
		Ошибка = "Не удалось получить таблицу данных цен в УТ";
		Возврат Ошибка;
	КонецЕсли; 
	
	РезультатЗапроса = РезультатЗапросаАктуальныхЦен(ТаблицаДанных, ДанныеЗапроса, КоличествоВыборки);
	
	Возврат  РезультатЗапроса;
	
КонецФункции  

Функция СтруктураСоответвийвВидЦен(ИмяЗапроса,  МассивВидЦен)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЗ.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЗ.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
		
		СоотвВидЦен = Новый Соответствие();
		ЕстьОшибка = Ложь;
		
		Для каждого Стр Из МассивВидЦен Цикл
			
			//Стр.ЕдиницаИзмерения.ИмяТипаСсылки
			ИД = Стр.ВидЦен.ИД;
			ВидЦен = пр_Общий.СсылкаПоТипXML("CatalogRef.ВидыЦен", ИД);
			
			Если ВидЦен = Неопределено Тогда
				
				Нстр = ТЗ.Добавить();
				Нстр.ИД = ИД;
				Нстр.Наименование = Стр.Наименование;
				Нстр.Код = Стр.Код;
				
				//TODO:  доделать, когда не будет сопоставлений
				ЕстьОшибка = Истина;  
				Ошибка = "Доделать произвольный поиск ВидЦен";
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
				
			Иначе
				СоотвВидЦен.Вставить(ИД, ВидЦен);  	
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат СоотвВидЦен;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
	КонецПопытки; 
	
КонецФункции 

Функция ТаблицаАктуальныхЦенНоменклатурыЯдра(ИмяЗапроса, МассивДанных, СоотвУпаковки, СоотвВидЦен)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений; 
		
		ТЗ.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТЗ.Колонки.Добавить("ВидЦен", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТЗ.Колонки.Добавить("ИД_ВидЦен", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		//ТЗ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
		МассивЕдИзм = Новый Массив;
		МассивЕдИзм.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		МассивЕдИзм.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));

		ТЗ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов(МассивЕдИзм));
		
		ТЗ.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		ТЗ.Колонки.Добавить("ИД_Упаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
		ЕстьОшибка = Ложь;
		
		массивН = Новый Массив;
				   
		Для каждого Стр Из МассивДанных Цикл
			
			//Стр.ЕдиницаИзмерения.ИмяТипаСсылки
			Номенклатура = оду_Общий.СсылкаПоСтруктуре(Стр.Номенклатура);
			
			Если Номенклатура = Неопределено Тогда
				//стр_М = Новый Структура("",); 
				массивН.Добавить(Стр.Номенклатура);
				//ЕстьОшибка = Истина;  
				//Ошибка = "Не удалось найти номенклатуру";
				//Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
				//оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
				Продолжить;
			КонецЕсли; 
			
			СтрХарактеристика = Стр.Характеристика;
			Если СтрХарактеристика.ИД = "00000000-0000-0000-0000-000000000000"  ИЛИ СтрХарактеристика.ИД = "" Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			Иначе
				Характеристика = оду_Общий.СсылкаПоСтруктуре(Стр.Характеристика);
			КонецЕсли; 
			
			Если Характеристика = Неопределено Тогда
				ЕстьОшибка = Истина;  
				Ошибка = "Не удалось найти Характеристику";
				Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
			КонецЕсли; 
			
			//СтрЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			//Если СтрЕдиницаИзмерения.ИД = "00000000-0000-0000-0000-000000000000" ИЛИ СтрЕдиницаИзмерения.ИД = "" Тогда
			//	//ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();	
				ЕдиницаИзмерения = Неопределено;	
			//Иначе
			//	ЕдиницаИзмерения = СоотвУпаковки.Получить(СтрЕдиницаИзмерения.ИД);
			//КонецЕсли; 
			
			СтрВидЦен = Стр.ВидЦен;
			Если СтрВидЦен.ИД = "00000000-0000-0000-0000-000000000000" ИЛИ СтрВидЦен.ИД = "" Тогда
				ВидЦен = Справочники.ВидыЦен.ПустаяСсылка();	
			Иначе
				ВидЦен = СоотвВидЦен.Получить(СтрВидЦен.ИД);
			КонецЕсли; 
			
			
			Нстр = ТЗ.Добавить();
			Нстр.Период = Стр.Период;
			Нстр.Номенклатура = Номенклатура;
			Нстр.ЕдиницаИзмерения = ЕдиницаИзмерения;
			//Нстр.ИД_Упаковки = СтрЕдиницаИзмерения.ИД;
			Нстр.ВидЦен = ВидЦен;
			Нстр.ИД_ВидЦен = СтрВидЦен.ИД;
			Нстр.Характеристика = Характеристика;
			Нстр.Цена = Стр.Цена;
			
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат ТЗ;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат  ТЗ;
	
КонецФункции


Функция ТекстЗапросаСверкиЦен()
	Возврат   

		"ВЫБРАТЬ
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.Характеристика КАК Характеристика,
		|	ТЗ.ВидЦен КАК ВидЦен,
		|	ТЗ.ИД_ВидЦен КАК ИД_ВидЦен,
		|	ТЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ.ИД_Упаковки КАК ИД_Упаковки,
		|	ТЗ.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ДанныеУТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_СрезНачало
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И Актуальность = ИСТИНА
		|				И ВидЦен В (&МассивВидЦен)
		|				И ВидЦен.ПометкаУдаления = ЛОЖЬ) КАК ЦеныНоменклатурыСрезПоследних
		//|ГДЕ
		//|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование ПОДОБНО ""%яяя%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		//|	ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВТ_СрезНачало.Период КАК Период,
		|	ВТ_СрезНачало.Номенклатура КАК Номенклатура,
		|	ВТ_СрезНачало.Характеристика КАК Характеристика,
		|	ВТ_СрезНачало.ВидЦен КАК ВидЦен,
		|	ВТ_СрезНачало.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_СрезНачало.ВалютаЦены КАК ВалютаЦены,
		|	ВТ_СрезНачало.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	ВТ_СрезНачало КАК ВТ_СрезНачало
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Период,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			(Номенклатура, ВидЦен) В
		|				(ВЫБРАТЬ
		|					ВТ_Данные.Номенклатура КАК Номенклатура,
		|					&ВидЦеныПоКарте КАК ВидЦеныПоКарте
		|				ИЗ
		|					ВТ_СрезНачало КАК ВТ_Данные)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Срез.Период КАК Период,
		|	ВТ_Срез.Номенклатура КАК Номенклатура,
		|	ВТ_Срез.Характеристика КАК Характеристика,
		|	ВТ_Срез.ВидЦен КАК ВидЦен,
		|	ВТ_Срез.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ВТ_ДанныеУТ.Цена, 0) КАК ЦенаБ,
		|	ВТ_Срез.Цена КАК Цена,
		|	ВТ_Срез.ВалютаЦены КАК ВалютаЦены,
		|	ИСТИНА КАК Актуальность
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеУТ КАК ВТ_ДанныеУТ
		|		ПО ВТ_Срез.Номенклатура = ВТ_ДанныеУТ.Номенклатура
		|			И ВТ_Срез.Характеристика = ВТ_ДанныеУТ.Характеристика
		|			И ВТ_Срез.ВидЦен = ВТ_ДанныеУТ.ВидЦен
		//|			И ВТ_Срез.ЕдиницаИзмерения = ВТ_ДанныеУТ.ЕдиницаИзмерения
		|ГДЕ
		|	ЕСТЬNULL(ВТ_ДанныеУТ.Цена, 0) <> ВТ_Срез.Цена
		|";
		
КонецФункции


Функция РезультатЗапросаАктуальныхЦен(ТЗ, ДанныеЗапроса, КоличествоВыборки)
	
	МассивВидЦен = ОтборВидЦены(ДанныеЗапроса);	
	ОтборВидЦен = "";
	
	Запрос = Новый Запрос;     
	Запрос.Текст = ТекстЗапросаСверкиЦен(); 
	
		
	Если ЗначениеЗаполнено(МассивВидЦен) Тогда
		ОтборВидЦен = "И ВидЦен В(&МассивВидЦен)";
		Запрос.УстановитьПараметр("МассивВидЦен", МассивВидЦен);
	КонецЕсли;   
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ОтборВидЦен", ОтборВидЦен);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоВыборки", КоличествоВыборки);
		
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.УстановитьПараметр("ВидЦеныПоКарте", Справочники.ВидыЦен.НайтиПоНаименованию("ЦенаПоКарте", Истина));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса; 
	
КонецФункции 

Функция ОбработатьВыборкуЦен(ИмяЗапроса, ВыборкаДанных, СоотвУпаковки)
	
	Попытка
		
		МассивДанных = Новый Массив;
					    
		Пока ВыборкаДанных.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			
			СтруктураДанных.Вставить("Номенклатура", СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
			СтруктураДанных.Вставить("Характеристика", СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
			СтруктураДанных.Вставить("ЕдиницаИзмерения", Новый Структура("ИмяТипаСсылки, ИД, ПоляПоиска", "CatalogRef.УпаковкиНоменклатуры", ВыборкаДанных.ИД_Упаковки, ""));
			
			СтруктураДанных.Вставить("Цена", ВыборкаДанных.Цена);
			
			МассивДанных.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		Возврат  МассивДанных;
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
		Возврат  Ошибка;
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#Область ШтрихкодыНоменклатуры 


Функция СобратьШКНоменклатуры(КоличествоВыборки)
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст =     
		
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен КАК РозничныйВидЦен
			|ПОМЕСТИТЬ ВТ_ВидЦены
			|ИЗ
			|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
			|ГДЕ
			|	ИСТИНА
			|	И НастройкиПользователей.Настройка.Наименование = ""Основной склад""
			|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен ЕСТЬ НЕ NULL 
			|	И ВЫРАЗИТЬ(НастройкиПользователей.Значение КАК Справочник.СтруктурныеЕдиницы).РозничныйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
			|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
			|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены
			|ПОМЕСТИТЬ ВТ_ЦеныНачало
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			ИСТИНА
			|				И Номенклатура.ПометкаУдаления = ЛОЖЬ
			|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%""
			|				И ВидЦен В
			|					(ВЫБРАТЬ
			|						ВТ_ВидЦены.РозничныйВидЦен КАК РозничныйВидЦен
			|					ИЗ
			|						ВТ_ВидЦены КАК ВТ_ВидЦены)) КАК ЦеныНоменклатурыСрезПоследних
			|ГДЕ
			|	ИСТИНА
			|	И ЦеныНоменклатурыСрезПоследних.Цена > 0
			|	И ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ЦеныНачало.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ВТ_ОтборНоменклатуры
			|ИЗ
			|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НоменклатураДополнительныеРеквизиты.Ссылка
			|ИЗ
			|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|		ПО ((ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК Справочник.Номенклатура)) = ВТ_ЦеныНачало.Номенклатура)
			|			И (НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования"")
			|ГДЕ
			|	НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ #КоличествоВыборки
			//"ВЫБРАТЬ ПЕРВЫЕ 3
			//"ВЫБРАТЬ
			|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
			|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ПОМЕСТИТЬ ВТ_Данные
			|ИЗ
			|	ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|		ПО ВТ_ОтборНоменклатуры.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления = ЛОЖЬ
			|	И ЕСТЬNULL(ШтрихкодыНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
			|	И ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ НЕ NULL         
			|	И ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ НЕ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВТ_Данные.ЕдиницаИзмерения.Наименование КАК Наименование,
			|	ВТ_Данные.ЕдиницаИзмерения.Владелец КАК Владелец,
			|	ВТ_Данные.ЕдиницаИзмерения.Код КАК Код
			|ИЗ
			|	ВТ_Данные КАК ВТ_Данные
			|ГДЕ
			|	ВТ_Данные.ЕдиницаИзмерения.Наименование ЕСТЬ НЕ NULL 
			|";		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоВыборки", КоличествоВыборки);
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		ВыборкаЦен = Пакет[0].Выбрать();
		МассивВидЦен = Новый Массив;
		
		Пока ВыборкаЦен.Следующий() Цикл
			
			СтруктураДанных = Новый Структура("РозничныйВидЦен", XMLСтрока(ВыборкаЦен.РозничныйВидЦен)); 
			
			МассивВидЦен.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		НомерПакета = 3;                             
		ВыборкаДанных = Пакет[НомерПакета].Выбрать();
		ВыборкаУпаковок = Пакет[НомерПакета + 1].Выбрать();
		
		Если ВыборкаДанных.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивДанных = Новый Массив;
					    
		Пока ВыборкаДанных.Следующий() Цикл
			
			СтруктураДанных = Новый Структура();
			
			СтруктураДанных.Вставить("Штрихкод", ВыборкаДанных.Штрихкод); 
			СтруктураДанных.Вставить("Номенклатура", СтруктураСсылки(ВыборкаДанных.Номенклатура, ВыборкаДанных));
			СтруктураДанных.Вставить("Характеристика", СтруктураСсылки(ВыборкаДанных.Характеристика, ВыборкаДанных));
			//СтруктураДанных.Вставить("Партия", СтруктураСсылки(ВыборкаДанных.Партия, ВыборкаДанных));
			СтруктураДанных.Вставить("ЕдиницаИзмерения", СтруктураСсылки(ВыборкаДанных.ЕдиницаИзмерения, ВыборкаДанных));
			
			МассивДанных.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
		//СтруктураСсылки = Новый Структура("ТипСсылки, ИД, ПоляПоиска"); 
		МассивУпаковок = Новый Массив;
		
		//Пока ВыборкаУпаковок.Следующий() Цикл
		//	
		//	СтруктураУпаковки = Новый Структура("ЕдиницаИзмерения, Наименование, Владелец, Код");
		//	СтруктураУпаковки.ЕдиницаИзмерения = СтруктураСсылки(ВыборкаУпаковок.ЕдиницаИзмерения, ВыборкаУпаковок);
		//	СтруктураУпаковки.Владелец = СтруктураСсылки(ВыборкаУпаковок.Владелец, ВыборкаУпаковок);
		//	СтруктураУпаковки.Код = ВыборкаУпаковок.Код;
		//	СтруктураУпаковки.Наименование = ВыборкаУпаковок.Наименование;
		//	
		//	МассивУпаковок.Добавить(СтруктураУпаковки);
		//	
		//КонецЦикла; 
		
		Данные = Новый Структура();   
		Данные.Вставить("ВидЦены", МассивВидЦен);
		Данные.Вставить("МассивДанных", МассивДанных);
		Данные.Вставить("МассивУпаковок", МассивУпаковок);
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьШКНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат Данные;				
	
КонецФункции


Функция РезультатСверкиШтрихкодыНоменклатуры(ИмяЗапроса, ДанныеЗапроса, СоотвУпаковки, КоличествоВыборки)

	ТаблицаДанных = ТаблицаШтрихкодыНоменклатурыЯдра(ИмяЗапроса, ДанныеЗапроса.МассивДанных, СоотвУпаковки);
	
	Если ТаблицаДанных = Неопределено  Тогда
		Ошибка = "Не удалось получить таблицу данных цен в УТ";
		Возврат Ошибка;
	КонецЕсли; 
	
	РезультатЗапроса = РезультатЗапросаШтрихкодыНоменклатуры(ТаблицаДанных, ДанныеЗапроса, КоличествоВыборки);
	
	Возврат  РезультатЗапроса;
	
	
КонецФункции 


Функция ТаблицаШтрихкодыНоменклатурыЯдра(ИмяЗапроса, МассивДанных, СоотвУпаковки)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений;
		
		ТЗ.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
		ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		//ТЗ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
		МассивЕдИзм = Новый Массив;
		МассивЕдИзм.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
		МассивЕдИзм.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));

		ТЗ.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов(МассивЕдИзм));
		ТЗ.Колонки.Добавить("ИД_Упаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
		ЕстьОшибка = Ложь;
		
		Для каждого Стр Из МассивДанных Цикл
			
			//Стр.ЕдиницаИзмерения.ИмяТипаСсылки
			Номенклатура = оду_Общий.СсылкаПоСтруктуре(Стр.Номенклатура);
			
			Если Номенклатура = Неопределено Тогда
				//ЕстьОшибка = Истина;  
				//Ошибка = "Не удалось найти номенклатуру";
				//Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
				//оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
				Продолжить;
			КонецЕсли; 
			
			СтрХарактеристика = Стр.Характеристика;
			Если СтрХарактеристика.ИД = "00000000-0000-0000-0000-000000000000" ИЛИ СтрХарактеристика.ИД = "" Тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
			Иначе
				Характеристика = оду_Общий.СсылкаПоСтруктуре(Стр.Характеристика);
			КонецЕсли; 
			
			//Если Характеристика = Неопределено Тогда
			//	ЕстьОшибка = Истина;  
			//	Ошибка = "Не удалось найти Характеристику";
			//	Место = ИмяЗапроса + "_" + "ПолучитьТаблицуДанных"; 
			//	оду_Общий.ОтправитьСообщениеВТелеграмExchange(Место, Ошибка);	
			//КонецЕсли; 
			
			//СтрЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
			//Если СтрЕдиницаИзмерения.ИД = "00000000-0000-0000-0000-000000000000" ИЛИ СтрЕдиницаИзмерения.ИД = "" Тогда
				//ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();	
				ЕдиницаИзмерения = Неопределено;
			//Иначе
			//	ЕдиницаИзмерения = СоотвУпаковки.Получить(СтрЕдиницаИзмерения.ИД);
			//КонецЕсли; 
			
			Нстр = ТЗ.Добавить();
			Нстр.Штрихкод = Стр.Штрихкод;
			Нстр.Номенклатура = Номенклатура;
			Нстр.ЕдиницаИзмерения = ЕдиницаИзмерения;
			//Нстр.ИД_Упаковки = СтрЕдиницаИзмерения.ИД;
			Нстр.Характеристика = Характеристика;
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат ТЗ;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("СобратьАктуальныеЦеныНоменклатуры", Ошибка);	
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат  ТЗ;
	
КонецФункции

Функция ТекстЗапросаСверкиШКБезОтбора()
	Возврат
		"ВЫБРАТЬ
		|	ТЗ.Штрихкод КАК Штрихкод,
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.Характеристика КАК Характеристика,
		|	ТЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ.ИД_Упаковки КАК ИД_Упаковки
		|ПОМЕСТИТЬ ВТ_ДанныеУТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ШтрихкодыНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.Наименование ПОДОБНО ""%яяя%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		//|	ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВТ_Срез.Штрихкод КАК Штрихкод,
		|	ВТ_Срез.Номенклатура КАК Номенклатура,
		|	ВТ_Срез.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ВТ_Срез.ЕдиницаИзмерения КАК ЕдиницаИзмерения 
		//|	,Истина КАК Актуальность
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеУТ КАК ВТ_ДанныеУТ
		|		ПО ВТ_Срез.Номенклатура = ВТ_ДанныеУТ.Номенклатура
		|			И ВТ_Срез.Характеристика = ВТ_ДанныеУТ.Характеристика
		//|			И ВТ_Срез.ЕдиницаИзмерения = ВТ_ДанныеУТ.ЕдиницаИзмерения
		|			И ВТ_Срез.Штрихкод = ВТ_ДанныеУТ.Штрихкод
		|ГДЕ
		|	ВТ_ДанныеУТ.Штрихкод ЕСТЬ NULL";
КонецФункции

Функция ТекстЗапросаСверкиШКСОтбором()
	Возврат 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Актуальность КАК Актуальность,
		|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.ВалютаЦены КАК ВалютаЦены
		|ПОМЕСТИТЬ ВТ_ЦеныНачало
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ИСТИНА
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И НЕ Номенклатура.Наименование ПОДОБНО ""%яяя%""
		|				И ВидЦен В(&МассивВидЦен)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ИСТИНА
		|	И ЦеныНоменклатурыСрезПоследних.Цена > 0
		|	И ЦеныНоменклатурыСрезПоследних.Актуальность = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныНачало.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ОтборНоменклатуры
		|ИЗ
		|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка
		|ИЗ
		|	ВТ_ЦеныНачало КАК ВТ_ЦеныНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО ((ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК Справочник.Номенклатура)) = ВТ_ЦеныНачало.Номенклатура)
		|			И (НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования"")
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.Штрихкод КАК Штрихкод,
		|	ТЗ.Номенклатура КАК Номенклатура,
		|	ТЗ.Характеристика КАК Характеристика,
		|	ТЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТЗ.ИД_Упаковки КАК ИД_Упаковки
		|ПОМЕСТИТЬ ВТ_ДанныеУТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////  
		//|	ВЫБРАТЬ ПЕРВЫЕ 3
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ                                                              
		|	ВТ_ОтборНоменклатуры КАК ВТ_ОтборНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО ВТ_ОтборНоменклатуры.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура.ПометкаУдаления = ЛОЖЬ
		|	И ЕСТЬNULL(ШтрихкодыНоменклатуры.ЕдиницаИзмерения.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
		|	И НЕ ШтрихкодыНоменклатуры.Номенклатура.Наименование ПОДОБНО ""%яяя%""  
		|	И ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ НЕ NULL         
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ #КоличествоВыборки
		//|	ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВТ_Срез.Штрихкод КАК Штрихкод,
		|	ВТ_Срез.Номенклатура КАК Номенклатура,
		|	ВТ_Срез.Характеристика КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Партия,
		|	ВТ_Срез.ЕдиницаИзмерения КАК ЕдиницаИзмерения 
		//|	,Истина КАК Актуальность
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеУТ КАК ВТ_ДанныеУТ
		|		ПО ВТ_Срез.Номенклатура = ВТ_ДанныеУТ.Номенклатура
		|			И ВТ_Срез.Характеристика = ВТ_ДанныеУТ.Характеристика
		//|			И ВТ_Срез.ЕдиницаИзмерения = ВТ_ДанныеУТ.ЕдиницаИзмерения
		|			И ВТ_Срез.Штрихкод = ВТ_ДанныеУТ.Штрихкод
		|ГДЕ
		|	ВТ_ДанныеУТ.Штрихкод ЕСТЬ NULL";     
		
КонецФункции

Функция РезультатЗапросаШтрихкодыНоменклатуры(ТЗ, ДанныеЗапроса, КоличествоВыборки)
	
	МассивВидЦен = ОтборВидЦены(ДанныеЗапроса);	
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(МассивВидЦен) Тогда
		Запрос.Текст = ТекстЗапросаСверкиШКСОтбором();
		Запрос.УстановитьПараметр("МассивВидЦен", МассивВидЦен);
	Иначе
		Запрос.Текст = ТекстЗапросаСверкиШКБезОтбора(); 
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#КоличествоВыборки", КоличествоВыборки);     
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса; 
	
КонецФункции 

Функция ОтборВидЦены(ДанныеЗапроса)  
	
	Если ДанныеЗапроса.Свойство("ВидЦены") Тогда
		
		МассивВидЦен = Новый Массив;
		Для каждого Стр Из ДанныеЗапроса.ВидЦены Цикл    
			
			ВидЦены = пр_Общий.СсылкаПоТипXML("CatalogRef.ВидыЦен", Стр.РозничныйВидЦен);
			Если ЗначениеЗаполнено(ВидЦены) Тогда
				МассивВидЦен.Добавить(ВидЦены);
			КонецЕсли;		
			
		КонецЦикла;	
		
		Если МассивВидЦен.Количество() > 0 Тогда
			Возврат МассивВидЦен;	
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
	
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

#КонецОбласти
 


Функция ВыгрузитьСверку(РезультатЗапроса, СтруктураЗапроса, ТипОбъекта)
	
	//Сообщение = Новый СообщениеПользователю; 
	КолВыборки = РезультатЗапроса.Выгрузить().Количество();
	//Сообщение.Текст = СтрШаблон("Обработано: %1", КолВыборки);
	//Сообщение.Сообщить();
	
	ПодготовитьДанные = СтруктураЗапроса.ПодготовитьДанные;
	Если ПодготовитьДанные = Истина Тогда
		//Возврат РезультатЗапроса.Выгрузить();
		Возврат  КолВыборки;
	КонецЕсли; 
	
	ДанныеОбработкиОтвета = Неопределено;
	
	//ТипОбъекта = "ЦеныНоменклатуры";
	оду_ТипСсылки = СтрШаблон("InfoRg.%1", ТипОбъекта);
	//TODO:  доделать меняется местами ИД_Базы при записи в РС.оду_СостояниеПроизвольныхЗапросов
	Если СтруктураЗапроса.РежимОтладки = Истина Тогда
		ИДБазы = СтруктураЗапроса.ИДБазыИсточник;
	Иначе
		ИДБазы = СтруктураЗапроса.ИДБазыПриемник;
	КонецЕсли;
	
	УО = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", ИДБазы);
	ДанныеОбработкиОтвета = ВыгрузкаПроизвольныхЗаписейРСНаСервере(РезультатЗапроса, УО, ТипОбъекта, оду_ТипСсылки);
	Возврат КолВыборки;      
	
КонецФункции

Функция СтруктураСоответвийУпаковок(ИмяЗапроса, МассивУпаковок)
	
	Попытка
		
		// ИД, Ссылка
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ИД", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТЗ.Колонки.Добавить("Владелец");
		ТЗ.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150));
		ТЗ.Колонки.Добавить("Родитель", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		ТЗ.Колонки.Добавить("Код", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
		СоотвУпаковки = Новый Соответствие();
		ЕстьОшибка = Ложь;
		
		Для каждого Стр Из МассивУпаковок Цикл
			
			//Стр.ЕдиницаИзмерения.ИмяТипаСсылки
			ЕдиницаИзмеренияИД = Стр.ЕдиницаИзмерения.ИД;
			//ЕдиницаИзмерения = пр_Общий.СсылкаПоТипXML("CatalogRef.КлассификаторЕдиницИзмерения", ЕдиницаИзмеренияИД);
			ЕдиницаИзмерения = пр_Общий.СсылкаПоТипXML(Стр.ЕдиницаИзмерения.ИмяТипаСсылки, ЕдиницаИзмеренияИД);
			
			Если ЕдиницаИзмерения = Неопределено Тогда
				
				СтВладелец = Стр.Владелец;
				Если СтВладелец.ИД <> "00000000-0000-0000-0000-000000000000" И СтВладелец.ИД <> "" Тогда
					Владелец = оду_Общий.СсылкаПоСтруктуре(СтВладелец);
					//пр_Общий.СсылкаПоТипXML(Владелец.ИмяТипаСсылки, Владелец.ИД);
					Если Владелец = Неопределено   Тогда
						ЕстьОшибка = Истина;  
						Ошибка = "Не удалось найти владельца Упаковки";
						оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
					КонецЕсли; 
				Иначе
					Владелец = Неопределено;
				КонецЕсли;  
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЕдиницыИзмерения.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
					|ГДЕ  
					|	Истина
					//|	ЕдиницыИзмерения.Владелец = &Владелец
					|	И ЕдиницыИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код = &Код";
				
				Запрос.УстановитьПараметр("Владелец", Владелец);
				Запрос.УстановитьПараметр("Код", Стр.Код);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВДЗ = РезультатЗапроса.Выбрать();
				
				Если ВДЗ.Следующий() Тогда
					СоотвУпаковки.Вставить(ЕдиницаИзмеренияИД, ВДЗ.Ссылка);
					Продолжить;
				КонецЕсли; 
				
				
				
				Нстр = ТЗ.Добавить();
				Нстр.ИД = ЕдиницаИзмеренияИД;
				Нстр.Наименование = Стр.Наименование;
				Нстр.Владелец = Владелец;
				Нстр.Код = Стр.Код;
				
				//TODO:  доделать, когда не будет сопоставлений
				ЕстьОшибка = Истина;  
				Ошибка = "Доделать произвольный поиск упаковки";
				оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
				
			Иначе
				СоотвУпаковки.Вставить(ЕдиницаИзмеренияИД, ЕдиницаИзмерения);  	
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ЕстьОшибка = Истина Тогда
			Возврат Неопределено;
		Иначе
			Возврат СоотвУпаковки;
		КонецЕсли; 		
		
	Исключение
		Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(ИмяЗапроса, Ошибка);	
	КонецПопытки; 
	
КонецФункции 

Функция ВыгрузкаПроизвольныхЗаписейРСНаСервере(РезультатЗапроса, УО, ИДОбъекта, оду_ТипСсылки)
	
	//Выгрзку записей РС
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.Ссылка.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбменаСостав.Ссылка.РаспределятьПодчиненнымУО КАК РаспределятьПодчиненнымУО
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|ГДЕ
		|	оду_БазыУчастникиОбменаСостав.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Ссылка", УО);
	
	РЗ = Запрос.Выполнить();
	
	ВДЗ = РЗ.Выбрать();
	
	Если ВДЗ.Следующий() Тогда              
		ПараметрыКонвертации = оду_Общий.ПараметрыКонвертацииОбъекта();
		//ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена;          
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ.НастройкаКонвертацииОбмена); 
		ПараметрыКонвертации.Вставить("РаспределятьПодчиненнымУО", ВДЗ.РаспределятьПодчиненнымУО);
		ПараметрыКонвертации.Вставить("МассивУО", Неопределено);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	ИсходящиеДанные = Новый Структура("ЭтоУдалениеОбъекта", Ложь);
	оду_ДополнительныеСвойстваОбъекта = Новый Структура("ИсходящиеДанные", ИсходящиеДанные);	
	
	СоответвиеПараметровВыгрузки = Новый Соответствие();
	//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", ДанныеОбмена, ПереносТолькоСсылок));		
	
	//оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	//оду_СтруктураУО.ИДБазыИсточник = ИДБазыИсточник;
	//оду_СтруктураУО.ИДБазыПриемник = ИДБазыПриемник;
	
	СтруктураПараметров = Новый Структура(); 
	//СтруктураПараметров.Вставить("оду_СтруктураУО", ЗначениеВСтрокуВнутр(оду_СтруктураУО));
	СтруктураПараметров.Вставить("оду_МассивСсылок1С", РезультатЗапроса);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъекта", оду_ДополнительныеСвойстваОбъекта);
	
	СоответвиеПараметровВыгрузки.Вставить(оду_ТипСсылки, СтруктураПараметров);		
	
	//ИмяФайлаОбменаДалее = КонвертацияПутьКФайлуДанных;
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	ИмяБазыПриемника = пр_Общий.ДанныеИБПоСсылкам(УО, "Код", , "Структура").Код;
	ИмяФайлаОбмена = оду_Общий.ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника) + ".xml";
	
	ТаблицаСостоянийОбмена = оду_Общий.ТаблицаСостоянийОбмена();
	Стр = ТаблицаСостоянийОбмена.Добавить();
	Стр.ДатаВыгрузки = ТекущаяДатаСеанса();
	Стр.ИДБазыИсточник = НастройкиТекущейБД.ИДБазыИсточник;
	Стр.ИДБазыПриемник = пр_Общий.ДанныеИБПоСсылкам(УО, "ИДБазы", , "Структура").ИДБазы;
	Стр.ИДОбъекта = ИДОбъекта;
	Стр.ИмяФайлаОбмена = ИмяФайлаОбмена;
	Стр.КонфигурацияКонвертацииОбмена = оду_ОбщийПовтИсп.КонфигурацияКД2();
	Стр.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	//Стр.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
	
	Стр.ТипXMLОбъектаИсточника = оду_ТипСсылки;
	Стр.ТипXMLОбъектаПриемника = оду_ТипСсылки;
	//ЗаполнитьЗначенияСвойств(Стр, ЭтотОбъект); 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	СтрокаОтветаОбмена = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбмена, , ПараметрыКонвертации);
	
КонецФункции

Процедура ЗаполнитьПараметрыЗапроса(ПараметрыЗапроса, ТипЗапроса, КоличествоВыборки)
	
	Для каждого Стр Из ПараметрыЗапроса Цикл        
		
		Если Стр.ИмяПараметра = "ТипОбъекта" ИЛИ Стр.ИмяПараметра = "ТипЗапроса" Тогда
			//ТипОбъекта = Значение;
			//пр_Общий.СсылкаПоТипXML("CatalogRef.ИдентификаторыОбъектовМетаданных", Стр.Значение); 
			//пр_Общий.СсылкаПоТипXML(Стр.Тип, Стр.Значение); 
			ТипЗапроса = Стр.Значение;
		ИначеЕсли Стр.ИмяПараметра = "КоличествоВыборки" Тогда 
			
			КоличествоВыборки = Стр.Значение;
			Если КоличествоВыборки <> "" Тогда
				КоличествоВыборки = СтрШаблон("ПЕРВЫЕ %1", КоличествоВыборки);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;   
	
КонецПроцедуры


#Область  Служ

Функция СтруктураСсылки(Ссылка, ВДЗ = Неопределено, ПоляПоиска = "") Экспорт
	
	СтруктураСсылки = Новый Структура("ИмяТипаСсылки, ИД, ПоляПоиска", "","","");  
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат   СтруктураСсылки;
	КонецЕсли;
	СтруктураСсылки.ИмяТипаСсылки = пр_Общий.ИмяТипаXMLПоСсылке(Ссылка);
	СтруктураСсылки.ИД = XMLСтрока(Ссылка);
	
	Если ЗначениеЗаполнено(ПоляПоиска) и ЗначениеЗаполнено(ВДЗ)  Тогда
		СтруктураПолейПоиска = Новый Структура(ПоляПоиска);    
		ЗаполнитьЗначенияСвойств(СтруктураПолейПоиска, ВДЗ); 
		Для каждого КлючЗначение Из СтруктураПолейПоиска Цикл
			Значение = КлючЗначение.Значение;
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				Продолжить;	
			КонецЕсли; 
			Стр = Новый Структура("Тип, Значение");
			Стр.Вставить("Тип", пр_Общий.ИмяТипаXMLПоСсылке(Значение));    
			Стр.Вставить("Значение", пр_Общий.ИД_Ссылки(Значение));    
			//КлючЗначение.Значение = Стр;
			СтруктураПолейПоиска.Вставить(КлючЗначение.Ключ, Стр);
		КонецЦикла;  
		
		СтруктураСсылки.ПоляПоиска = СтруктураПолейПоиска;
	КонецЕсли; 
	
	Возврат   СтруктураСсылки;
	
КонецФункции 

#КонецОбласти

#Область  Алгоритмы  

Функция ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен()

	Возврат	
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УчастникОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбменаОрганизации.Организация, НЕОПРЕДЕЛЕНО) КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|		ПО (оду_БазыУчастникиОбменаОрганизации.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦеныСрез
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И ВидЦен В
		|					(ВЫБРАТЬ
		|						ВТ_ТекущиеДанные.ВидЦены КАК ВидЦены
		|					ИЗ
		|						ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК НоменклатураОснования,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦен,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТ_кеги
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|		ПО (ВТ_ЦеныСрез.Номенклатура = НоменклатураДополнительныеРеквизиты.Значение)
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования""
		|	И НоменклатураДополнительныеРеквизиты.Значение <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныСрез.Номенклатура КАК Номенклатура,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦен,
		|	ВТ_ЦеныСрез.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_кеги.Номенклатура,
		|	ВТ_кеги.ВидЦен,
		|	ВТ_кеги.Цена
		|ИЗ
		|	ВТ_кеги КАК ВТ_кеги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, ВТ_ЦеныСрез.Номенклатура) КАК Номенклатура,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура КАК НоменклатураБ,
		|	ВТ_ЦеныСрез.Номенклатура КАК НоменклатураСрез,
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, ВТ_ЦеныСрез.ВидЦен) КАК ВидЦены,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены КАК ВидЦеныБ,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦеныСрез,
		|	ВТ_ЦеныСрез.Цена ЕСТЬ NULL КАК Удалить
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_ЦеныСрез
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.аян_ОграничениеНоменклатурыПоВидуЦен КАК аян_ОграничениеНоменклатурыПоВидуЦен
		|		ПО ВТ_ЦеныСрез.Номенклатура = аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура
		|			И ВТ_ЦеныСрез.ВидЦен = аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены
		|ГДЕ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.Номенклатура, НЕОПРЕДЕЛЕНО)
		|	И ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО)";
	
КонецФункции 

Функция РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен(РежимОтладки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если РежимОтладки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	ОбъемТранзакции = 1000;
	
	ТекТранз = ОбъемТранзакции;
	Осч = 1;
	Сч = 1;
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Попытка
			
			Запись = РегистрыСведений.аян_ОграничениеНоменклатурыПоВидуЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Если ВДЗ.Удалить = Истина Тогда
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.Удалить();	
				КонецЕсли;
			Иначе	
				Запись.Записать();
			КонецЕсли;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
		
		Если Сч >= ТекТранз ИЛИ Осч = ВДЗ.Количество() Тогда //Последняя запись
			//Зафиксировать транзакцию
			ЗафиксироватьТранзакцию();
			
			Если Осч <> ВДЗ.Количество() Тогда //Если запись не последняя продолжаем
				ТекТранз = ОбъемТранзакции;
				Сч = 1;
				НачатьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		Осч = Осч + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецЕсли


