//TODO:  Список доработок:
// Выгрузка в файл, для теста и анализа, удаление, открытие папки
// Распростанение по УО их Файла - РаспределитьВыгрузкуИзПланаОбмена(Команда)
//



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьУниверсальныйОбмен = Истина И ЗначениеЗаполнено(УО)  Тогда
		ЗаполнитьПараметрыУчастниковОбмена();
		ЗаполнитьСвойстваФормыУО();	
	КонецЕсли; 
	
	Заполнитьоду_ДополнительныеСвойстваОбъекта();
	ЗаполнитьПараметрыИСвойстваФормы();
	
	//ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаРегистрация;  
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#Область  ОсновныеНастройки


&НаКлиенте
Процедура РежимОбменаПриИзменении(Элемент)
	Если РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка() Тогда
	 	ЭтаФорма.Элементы.ГруппаРежимОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузка;
	Иначе
	 	ЭтаФорма.Элементы.ГруппаРежимОбмена.ТекущаяСтраница = Элементы.СтраницаЗагрузка;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ВыгрузитьЧЗФайлПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Клиент.РезультатУстановкиКаталогаФайлаНачалоВыбора(ЭтаФорма, "ПутьКФайлуОбмена");//, , КаталогХраненияФайловОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОбменаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПутьКФайлуОбмена)  Тогда
		РезультатПодготовкиПутиКФайлу(ПутьКФайлуОбмена);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОбменаОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Конвертация_НастройкаИзПараметровПриИзменении(Элемент)
	ЗаполнитьСвойстваФормыУО();
КонецПроцедуры

#КонецОбласти


#Область  Конвертация

&НаКлиенте
Процедура КонвертацияПутьФайлуКонвертацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолноеИмяФайла = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора();
	Если ЗначениеЗаполнено(ПолноеИмяФайла)  Тогда
		КонвертацияПутьФайлуКонвертации = ПолноеИмяФайла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияПутьКФайлуДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолноеИмяФайла = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора();
	Если ЗначениеЗаполнено(ПолноеИмяФайла)  Тогда
		КонвертацияПутьКФайлуДанных = ПолноеИмяФайла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияПутьККаталогуДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Каталог = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора(Ложь);
	Если ЗначениеЗаполнено(Каталог)  Тогда
		КонвертацияПутьККаталогуДанных = Каталог; 
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура КонвертацияИспользоватьНастройкиКонвертацииПриИзменении(Элемент)
	Если КонвертацияИспользоватьНастройкиКонвертации = Истина Тогда
		КонвертацияИспользоватьОбработкуБСП = Ложь;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияИспользоватьОбработкуБСППриИзменении(Элемент)
	Если КонвертацияИспользоватьОбработкуБСП = Истина Тогда
		КонвертацияИспользоватьНастройкиКонвертации = Ложь;	
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура УОПриИзменении(Элемент)
	
	ЗаполнитьПараметрыУчастниковОбмена(); 
	
	ОтправитьВыбранныймУОПриИзменении("");
	ЗаполнитьПараметрыИСвойстваФормы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Объект1СОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	пр_Клиент.Объект1СОкончаниеВводаТекста(Объект1С, Текст, СтандартнаяОбработка);  
	Объект1СПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура Объект1СОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Объект1С = ОписаниеТипа.ПривестиЗначение();
	
КонецПроцедуры

&НаКлиенте
Процедура Объект1СПриИзменении(Элемент)  
	ЗаполнитьПараметрыИСвойстваФормы();
КонецПроцедуры  


&НаКлиенте
Процедура ИДОбъектаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ТипXMLОбъекта)  Тогда
		Объект1С = пр_Общий.СсылкаПоТипXML(ТипXMLОбъекта, ИДОбъекта);
		Объект1СПриИзменении("");
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ДанныеВыгрузкиТипОбъектаПриИзменении(Элемент)
	ЗаполнитьПараметрыИСвойстваФормы();
КонецПроцедуры


&НаКлиенте
Процедура ДанныеОбменаИзЗапросаПриИзменении(Элемент)
	ЗаполнитьПараметрыИСвойстваФормы();           
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьВыбранныймУОПриИзменении(Элемент)
	ЗаполнитьСвойстваФормыУО();	
КонецПроцедуры


&НаКлиенте
Процедура КаталогХраненияФайловОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	////пр_Клиент.РезультатУстановкиКаталогаФайлаНачалоВыбора(ЭтаФорма, "КаталогОбмена", Ложь);		
	//пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки + "\Модули\", "пр_Клиент", , , , ТекущийПользователь); 
	//Если пр_Модуль <> Неопределено Тогда
	//	пр_Модуль.РезультатУстановкиКаталогаФайлаНачалоВыбора(ЭтаФорма, "КаталогХраненияФайловОбработки", Ложь);	
	//КонецЕсли; 
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог хранения обработки"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогХраненияФайловОбработки = ДиалогОткрытия.Каталог; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияФайловОбработкиОткрытие(Элемент, СтандартнаяОбработка)
	
	пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки + "\Модули\", "пр_Клиент", , , , ТекущийПользователь); 
	Если пр_Модуль <> Неопределено Тогда
		пр_Модуль.ОткрытьПриложение(КаталогХраненияФайловОбработки, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры


#Область  Регистрация

&НаКлиенте
Процедура РегистрацияПутьКОбработкеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолноеИмяФайла = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора();
	Если ЗначениеЗаполнено(ПолноеИмяФайла)  Тогда
		РегистрацияПутьКОбработке = ПолноеИмяФайла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияИспользоватьОбработкуБСППриИзменении(Элемент)
	Если РегистрацияИспользоватьОбработкуБСП = Истина Тогда
		РегистрацияИспользоватьПравилоРегистрации = Ложь;	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияИспользоватьПравилоРегистрацииПриИзменении(Элемент)
	Если РегистрацияИспользоватьПравилоРегистрации = Истина Тогда
		РегистрацияИспользоватьОбработкуБСП = Ложь;	
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ВыборкаМассивомПриИзменении(Элемент)
	ЗаполнитьПараметрыИСвойстваФормы();
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ВыборкаДанных

&НаКлиенте
Процедура ВыборкаДанныхОбъектОбменаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекЭлемент = Элементы.ВыборкаДанных.ТекущиеДанные;
	
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	пр_Клиент.Объект1СОкончаниеВводаТекста(ТекЭлемент.ОбъектОбмена, Текст, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборкаДанныхОбъектОбменаОчистка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокУО


&НаКлиенте
Процедура СписокУОУОПриИзменении(Элемент) 
	
	ТекЭлемент = Элементы.СписокУО.ТекущиеДанные;
	
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекЭлемент.УО) Тогда
		ТекЭлемент.Выбрать = Истина;
		ТекЭлемент.НаименованиеУО = пр_Общий.ЗначенияРеквизитовОбъекта(ТекЭлемент.УО, "Наименование").Наименование;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормы_ВерсииПОД
 
//&НаКлиенте
//Процедура ВерсииПОДПутьКПОДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки + "\Модули\", "пр_Клиент", , , , ТекущийПользователь); 
//	//пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки, "пр_Клиент", , , , ТекущийПользователь); 
//	Если пр_Модуль <> Неопределено Тогда
//		пр_Модуль.РезультатУстановкиКаталогаФайлаНачалоВыбора(Элементы.Конвертация_Параметры.ТекущиеДанные, "ПутьКПОД");	
//	КонецЕсли; 
//КонецПроцедуры

//&НаКлиенте
//Процедура ВерсииПОДПутьКПОДОткрытие(Элемент, СтандартнаяОбработка)
//	// Вставить содержимое обработчика.
//КонецПроцедуры
&НаКлиенте
Процедура Конвертация_ПараметрыПутьКПОДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки + "\Модули\", "пр_Клиент", , , , ТекущийПользователь); 
	//пр_Модуль = ИсполняемыйМодульКаталогаКлиент(КаталогХраненияФайловОбработки, "пр_Клиент", , , , ТекущийПользователь); 
	Если пр_Модуль <> Неопределено Тогда
		ТекДанные = Элементы.Конвертация_Параметры.ТекущиеДанные;
		РезультатУстановкиКаталога = пр_Модуль.РезультатУстановкиКаталогаФайлаНачалоВыбора(ТекДанные, "ПутьКПОД");	
		ТекДанные.Используется 	= РезультатУстановкиКаталога;
		ТекДанные.ПОДИзФайла	= РезультатУстановкиКаталога;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Конвертация_ПараметрыПутьКПОДОткрытие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СброситьПовторноеИспользование(Команда)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#Область  Конвертация

&НаКлиенте
Процедура ПеренестиОбъект1С(Команда)
	РезультатОбмена = РезультатВыполненияОбмена();	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаИзЗапроса(Команда)
	
	Если  НЕ ЗначениеЗаполнено(ДанныеВыгрузкиТипОбъекта) Тогда     
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен тип объекта выгрузки";
		Сообщение.Поле = "ДанныеВыгрузкиТипОбъекта";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВыгрузкаИзЗапросаНаСервере();
	
КонецПроцедуры

 
&НаКлиенте
Процедура ВыгрузкаДанныхИзПланаОбмена(Команда)

	//TODO:  костыль
	Если НастройкиТекущейБД.БазаДанных <> УО И НастройкиТекущейБД.РаспределятьПодчиненнымУО = Истина Тогда
		УО = НастройкиТекущейБД.БазаДанных;
		УОПриИзменении("");
	КонецЕсли; 
	//НастройкиТекущейБД
	//УО = НАстро
	
	//РезультатВыполненияДанныхИзПланаОбмена();
	
	РезультатВыгрузкиИзПланаОбмена();
	
КонецПроцедуры

//TODO:  доработать
&НаКлиенте
Процедура РаспределитьВыгрузкуИзПланаОбмена(Команда)
	Резульатат = РезульататРаспределенияВыгрузкиИзПланаОбменаНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура РаспределитьПодчиненнымПоИмениФайла(Команда)
	РаспределитьПодчиненнымПоИмениФайлаНаСервере();
КонецПроцедуры

#КонецОбласти


#Область  Регистрация

&НаКлиенте
Процедура РегистрацияПоНастройкам(Команда)
	Если ВыборкаМассивом = Истина Тогда
		ЗарегистрироватьМассивОбъектов();	
	ИначеЕсли ЗначениеЗаполнено(Объект1С) Тогда 
		РегистрацияПоНастройкамНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияОбъекта(Команда)
	РегистрацияОбъектаНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВыполнитьМетод(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоНомеруСообщения(Команда)
	УдалитьПоНомеруСообщенияНаСервере();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ФормаСостоянийОбмена(Команда)
	
	//Путь = КаталогХраненияТекущейОбработки() + "\Модули\оду_УправлениеОбменом.epf";
	////Путь = "\\192.168.100.11\core-sync\Разработка1С\Модули\оду_УправлениеОбменом_Универсальный.epf"; 
	//пр_Клиент.ОткрытьФормуВнешнейОбработки(Путь, "ФормаСпискаСостоянийОбмена",,,,,,,,"оду_УправлениеОбменом");
	////пр_Клиент.ОткрытьИсполняемуюФорму("оду_УправлениеОбменом", "Форма",,,,,,,,,"оду_УправлениеОбменом");
	
	ОткрытьФорму("ВнешняяОбработка.оду_УправлениеОбменом.Форма.ФормаСпискаСостоянийОбмена");
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

#КонецОбласти




#Область  МожноНеИСпользовать

&НаСервере
Функция МассивУчастниковОбмена()
	
	//ОбъектОбмена = Источник.Ссылка;
	МассивОбъектовОбмена = Новый Массив;
	МассивОбъектовОбмена.Добавить(Объект1С);					  
	
	ПараметрыРегистрации = оду_Общий.ПараметрыРегистрацииУчастниковОбменаПоТипуОбъекта(МассивОбъектовОбмена, ТекущийПользователь, , УО);
	
	Если ПараметрыРегистрации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//TODO:  Оптимизировать по вопросу отбора организаций
	
	МассивУчастниковОбмена = ПараметрыРегистрации.МассивУчастниковОбмена;
	Возврат  МассивУчастниковОбмена;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьТаблицуСвойствОбъекта()
	
	МассивУчастниковОбмена = МассивУчастниковОбмена();
	
	Если МассивУчастниковОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		
		ИсточникРегистрации = Объект1С.ПолучитьОбъект();
		ИсточникРегистрации.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
		оду_ОбменДанными.РазрешенаРегистрацияОбъектаОбменаПоОтборуИзНастроек(ИсточникРегистрации, СтруктураНастроекОбмена);
		Если СтруктураНастроекОбмена.Свойство("ДополнительныеСвойстваОбъекта") = Ложь Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого КлючЗначение Из СтруктураНастроекОбмена.ДополнительныеСвойстваОбъекта Цикл
			Стр = ТаблицаСвойствОбъекта.Добавить();
			Стр.Имя = КлючЗначение.Ключ;
			Стр.Значение = КлючЗначение.Значение;
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти

#Область  Настройки

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = пр_НастройкиПовтИсп.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РежимОбмена)  Тогда
		РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	КонецЕсли;
	
	НастройкаФормыОтЗначенияИспользованияУниверсальногоОбмена();
	
КонецПроцедуры

&НаСервере
Процедура НастройкаФормыОтЗначенияИспользованияУниверсальногоОбмена()
	
	ИспользоватьУниверсальныйОбмен = оду_Общий.оду_ИспользоватьУниверсальныйОбмен();
	
	Элементы.СтраницаВариантВыгрузкиУО.Видимость = ИспользоватьУниверсальныйОбмен;
	
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьПараметрыУчастниковОбмена() 
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	ИДБазыИсточник = НастройкиТекущейБД.ИДБазыИсточник;
	
	СтруктураДанныхУО = пр_Общий.ДанныеИБПоСсылкам(УО, "ИДБазы, РаспределятьПодчиненнымУО, ПланОбмена", , "Структура");
	//ИДБазыПриемник = пр_Общий.ИД_Ссылки(УО); 
	//ИДБазыПриемник = пр_Общий.ДанныеИБПоСсылкам(УО, "ИДБазы", , "Структура").ИДБазы;   
	
	Если СтруктураДанныхУО <> Неопределено Тогда
		ИДБазыПриемник = СтруктураДанныхУО.ИДБазы; 
		УзелПланаОбмена = СтруктураДанныхУО.ПланОбмена;
		
		РаспределятьПодчиненнымУО = СтруктураДанныхУО.РаспределятьПодчиненнымУО; 
	ИНаче
		РаспределятьПодчиненнымУО = Ложь;	
	КонецЕсли; 
	
	Если РаспределятьПодчиненнымУО = Ложь Тогда
		ОтправитьВыбранныймУО = РаспределятьПодчиненнымУО;
	КонецЕсли;
	
	Элементы.ОтправитьВыбранныймУО.Доступность = РаспределятьПодчиненнымУО;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСвойстваФормыУО()
	
	Элементы.ГруппаЗапросУО.Доступность = ОтправитьВыбранныймУО;
	
	Если ОтправитьВыбранныймУО = Истина Тогда
		Элементы.ГруппаЗапросУО.Показать();	
	Иначе 	
		Элементы.ГруппаЗапросУО.Скрыть();	
	КонецЕсли;	
	
	Элементы.ГруппаВыгрузкаПараметрыКонвертации.Доступность = Конвертация_НастройкаИзПараметров;
	
	Если Конвертация_НастройкаИзПараметров = Истина Тогда
		Элементы.ГруппаВыгрузкаПараметрыКонвертации.Показать();	
	Иначе 	
		Элементы.ГруппаВыгрузкаПараметрыКонвертации.Скрыть();	
	КонецЕсли;	
	
КонецПроцедуры


//TODO:  Переделать
&НаСервере
Процедура Заполнитьоду_ДополнительныеСвойстваОбъекта()      
	                 
	ДополнительныеСвойстваОбъекта = "";
	ЗаполнитьПараметрДополнительногоСвойства("оду_ЭтоНовыйОбъект", Истина);
	ЗаполнитьПараметрДополнительногоСвойства("оду_НеРаспределятьПодчиненнымУО", Истина);
	ЗаполнитьПараметрДополнительногоСвойства("оду_ЗапросСсылки", Истина);
	//ЗаполнитьПараметрДополнительногоСвойства("аян_ЭтоНоменклатураКега", Истина);
	ЗаполнитьПараметрДополнительногоСвойства("оду_ЭтоНоменклатураКега", Истина);

	ДополнительныеСвойстваОбъектаЗначение = СтрукутраДополнительныхСвойствОбъекта();
	
	Если ДополнительныеСвойстваОбъектаЗначение <> Неопределено Тогда
		ДополнительныеСвойстваОбъекта = ЗначениеВСтрокуВнутр(ДополнительныеСвойстваОбъектаЗначение); //Структура параметров	
		Возврат;
	КонецЕсли; 
	

//	ДополнительныеСвойстваОбъектаЗначение = ?(ТаблицаСвойствОбъекта.Количество() > 0, Новый Структура(), "" );
//	
//	Если ДополнительныеСвойстваОбъектаЗначение = "" Тогда
//		ДополнительныеСвойстваОбъекта = ДополнительныеСвойстваОбъектаЗначение;
//		Возврат;
//	КонецЕсли; 
		
КонецПроцедуры

Функция СтрукутраДополнительныхСвойствОбъекта()
	
	МассивВыбранныхПараметров = ТаблицаСвойствОбъекта.НайтиСтроки(Новый Структура("Выбрать", Истина)); 
	Если МассивВыбранныхПараметров.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ДополнительныеСвойстваОбъектаЗначение = Новый Структура();
	
	Для каждого Стр Из МассивВыбранныхПараметров Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		ДополнительныеСвойстваОбъектаЗначение.Вставить(Стр.Имя, Стр.Значение);		
	КонецЦикла; 
	
	Возврат ДополнительныеСвойстваОбъектаЗначение;
	
КонецФункции 


&НаСервере
Процедура ЗаполнитьПараметрДополнительногоСвойства(ИмяСвойства, ЗначениеСвойства)
	Нстр = ТаблицаСвойствОбъекта.НайтиСтроки(Новый Структура("Имя", ИмяСвойства));
	Если Нстр.Количество() = 0  Тогда
		Стр = ТаблицаСвойствОбъекта.Добавить();
		Стр.Выбрать = Ложь;
		//Стр.Выбрать = Истина;
		Стр.Имя = ИмяСвойства;
		Стр.Значение = ЗначениеСвойства;
	КонецЕсли;
КонецПроцедуры
 

&НаКлиенте
Процедура ЗаполнитьПараметрыИСвойстваФормы()
	УстановитьСвойстваФормыПоДаннымНастройкам();
	ЗаполнитьПараметрыВыбранногоОбъекта();
КонецПроцедуры
 

&НаКлиенте
Процедура УстановитьСвойстваФормыПоДаннымНастройкам()
	
	Если ДанныеОбменаИзЗапроса = Истина Тогда
		Элементы.ГруппаДанныеЗапросом.Показать();
	Иначе
		Элементы.ГруппаДанныеЗапросом.Скрыть();
	КонецЕсли;	
	
	Элементы.ГруппаДанныеЗапросом.Доступность = ДанныеОбменаИзЗапроса;   
	Элементы.ГруппаОдиночныйОбъект.Доступность = НЕ ДанныеОбменаИзЗапроса; 
	
	Если ВыгрузитьЧЗФайл = Истина И НЕ ЗначениеЗаполнено(КаталогХраненияФайловОбработки)  Тогда
		КаталогХраненияФайловОбработки = КаталогХраненияТекущейОбработки();		
	КонецЕсли; 
	
	Элементы.ГруппаМассивОбъектовОбмена.Видимость = ВыборкаМассивом;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьПараметрыВыбранногоОбъекта()
	
	Если ДанныеОбменаИзЗапроса = Истина Тогда
		ВыбранныйОбъект = ДанныеВыгрузкиТипОбъекта;
	Иначе
		ВыбранныйОбъект = Объект1С;    
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйОбъект)  Тогда
		ТипXMLОбъекта = ""; 
		ИмяПКО = "";
		ИДОбъекта = "";
		Возврат;
	КонецЕсли; 
	
	ТипXMLОбъекта = ТипXMLОбъекта(ВыбранныйОбъект); 
	ИмяПКО = СтрРазделить(ТипXMLОбъекта, ".")[1];
	
	//TODO:  Проверить
	Если ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ИДОбъекта = ТипXMLОбъекта;
	Иначе
		ИДОбъекта = пр_Общий.ИД_Ссылки(ВыбранныйОбъект);
	КонецЕсли;   
	
КонецПроцедуры


#КонецОбласти
 

#Область  УдалениеОбъекта

&НаКлиенте
Процедура УдалитьОбъект(Команда)
	Оповещение = Новый ОписаниеОповещения("УдалитьОбъектПослеВопроса", ЭтаФорма);
	ТекстВопроса = "Удалить объект полностью ?";

	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъектПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	УдалитьОбъектНаСервере(Результат = КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбъектНаСервере(УдалитьПолностью = Ложь)
	
	//МассивНаУдаление = Новый Массив;
	//МассивНаУдаление.Добавить(Объект1С.Ссылка);
	//УстановитьМонопольныйРежим(
	//УдалитьОбъекты(МассивНаУдаление, Истина);
	
	Объект1сОбъект = Объект1С.Ссылка.ПолучитьОбъект();
	Если УдалитьПолностью = Истина Тогда
		Объект1сОбъект.Удалить(); //непосредственное удаление
	Иначе	
		Объект1сОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
 

#Область  Регистрация

//ОбъектРС = РегистрыСведений.оду_РегистрацияОбъектовОбмена
Функция СтруктураПоОбъектуРС(ОбъектРС)  Экспорт
	
	КолонкиТЗ = ОбъектРС.СоздатьНаборЗаписей().ВыгрузитьКолонки().Колонки;
	СтруктураПоОбъекту = Новый Структура(); 
	Для каждого Стр Из КолонкиТЗ Цикл
		СтруктураПоОбъекту.Вставить(Стр.Имя);
	КонецЦикла; 
	Возврат СтруктураПоОбъекту;
	
КонецФункции 


Процедура РегистрацияПоНастройкамНаСервере()
	
	СтруктураНастроекОбмена = СтруктураПоОбъектуРС(РегистрыСведений.оду_РегистрацияОбъектовОбмена);
	СоответсвиеПоТипуОбъектаПриемника = Новый Соответствие;
	
	РегистрацияПоНастройкамНаСервереДалее(СтруктураНастроекОбмена, СоответсвиеПоТипуОбъектаПриемника, Объект1С, ТипXMLОбъекта);
	
КонецПроцедуры

Функция ЗарегистрироватьМассивОбъектов()
	
	МассивВыбранных = ВыборкаДанных.НайтиСтроки(Новый Структура("Выбрать", Истина)); 
	Если МассивВыбранных.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	СтруктураНастроекОбменаОбщ = СтруктураПоОбъектуРС(РегистрыСведений.оду_РегистрацияОбъектовОбмена);
	СоответсвиеПоТипуОбъектаПриемника = Новый Соответствие;
	
	Для каждого Эл Из МассивВыбранных Цикл
		СтруктураНастроекОбмена = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураНастроекОбменаОбщ));
		ТипXMLОбъектаИсточника = пр_Общий.ИмяТипаXMLПоСсылке(Эл.ОбъектОбмена);
		РегистрацияПоНастройкамНаСервереДалее(СтруктураНастроекОбмена, СоответсвиеПоТипуОбъектаПриемника, Эл.ОбъектОбмена, ТипXMLОбъектаИсточника);
	КонецЦикла; 
	
КонецФункции 	

Процедура РегистрацияПоНастройкамНаСервереДалее(СтруктураНастроекОбмена, СоответсвиеПоТипуОбъектаПриемника, ОбъектОбмена, ТипXMLОбъектаИсточника)
	
	
	ЗаполнитьСтруктурыДопДаннымиДалее(СтруктураНастроекОбмена, ОбъектОбмена, ТекущийПользователь);
	
	СтруктураНастроекОбмена.ИДБазыПриемник = ИДБазыПриемник;
	СтруктураНастроекОбмена.ТипXMLОбъектаИсточника = ТипXMLОбъектаИсточника;
	
	
	////TODO:  Пока костыль, нужен запрос + Приоритет объекта. МетаданныеНаименование
	//СтруктураНастроекОбмена.ТипXMLОбъектаПриемника = ТипXMLОбъекта;
	
	СтруктураПараметровОбъектаПриемника = СоответсвиеПоТипуОбъектаПриемника.Получить(ТипXMLОбъектаИсточника);
	Если СтруктураПараметровОбъектаПриемника = Неопределено Тогда
		СтруктураПараметровОбъектаПриемника = СоответсвиеПоТипуОбъектаПриемника(СоответсвиеПоТипуОбъектаПриемника, ТипXMLОбъектаИсточника)
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, СтруктураПараметровОбъектаПриемника); 
	
	//Если СтрукутраДополнительныхСвойствОбъекта <> Неопределено Тогда
		СтруктураНастроекОбмена.Вставить("ДополнительныеСвойстваОбъекта", ДополнительныеСвойстваОбъекта);
	//КонецЕсли; 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	РезультатРегистрацииОбъектаОбмена = пр_Модуль.РезультатРегистрацииОбъектаОбмена(СтруктураНастроекОбмена);
	//Сообщить("" + РезультатРегистрацииОбъектаОбмена);

КонецПроцедуры

Функция СтруктураПараметровОбъектаПриемника(ТипXMLОбъектаИсточника)
	
	СтруктураПараметровОбъектаПриемника = Новый Структура("ТипXMLОбъектаПриемника, ПриоритетОбъекта", ТипXMLОбъектаИсточника, 0); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_БазыУчастникиОбменаСостав.НомерСтроки КАК ПриоритетОбъекта
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|ГДЕ
		|	ИСТИНА
		//|	И оду_БазыУчастникиОбменаСостав.Ссылка.ТекущаяБД = ИСТИНА
		|	И оду_БазыУчастникиОбменаСостав.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника
		|	И оду_БазыУчастникиОбменаСостав.Ссылка.Ссылка = &СсылкаУО";
		
	Запрос.УстановитьПараметр("СсылкаУО", УО);
	Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъектаИсточника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметровОбъектаПриемника, ВДЗ);
	КонецЕсли; 
	Возврат   СтруктураПараметровОбъектаПриемника;
	
КонецФункции 

Функция СоответсвиеПоТипуОбъектаПриемника(СоответсвиеПоТипу, ТипXMLОбъектаИсточника)
	
	СтруктураПараметровОбъектаПриемника = СтруктураПараметровОбъектаПриемника(ТипXMLОбъектаИсточника); 
	
	СоответсвиеПоТипу.Вставить(ТипXMLОбъектаИсточника, СтруктураПараметровОбъектаПриемника);
	
	Возврат  СтруктураПараметровОбъектаПриемника;
	
КонецФункции 

&НаСервере
Процедура ЗаполнитьПараметрыПриеменика()
	
КонецПроцедуры
 

//ПриоритетОбмена //Самолет = 10, Изменение = 50
Процедура ЗаполнитьСтруктурыДопДанными(МассивУчастниковОбмена, ОбъектОбмена = Неопределено, ТекущийПользователь, ПриоритетОбмена = 50, РежимЗаписи = Неопределено, РежимПроведения = Неопределено)
	
	ДатаРегистрации = Неопределено;
	
	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
		ЗаполнитьСтруктурыДопДаннымиДалее(СтруктураНастроекОбмена, ОбъектОбмена = Неопределено, ТекущийПользователь, ПриоритетОбмена = 50, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, ДатаРегистрации)
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктурыДопДаннымиДалее(СтруктураНастроекОбмена, ОбъектОбмена = Неопределено, ТекущийПользователь, ПриоритетОбмена = 50, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, ДатаРегистрации = Неопределено )  Экспорт
	
	Если ДатаРегистрации = Неопределено Тогда
		ДатаРегистрации = ?(ПриоритетОбмена = 10, Дата(1,1,1), ТекущаяДатаСеанса());
	КонецЕсли; 
	
	Если  ОбъектОбмена <> Неопределено Тогда
		СтруктураНастроекОбмена.Вставить("ОбъектОбмена", ОбъектОбмена);
		СтруктураНастроекОбмена.Вставить("ИДОбъекта", XMLСтрока(СтруктураНастроекОбмена.ОбъектОбмена));
	КонецЕсли;
	
	СтруктураНастроекОбмена.Вставить("ПриоритетОбмена", ПриоритетОбмена); 
	СтруктураНастроекОбмена.Вставить("ПриоритетДопПризнака", 0);
	СтруктураНастроекОбмена.Вставить("ДатаРегистрации", ДатаРегистрации);
	СтруктураНастроекОбмена.Вставить("Пользователь", ТекущийПользователь);
	СтруктураНастроекОбмена.Вставить("РежимЗаписи", РежимЗаписи);
	СтруктураНастроекОбмена.Вставить("РежимПроведения", РежимПроведения);
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	
КонецПроцедуры



Процедура РегистрацияОбъектаНаСервере()
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
	пр_Модуль.ЗарегистрироватьИзменениеОбъектаОбмена(Объект1С, Ложь);	
	
	//Текст = "*оду. Не удалось зарегистрировать объект обмена";
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = Текст;
	//Сообщение.Сообщить(); 
	////СтруктураНастроекОбмена.Отказ = Истина;	
	//пр_Модуль.ОтправитьСообщениеВТелеграмExchange("оду_Общий.ЗарегистрироватьИзменениеОбъектаОбмена", , Текст, "СтруктураНастроекОбмена.БазаПриемник", , , "СтруктураНастроекОбмена");	

КонецПроцедуры

Процедура УдалитьПоНомеруСообщенияНаСервере()
	
	//Если НЕ ЗначениеЗаполнено(УчастникОбмена)  Тогда
	Если НЕ ЗначениеЗаполнено(НомерСообщенияОбмена) и НЕ ЗначениеЗаполнено(УО) Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.ПланОбмена КАК оду_УзелПланаОбмена
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
		|	И оду_БазыУчастникиОбмена.ИДБазы = &ИДБазы";
	
	Запрос.УстановитьПараметр("ИДБазы", УО.ИДБазы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаУзла = РезультатЗапроса.Выбрать();
	
	Если ВыборкаУзла.Следующий() Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзла.оду_УзелПланаОбмена, НомерСообщенияОбмена);		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область  Конвертация

//TODO:  Решить что делать с доп свойствами
&НаСервере
Процедура Объект1СПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект1С)  Тогда
		//задать вопрос перед очисткой
		ТаблицаСвойствОбъекта.Очистить();
		ЗаполнитьТаблицуСвойствОбъекта();
	КонецЕсли; 
	
	//Если ЗначениеЗаполнено(Объект1С)  Тогда
	//	ВыборкаДанных.Очистить();
	//	Нстр = ВыборкаДанных.Добавить();
	//	Нстр.Выбрать = Истина;
	//	Нстр.ОбъектОбмена = Объект1С;
	//	//Объект1СПриИзмененииНаСервере();
	//КонецЕсли; 
	
	
КонецПроцедуры



#Область  ДанныеОбмена

&НаКлиенте
Процедура ПрочитатьОбъект(Команда)
	//ПрочитатьОбъектНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МетодыОбмена_ВыгрузкаДанных(Команда)
	МетодыОбмена_ВыгрузкаДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура МетодыОбмена_ВыгрузкаДанныхНаСервере()
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь);
	НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	
	//ИДБазыПриемник = пр_Общий.ЗначениеРеквизитаПоСсылке(УО, "ИДБазы");
	//
	//Если ИДБазыПриемник = Неопределено Тогда
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "*оду. Не удалось получить ИД УО";
	//	Сообщение.Сообщить(); 
	//	Возврат;			
	//		
	//КонецЕсли; 
	
	//ПараметрыПодключения = Модуль.ДанныеОбУчастникахОбмена(НастройкиТекущейБД, УО);
	
	//Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	
	//ИмяФайлаОбмена = Модуль_ОбменУниверсальный.ИмяФайлаОбмена(НастройкиТекущейБД, ПараметрыПодключения.ИмяБазыПриемника);
	//РезультатВыгрузкиДанных = Модуль_ОбменУниверсальный.ВыгрузкаДанных(ПараметрыПодключения, НастройкиТекущейБД, ИмяФайлаОбмена);
	
	Модуль_ОбменУниверсальный = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	РезультатВыгрузкиДанных = Модуль_ОбменУниверсальный.ВыполнитьВыгрузкуДанных(НастройкиТекущейБД, , УО);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодыОбмена_ЗагрузкаДанных(Команда)
	МетодыОбмена_ЗагрузкаДанныхНаСервере();
КонецПроцедуры

&НаСервере
Процедура МетодыОбмена_ЗагрузкаДанныхНаСервере()
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь);
	НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
	
	Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	Модуль_ОбменУниверсальный.ВыполнитьЗагрузкуДанных(НастройкиТекущейБД);
	
КонецПроцедуры

&НаКлиенте
Процедура МетодыОбмена_ЗапросСсылки(Команда)
	МетодыОбмена_ЗапросСсылкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура МетодыОбмена_ЗапросСсылкиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ОписаниеОшибки КАК ОписаниеОшибки,
		|	оду_СостояниеОбъектовОбмена.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.РежимОбмена = &РежимОбмена";
	
	Запрос.УстановитьПараметр("РежимОбмена", оду_ОбщийПовтИсп.РежимЗапросСсылки());
	
	РЗ = Запрос.Выполнить();
	МассивДанныхЗапросаСсылки = пр_Общий.МассивСтруктурПоЗапросу(РЗ);
	МассивЗагруженныхФайловОбмена = Неопределено;
	
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	Если пр_Модуль = Неопределено Тогда
		пр_Модуль = оду_ОбщийПовтИсп;
	КонецЕсли; 
	
	//ВыборкаУО = пр_Модуль.НастройкиУчастникаОбмена(УО);
	ПараметрыПодключения = пр_Модуль.ПараметрыПодключенияПоСсылкеУО(УО); 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
	Если пр_Модуль = Неопределено Тогда
		пр_Модуль = оду_Общий;
	КонецЕсли; 
	
	СтруктураОтвета = пр_Модуль.СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, , "ping");
	Если НЕ ЗначениеЗаполнено(СтруктураОтвета)  Тогда
		Возврат;			
	КонецЕсли; 
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	//03.2 Обмен состояниями
	//03.3 Обновление, изменение состояний
	СтруктураЗапроса = Новый Структура("МассивЗагруженныхФайловОбмена, МассивДанныхЗапросаСсылки", МассивЗагруженныхФайловОбмена, МассивДанныхЗапросаСсылки); 
	РезультатОбновления = пр_Модуль.ОбновитьСостоянияОбменаПоИмениФайла(ПараметрыПодключения, НастройкиТекущейБД, СтруктураЗапроса, Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура МетодыОбмена_РегламентОбмена(Команда)
	//Если НЕ ЗначениеЗаполнено(СекундомерНачало)  Тогда
		СекундомерНачало = ТекущаяДата();
	//КонецЕсли; 
	//ЗапуститьРегламет();
	ЗапускатьОбработчикОжидания = РегламенОбмена();
	Если ЗапускатьОбработчикОжидания = Истина Тогда
		ПодключитьОбработчикОжидания("ЗапуститьРегламет", 0.1, Истина);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьРегламет()
	
	Если ЗначениеЗаполнено(РегламентШагПовтора)  Тогда
		ЗапускатьОбработчикОжидания = РегламенОбмена();
		Если ЗапускатьОбработчикОжидания = Истина Тогда
			ПодключитьОбработчикОжидания("ЗапуститьРегламет", РегламентШагПовтора, Истина);
			//Если ЗначениеЗаполнено(РасписаниеРегламентаПЛанОбмена)  Тогда
			//	//ПодключитьОбработчикОжидания("ЗапуститьРегламетПланОбмена", РасписаниеРегламентаПЛанОбмена, Истина);
			//КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	оду_Общий.ЗапуститьВыполнениеОтложенногоПроведения();
	
КонецФункции 


&НаКлиенте
Функция ЗапуститьРегламетПланОбмена() Экспорт
	//ВыгрузкаДанныхИзПланаОбменаНаСервере();
	//ПодключитьОбработчикОжидания("ЗапуститьРегламетПланОбмена", РасписаниеРегламентаПЛанОбмена, Истина);
КонецФункции 

&НаСервере
Функция РегламенОбмена()
	
	Если РегламентПостоянно = Ложь Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта
		|ПОМЕСТИТЬ ВТ_данные
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_данные.ИДОбъекта КАК ИДОбъекта
		|ИЗ
		|	ВТ_данные КАК ВТ_данные";
		
		РЗ = Запрос.Выполнить();
		
		Если РЗ.Пустой() Тогда
			СекундомерКонец = ТекущаяДата();
			Сообщить(СтрШаблон("Результат = %1 сек. Начало: %2 Конец: %3", СекундомерКонец - СекундомерНачало, СекундомерНачало, СекундомерКонец));
			Возврат Ложь;
		КонецЕсли; 	
	КонецЕсли; 
	
	//ВыгрузкаДанныхИзПланаОбменаНаСервере();
	
	//оду_Общий.ВыполнитьОбменВФоне();
	
	Возврат Истина
	
КонецФункции 

&НаКлиенте
Процедура РегистрацияТестРеализации(Команда)
	СекундомерНачало = ТекущаяДата();
	РегистрацияТестРеализацииНаСервере();
	СекундомерКонец = ТекущаяДата();
	Сообщить(СтрШаблон("Результат = %1 сек. Начало: %2 Конец: %3", СекундомерКонец - СекундомерНачало, СекундомерНачало, СекундомерКонец));
КонецПроцедуры

&НаСервере
Процедура РегистрацияТестРеализацииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ #ПЕРВЫЕ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) КАК Дата
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Проведен = ИСТИНА
		|	И НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = &НачалоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслуг.Ссылка,
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период.ДатаНачала));
	
	ВыборПервые = "";
	Если ЗначениеЗаполнено(РегистрацияКолОбъектов)  Тогда
		ВыборПервые = "ПЕРВЫЕ " + Формат(РегистрацияКолОбъектов, "ЧГ=0");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПЕРВЫЕ", ВыборПервые);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		оду_Общий.ЗарегистрироватьИзменениеОбъектаОбмена(ВДЗ.Ссылка, Ложь);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестУдалитьЗаписи(Команда)
	ТестУдалитьЗаписиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТестУдалитьЗаписиНаСервере()
	
	Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
	Модуль.РезультатВыполненияОтложенногоПроведения(Истина);
	//оду_Общий.ЗапуститьВыполнениеОтложенногоПроведения(Истина);

	Возврат;
	
	//Ниже работает
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоОбъектовВПроведении = 10; //TODO: Кастомизировать
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	КоличествоПопытокПриОшибке = НастройкиТекущейБД.КоличествоПопытокПриОшибке;
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = Модуль.ТекстЗапросаОтложенногоПроведения(КоличествоОбъектовВПроведении);
	
	Запрос.УстановитьПараметр("КоличествоПопытокПриОшибке", КоличествоПопытокПриОшибке);
	Запрос.УстановитьПараметр("СостояниеОтложенноеПроведение", оду_ОбщийПовтИсп.СостояниеОтложенноеПроведение());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	МассивСтруктур = пр_Общий.МассивСтруктурПоЗапросу(РезультатЗапроса);
	
	//Удаление состояний и ошибок
	Модуль.РезультатЗаписиСостоянияОбменаИзМассива(МассивСтруктур, Истина);
	Модуль.ЗаписатьОшибкиОбменаИзМассива(МассивСтруктур, Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентОтложеногоПроведения(Команда)
	РегламентОтложеногоПроведенияНаСервере();
КонецПроцедуры

Процедура РегламентОтложеногоПроведенияНаСервере()
	оду_Общий.ЗапуститьВыполнениеОтложенногоПроведения(Истина);
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьРегистрациюДокументов(Команда)
	ОчиститьРегистрациюДокументовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчиститьРегистрациюДокументовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_РегистрацияОбъектовОбмена.ОбъектОбмена КАК ОбъектОбмена,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_РегистрацияОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_РегистрацияОбъектовОбмена.МетаданныеНаименование КАК МетаданныеНаименование,
		|	оду_РегистрацияОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_РегистрацияОбъектовОбмена.Пользователь КАК Пользователь,
		|	оду_РегистрацияОбъектовОбмена.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта,
		|	оду_РегистрацияОбъектовОбмена.ЭтоУдалениеОбъекта КАК ЭтоУдалениеОбъекта
		|ИЗ
		|	РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
		|ГДЕ
		|	оду_РегистрацияОбъектовОбмена.МетаданныеНаименование = ""Документы""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() Цикл
		Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, ВДЗ); 
		Запись.Удалить();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();


КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствОбъектаПриИзменении(Элемент)
	Заполнитьоду_ДополнительныеСвойстваОбъекта();
КонецПроцедуры


#Область  ЕслиКонфигурацииСовпадают

//&НаСервере
//Процедура ПеренестиОбъект1СНаСервере()
//	
//	ОбъектНаОтпарвку = Объект1С.ПолучитьОбъект();
//	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	//ПолныйПутьКОбъекту1с = КонвертацияПутьККаталогуДанных + "\" + ОбъектНаОтпарвку.Метаданные().Имя + ".json";
//	ПолныйПутьКОбъекту1с = КонвертацияПутьККаталогуДанных + "\Объект1С.json";
//	ЗаписьJSON.ОткрытьФайл(ПолныйПутьКОбъекту1с);
//	
//	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектНаОтпарвку, НазначениеТипаXML.Явное);
//	
//	ЗаписьJSON.Закрыть();
//	
//КонецПроцедуры


//&НаСервере
//Процедура ПрочитатьОбъектНаСервере()
//	ЧтениеJSON = Новый ЧтениеJSON;
//	ПолныйПутьКОбъекту1с = КонвертацияПутьККаталогуДанных + "\Объект1С.json";
//	ЧтениеJSON.ОткрытьФайл(ПолныйПутьКОбъекту1с);
//	
//	ОбъектПолученный = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
//	ОбъектПолученный.ОбменДанными.Загрузка = Истина;
//	
//	Попытка
//	
//		ОбъектПолученный.Записать();
//		Объект1С = ОбъектПолученный.Ссылка;
//	
//	Исключение
//		Сообщение = Новый СообщениеПользователю;
//		Сообщение.Текст = ОписаниеОшибки();
//		Сообщение.Сообщить(); 
//	КонецПопытки; 
//	
//	
//КонецПроцедуры

#КонецОбласти
 

#КонецОбласти


#Область  ПланОбмена    

&НаСервере
Функция РезультатВыгрузкиИзПланаОбмена()
	
	Попытка
		
		//оду_УзелПланаОбмена = ПараметрыЗапроса.оду_УзелПланаОбмена;
		
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелПланаОбмена);
		НомерСообщения = ЗаписьСообщения.НомерСообщения;
		
		ВДЗ = ПланыОбмена.ВыбратьИзменения(УзелПланаОбмена, НомерСообщения);//, ФильтрОбмена);
		
		Данные = Новый Массив;
		
		Если ВДЗ.Следующий() Тогда
			Зареганые = ВДЗ.Получить();
			Данные.Добавить(Зареганые);
		КонецЕсли; 
		
		ЗаписьСообщения.ЗакончитьЗапись();
		ЗаписьXML.Закрыть();
		
		Если Данные.Количество() = 0 Тогда 
			Возврат Неопределено;	
		КонецЕсли;
		
		//ИмяФайлаЗапроса = СтрШаблон("%1\UOD_%2.xml", ПараметрыЗапроса.ПолныйПутьККаталогу, НомерСообщения);
		
		Тек_ТипXMLОбъекта = пр_Общий.ИмяТипаXMLПоСсылке(УзелПланаОбмена);
		
		//Тек_ИДОбъекта 	= СтрШаблон("UOD_%1_%2", НомерСообщения, Тек_ТипXMLОбъекта);
		Тек_ИДОбъекта 	= СтрШаблон("UOD_%1", НомерСообщения);
		
		ИмяПВД = "ВыгрузкаДанныхИзПланаОбмена";
		
		РезультатВыгрузки = РезультатВыполненияОбменаНаСерере(, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, , ИмяПВД, НомерСообщения);
		Возврат РезультатВыгрузки;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезультатВыгрузкиИзПланаОбмена", , пр_Ошибка,,,, );
	КонецПопытки;
	
КонецФункции 

#Область  Было_Удалить

Функция РезультатВыполненияДанныхИзПланаОбмена() Экспорт
	
	
	пр_МодульПов = пр_Общий.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	НастройкиТекущейБД = пр_МодульПов.НастройкиТекущейБД();
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	оду_БазыУчастникиОбмена.ПланОбмена КАК оду_УзелПланаОбмена,
		|	&ИДОбъекта КАК ИДОбъекта,
		|	&ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазыПриемник,
		|	оду_БазыУчастникиОбмена.Код КАК ИмяБазыПриемника,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена КАК ИмяКаталогаПриемника,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки, ЛОЖЬ) КАК РежимОтладкиКД,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки, ЛОЖЬ) = ИСТИНА
		|				ТОГДА ВЫБОР
		|						КОГДА оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП = ИСТИНА
		|							ТОГДА оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП
		|						ИНАЧЕ оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки
		|					КОНЕЦ
		|			ИНАЧЕ НЕОПРЕДЕЛЕНО
		|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ОбработкаОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОД КАК ПОД,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПравилоВыгрузки КАК ПравилоВыгрузки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПравилоЗагрузки КАК ПравилоЗагрузки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОДИзФайла КАК ПОДИзФайла,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена.ПутьКПОД КАК ПутьКПОД,
		|	""ВыгрузкаДанныхИзПланаОбмена"" КАК ИмяПВД
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
		|	И оду_БазыУчастникиОбмена.Ссылка.ТекущаяБД = Истина
		|	И ВЫБОР
		|			КОГДА оду_БазыУчастникиОбмена.Ссылка.ЭтоРабочаяБД = ИСТИНА
		|					И &ТекущаяРабочаяБД = ЛОЖЬ
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.УО КАК УО,
		|	ВТ_Данные.оду_УзелПланаОбмена КАК оду_УзелПланаОбмена,
		|	ВТ_Данные.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ВТ_Данные.ИмяБазыПриемника КАК ИмяБазыПриемника,
		|	ВТ_Данные.ИмяКаталогаПриемника КАК ИмяКаталогаПриемника,
		|	ВТ_Данные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_Данные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Данные.РежимОтладкиКД КАК РежимОтладкиКД,
		|	ВТ_Данные.ОбработкаОтладки КАК ОбработкаОтладки,
		|	ВТ_Данные.РежимОтладки КАК РежимОтладки,
		|	ВТ_Данные.ПОД КАК ПОД,
		|	ВТ_Данные.ПравилоВыгрузки КАК ПравилоВыгрузки,
		|	ВТ_Данные.ПравилоЗагрузки КАК ПравилоЗагрузки,
		|	ВТ_Данные.ПутьКОбработкеОтладки КАК ПутьКОбработкеОтладки,
		|	ВТ_Данные.ИспользоватьОбработкуБСП КАК ИспользоватьОбработкуБСП,
		|	ВТ_Данные.ОбработкаОтладкиБСП КАК ОбработкаОтладкиБСП,
		|	ВТ_Данные.ПОДИзФайла КАК ПОДИзФайла,
		|	ВТ_Данные.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	ВТ_Данные.ПутьКПОД КАК ПутьКПОД,
		|	ВТ_Данные.ИмяПВД КАК ИмяПВД,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|		ПО ВТ_Данные.ИДОбъекта = оду_СостояниеОбъектовОбмена.ИДОбъекта
		|			И ВТ_Данные.ИДБазыПриемник = оду_СостояниеОбъектовОбмена.ИДБазыПриемник
		|			И ВТ_Данные.ИДБазыИсточник = оду_СостояниеОбъектовОбмена.ИДБазыИсточник
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта ЕСТЬ NULL
		|";
		
	
	Запрос.УстановитьПараметр("ИДОбъекта", "оду_ВыгрузкаДанныхИзПланаОбмена");
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	Запрос.УстановитьПараметр("ТекущаяРабочаяБД", НастройкиТекущейБД.ЭтоРабочаяБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	
	ВДЗ = РезультатЗапроса.Выбрать(); 
	
	Если  ВДЗ.Следующий() Тогда
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, пр_МодульПов, ВДЗ, ТекущийПользователь, НастройкиТекущейБД);
		РезультатЗапроса = оду_ВыгрузкаДанныхИзПланаОбмена_Запрос(СтруктураЗапроса); 
	КонецЕсли;
	
КонецФункции 

//TODO:  Получать настройки динамичестки из ОбработкиПроизвольногоЗапроса и  С_оду_БазыУчастникиОбмена, и РС_Настроек
Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль, пр_МодульПов, ВДЗ, ТекущийПользователь, НастройкиТекущейБД)
	
	Попытка
		
		ИДБазыПриемник = ВДЗ.ИДБазыПриемник; //Тест  ytaptest6
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		СтруктураЗапроса.ИДБазыИсточник = НастройкиТекущейБД.ИДБазыИсточник;
		
		//МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		//СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		//СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним; 
		СтруктураЗапроса.ИДЗапроса = "оду_ВыгрузкаДанныхИзПланаОбмена";
		СтруктураЗапроса.ИмяЗапроса = "Оду выгрузка данных из плана обмена"; 
		
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		СтруктураЗапроса.ВыполнятьВФоне = Истина;
		СтруктураЗапроса.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(ТекущийПользователь);
		СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		пр_Модуль.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		ПараметрыЗапроса = Новый Структура(); 
		ПараметрыЗапроса.Вставить("оду_УзелПланаОбмена", ВДЗ.оду_УзелПланаОбмена);
		ПараметрыЗапроса.Вставить("ИмяКаталогаПриемника", ВДЗ.ИмяКаталогаПриемника);

		ПолныйПутьККаталогу = пр_Модуль.КаталогФайлаОбмена(НастройкиТекущейБД, ВДЗ.ИмяКаталогаПриемника);
		ПараметрыЗапроса.Вставить("ПолныйПутьККаталогу", ПолныйПутьККаталогу);
		
		ПараметрыКонвертации = оду_Общий_ПараметрыКонвертацииОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ); 
		ПараметрыКонвертации.Вставить("оду_УзелПланаОбмена", ВДЗ.оду_УзелПланаОбмена);
		
		ПараметрыЗапроса.Вставить("ПараметрыКонвертации", ПараметрыКонвертации);
		
		СтруктураЗапроса.ПараметрыЗапроса = ПараметрыЗапроса;
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 


//TODO:  Доделать
Функция оду_ВыгрузкаДанныхИзПланаОбмена_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Для примера
		Если ПараметрыЗапроса = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли; 
		
		оду_УзелПланаОбмена = ПараметрыЗапроса.оду_УзелПланаОбмена;
		
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, оду_УзелПланаОбмена);
		НомерСообщения = ЗаписьСообщения.НомерСообщения;
		
		ВДЗ = ПланыОбмена.ВыбратьИзменения(оду_УзелПланаОбмена, НомерСообщения);//, ФильтрОбмена);
		
		Данные = Новый Массив;
		
		Если ВДЗ.Следующий() Тогда
			Зареганые = ВДЗ.Получить();
			Данные.Добавить(Зареганые);
		КонецЕсли; 
		
		ЗаписьСообщения.ЗакончитьЗапись();
		ЗаписьXML.Закрыть();
		
		Если Данные.Количество() = 0 Тогда 
			Возврат Неопределено;	
		КонецЕсли;
		
		СтруктураЗапроса.НомерЭтапаЗапроса = НомерСообщения;
		
		ИмяФайлаЗапроса = СтрШаблон("%1\UOD_%2.xml", ПараметрыЗапроса.ПолныйПутьККаталогу, НомерСообщения);

		СтруктураЗапроса.ИмяФайлаЗапроса = ИмяФайлаЗапроса;

		РезультатВыгрузки = РезультатВыгрузки(СтруктураЗапроса);
		Возврат РезультатВыгрузки;	
		
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыгрузки(СтруктураЗапроса)
	
	Попытка
	
		пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь);
	
		ПараметрыКонвертации = СтруктураЗапроса.ПараметрыЗапроса.ПараметрыКонвертации;
		ТаблицаСостоянийОбмена = пр_Модуль.ТаблицаСостоянийОбмена();
		Нстр = ТаблицаСостоянийОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр, СтруктураЗапроса); 
		Нстр.ДатаВыгрузки 	= СтруктураЗапроса.ДатаСобытия;
		//Нстр.ИДОбъекта 		= СтруктураЗапроса.ИДЗапроса;
		Нстр.ИДОбъекта 		= СтрШаблон("UOD_%1", СтруктураЗапроса.НомерЭтапаЗапроса);
		
		Нстр.ИмяФайлаОбмена 		= СтруктураЗапроса.ИмяФайлаЗапроса;
		Нстр.КонфигурацияКонвертацииОбмена = СтруктураЗапроса.ПараметрыЗапроса.ПараметрыКонвертации.КонфигурацияКонвертацииОбмена;
		Нстр.ПриоритетДопПризнака 		= СтруктураЗапроса.НомерЭтапаЗапроса;
		Нстр.РежимОбмена 		= оду_ОбщийПовтИсп.РежимВыгрузка();
		Нстр.СостояниеОбмена 		= оду_ОбщийПовтИсп.СостояниеВыгрузка();
		
		
		СтрокаОтветаОбмена = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена,  , СтруктураЗапроса.ИмяФайлаЗапроса, , ПараметрыКонвертации, РаспределятьПодчиненнымУО);
		
		//TODO:  Написать функциию обработки ответа
		ДанныеЗапроса = Неопределено;
		Данные = Новый Структура();

		
		Возврат Данные;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("оду_ВыгрузкаДанныхИзПланаОбмена_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#КонецОбласти




#Область  ПроизвольнаяВыгрузка

 &НаКлиенте
Функция РезультатВыполненияОбмена()
	
	Если ЕстьОшибкиВНастройкахФормы() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект1С)  Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ДанныеОбмена = Новый Массив;
	ДанныеОбмена.Добавить(Объект1С);
	
	РезультатВыполненияОбменаНаСерере(ДанныеОбмена);
	
КонецФункции 

//TODO:  Доделать
&НаКлиенте
Функция ЕстьОшибкиВНастройкахФормы()

	//Если ВыгрузитьЧЗФайл = Истина Тогда
	//
	//	Если КонвертацияПутьККаталогуДанных = "" И КонвертацияПутьКФайлуДанных = "" Тогда
	//		Сообщение = Новый СообщениеПользователю;
	//		Сообщение.Текст = "Нужно указать место выгрузки данных обмена";
	//		Сообщение.Сообщить(); 
	//		Возврат Истина;
	//	КонецЕсли; 	
	//
	//КонецЕсли; 	
	
	Возврат Ложь;
	
КонецФункции // ()

&НаСервере
Процедура ВыгрузкаИзЗапросаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросВыборкиДанных; 
	
	Для каждого Стр Из ПараметрыЗапросаДанных Цикл
		Если Стр.Выбрать = Ложь ИЛИ НЕ ЗначениеЗаполнено(Стр.ИмяПараметраЗапросаДанных) 
								ИЛИ НЕ ЗначениеЗаполнено(Стр.ЗначениеПараметра) Тогда
			Продолжить;		
		КонецЕсли; 
		
		Запрос.УстановитьПараметр(Стр.ИмяПараметраЗапросаДанных, Стр.ЗначениеПараметра);
	
	КонецЦикла; 
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет данных в запросе";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;  
	
	Если ВыборкаМассивом = Истина Тогда
		ДанныеОбмена = Новый Массив; 
		ВДЗ = РезультатЗапроса.Выбрать();
		Пока ВДЗ.Следующий() Цикл
			ДанныеОбмена.Добавить(ВДЗ.Ссылка);	
		КонецЦикла;	
	Иначе	
		ДанныеОбмена = РезультатЗапроса;	
	КонецЕсли; 
	
	РезультатВыполненияОбменаНаСерере(ДанныеОбмена);
	
КонецПроцедуры

&НаСервере
Функция РезультатВыполненияОбменаНаСерере(ДанныеОбмена = Неопределено, Тек_ИДОбъекта = "", Тек_ТипXMLОбъекта = "", Тек_ИмяФайлаОбмена = "", ИмяПВД = "", НомерСообщения = "") Экспорт
	
	Если ОтправитьВыбранныймУО = Истина И Конвертация_НастройкаИзПараметров = Истина Тогда
		//TODO:  Долелать
		РезультатВыполненияОбменаНаСеререПоНастройкам(ДанныеОбмена, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, Тек_ИмяФайлаОбмена, ИмяПВД, НомерСообщения);
	Иначе
		РезультатВыполненияОбменаНаСеререДалее(ДанныеОбмена, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, Тек_ИмяФайлаОбмена, ИмяПВД, НомерСообщения);
	КонецЕсли; 
	
КонецФункции  

//TODO:  Долелать
&НаСервере
Функция РезультатВыполненияОбменаНаСеререПоНастройкам(ДанныеОбмена = Неопределено, Тек_ИДОбъекта = "", Тек_ТипXMLОбъекта = "", Тек_ИмяФайлаОбмена = "", ИмяПВД = "", НомерСообщения = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Конвертация_Параметры.ПОД КАК ПОД,
		|	Конвертация_Параметры.ПОДИзФайла КАК ПОДИзФайла,
		|	Конвертация_Параметры.ПутьКПОД КАК ПутьКПОД,
		|	Конвертация_Параметры.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	Конвертация_Параметры.ОбработкаБСП КАК ОбработкаБСП,
		|	Конвертация_Параметры.ВерсияКонфигурации КАК ВерсияКонфигурации,
		|	Конвертация_Параметры.Используется КАК Используется
		|ПОМЕСТИТЬ ВТ_ПараметрыКонвертации
		|ИЗ
		|	&Конвертация_Параметры КАК Конвертация_Параметры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокУО.УО КАК УО,
		|	СписокУО.Выбрать КАК Выбрать,
		|	СписокУО.НаименованиеУО КАК НаименованиеУО,
		|	СписокУО.ВерсияКонфигурации КАК ВерсияКонфигурации
		|ПОМЕСТИТЬ ВТ_УО
		|ИЗ
		|	&СписокУО КАК СписокУО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПараметрыКонвертации.ПОД КАК ПОД,
		|	ВТ_ПараметрыКонвертации.ПОДИзФайла КАК ПОДИзФайла,
		|	ВТ_ПараметрыКонвертации.ПутьКПОД КАК ПутьКПОД,
		|	ВТ_ПараметрыКонвертации.ПОДИзОбработкиБСП КАК ПОДИзОбработкиБСП,
		|	ВТ_ПараметрыКонвертации.ОбработкаБСП КАК ОбработкаБСП,
		|	ВТ_ПараметрыКонвертации.ВерсияКонфигурации КАК ВерсияКонфигурации,
		|	ВТ_УО.УО КАК УО,
		|	ВТ_УО.Выбрать КАК Выбрать,
		|	ВТ_УО.НаименованиеУО КАК НаименованиеУО
		|ИЗ
		|	ВТ_ПараметрыКонвертации КАК ВТ_ПараметрыКонвертации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УО КАК ВТ_УО
		|		ПО ВТ_ПараметрыКонвертации.Используется = ВТ_УО.Выбрать
		|			И ВТ_ПараметрыКонвертации.ВерсияКонфигурации = ВТ_УО.ВерсияКонфигурации
		|ГДЕ
		|	ВТ_ПараметрыКонвертации.Используется = Истина";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
КонецФункции  

&НаСервере
Функция РезультатВыполненияОбменаНаСеререДалее(ДанныеОбмена = Неопределено, Тек_ИДОбъекта = "", Тек_ТипXMLОбъекта = "", Тек_ИмяФайлаОбмена = "", ИмяПВД = "", НомерСообщения = "") Экспорт
	
	МассивСтруктурПараметровКонвертации = МассивСтруктурПараметровКонвертации(ИмяПВД, Тек_ТипXMLОбъекта); 
	
	Если МассивСтруктурПараметровКонвертации = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	КоличествоПараметровКонвертации = МассивСтруктурПараметровКонвертации.Количество();
	
	СоответвиеПараметровВыгрузки = СоответвиеПараметровВыгрузки(ДанныеОбмена); 
	
	Для каждого СтруктураПараметровКонвертации Из МассивСтруктурПараметровКонвертации Цикл
		
		ПараметрыКонвертации = СтруктураПараметровКонвертации.ПараметрыКонвертации;  
		
		ПутьКФайлуОбмена = ПутьКФайлуОбмена(НомерСообщения, ПараметрыКонвертации.ВерсияКонфигурации);
		
		ТаблицаСостоянийОбмена = ТаблицаСостоянийОбмена(ДанныеОбмена, ПараметрыКонвертации, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, Тек_ИмяФайлаОбмена, НомерСообщения);
		
		//МассивУО = МассивУО(КоличествоПараметровКонвертации, СтруктураПараметровКонвертации);     
		
		//, РаспределятьПодчиненнымУО, МассивУО - все в ПараметрыКонвертации
		
		Если РежимОтладки = Ложь Тогда 
			
			Если ПараметрыКонвертации.РаспределятьПодчиненнымУО = Истина Тогда
				СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхСРаспределением(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПутьКФайлуОбмена, , ПараметрыКонвертации);
			Иначе
				СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПутьКФайлуОбмена, , ПараметрыКонвертации);
			КонецЕсли;			
			//СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПутьКФайлуОбмена, , ПараметрыКонвертации, РаспределятьПодчиненнымУО, МассивУО);
			//Возврат СтрокаОтветаОбмена;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции              


&НаСервере
Функция ТекстЗапросаВыгрузкиПоРаспределению()     
	
	Возврат

		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_УТ
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка = &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_Подчиненные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка <> &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|	И &РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.УО КАК УО,
		|	ВТ_Подчиненные.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_УТ КАК ВТ_УТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ПО ВТ_УТ.НастройкаКонвертацииОбмена = ВТ_Подчиненные.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_Подчиненные.УО ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.УО,
		|	ВТ_Подчиненные.ОтборыОбмена
		|ИЗ
		|	ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УТ КАК ВТ_УТ
		|		ПО ВТ_Подчиненные.НастройкаКонвертацииОбмена = ВТ_УТ.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_УТ.НастройкаКонвертацииОбмена ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Данные.УО КАК УО,
		|	ВТ_Данные.ОтборыОбмена КАК ОтборыОбмена
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ИТОГИ ПО
		|	НастройкаКонвертацииОбмена,
		|	ОтборыОбмена";

КонецФункции


//TODO:  Доработать, если у Распределителей разные ПодчиненныйУчастникОбмена 
Функция ВыполнитьВыгрузкуДанныхСРаспределением(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгрузкиПоРаспределению();
	
																	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	//TODO: доделать
	Запрос.УстановитьПараметр("Ссылка", УО);
	//ТипXMLОбъектаИсточника = ?(Тек_ТипXMLОбъекта = "", ТипXMLОбъекта, Тек_ТипXMLОбъекта);
	//Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъектаИсточника); 
	Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъекта); 
	Запрос.УстановитьПараметр("РаспределятьПодчиненнымУО", РаспределятьПодчиненнымУО);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
		Возврат СтрокаОтветаОбмена;
	КонецЕсли;
	
	ВыборкаНастройкиКД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	Пока ВыборкаНастройкиКД.Следующий() Цикл    
		
		ВыборкаОтборыОбмена = ВыборкаНастройкиКД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОтборыОбмена.Следующий() Цикл 
			
			МассивУО = Новый Массив;
			
			ВДЗ = ВыборкаОтборыОбмена.Выбрать();
			
			Пока ВДЗ.Следующий() Цикл
				МассивУО.Добавить(ВДЗ.УО);	
			КонецЦикла;
			
			ПараметрыКонвертации.Вставить("ОтборыОбмена", ВыборкаОтборыОбмена.ОтборыОбмена);
			ПараметрыКонвертации.Вставить("МассивУО", МассивУО);
			СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, 
																ОбработкаОбменаДанных, ПараметрыКонвертации);
			
		КонецЦикла;  
		
	КонецЦикла;    	
	
	//
	//ВыборкаОтборыОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока ВыборкаОтборыОбмена.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаОтборыОбмена
	//
	//	ВДЗ = ВыборкаОтборыОбмена.Выбрать();
	//	
	//	МассивУО = Новый Массив;
	//			 
	//	Пока ВДЗ.Следующий() Цикл
	//		МассивУО.Добавить(ВДЗ.Ссылка);
	//	КонецЦикла;
	//	
	//	ПараметрыКонвертации.Вставить("ОтборыОбмена", ВыборкаОтборыОбмена.ОтборыОбмена);
	//	ПараметрыКонвертации.Вставить("МассивУО", МассивУО);
	//	СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
	//	
	//КонецЦикла;  
	
	Возврат СтрокаОтветаОбмена;
		
КонецФункции



//TODO:  Доработать, если у Распределителей разные ПодчиненныйУчастникОбмена 
Функция ВыполнитьВыгрузкуДанныхСРаспределениемБыло(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена,
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|ИТОГИ ПО
		|	ОтборыОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
		Возврат СтрокаОтветаОбмена;
	КонецЕсли;
	
	ВыборкаОтборыОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОтборыОбмена.Следующий() Цикл
		// Вставить обработку выборки ВыборкаОтборыОбмена
	
		ВДЗ = ВыборкаОтборыОбмена.Выбрать();
		
		МассивУО = Новый Массив;
				 
		Пока ВДЗ.Следующий() Цикл
			МассивУО.Добавить(ВДЗ.Ссылка);
		КонецЦикла;
		
		ПараметрыКонвертации.Вставить("ОтборыОбмена", ВыборкаОтборыОбмена.ОтборыОбмена);
		ПараметрыКонвертации.Вставить("МассивУО", МассивУО);
		СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
		
	КонецЦикла;  
	
	Возврат СтрокаОтветаОбмена;
		
КонецФункции


//TODO:  Доделать для набора
&НаСервере
Функция ТаблицаСостоянийОбмена(ДанныеОбмена, ПараметрыКонвертации, Тек_ИДОбъекта = "", Тек_ТипXMLОбъекта = "", Тек_ИмяФайлаОбмена = "", НомерСообщения = "")
	
	//TODO:  Доделать
	//Если ВыгрузитьЧЗФайл = Истина Тогда
	//	Возврат Неопределено;	
	//КонецЕсли;
	
	ТаблицаСостоянийОбмена = оду_Общий.ТаблицаСостоянийОбмена();
	//Если ТипЗнч(ДанныеОбмена) = Тип("Массив") Тогда
	//	Для каждого ОбъектОбменаСсылка Из ДанныеОбмена Цикл  
	//		Тек_ИДОбъекта = XMLСтрока(ОбъектОбменаСсылка);
	//		Тек_ТипXMLОбъекта = пр_Общий.ИмяТипаXMLПоСсылке(ОбъектОбменаСсылка); 
	//		//Тек_ИмяПКО = Тек_ТипXMLОбъекта[1];
	//		ДобавитьВТаблицуСостояний(ТаблицаСостоянийОбмена, Тек_ИДОбъекта, Тек_ТипXMLОбъекта);	
	//	КонецЦикла;   
	//Иначе
		ДобавитьВТаблицуСостояний(ТаблицаСостоянийОбмена, ПараметрыКонвертации, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, Тек_ИмяФайлаОбмена, НомерСообщения);	
	//КонецЕсли; 
	
	Возврат ТаблицаСостоянийОбмена;	
	
КонецФункции 

&НаСервере
Процедура ДобавитьВТаблицуСостояний(ТаблицаСостоянийОбмена, ПараметрыКонвертации = Неопределено, Тек_ИДОбъекта = "", Тек_ТипXMLОбъекта = "", Тек_ИмяФайлаОбмена = "", НомерСообщения = "")
	
	Стр = ТаблицаСостоянийОбмена.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ЭтотОбъект);  
	Стр.ДатаВыгрузки = ТекущаяДатаСеанса();
	
	Стр.ИДБазыИсточник = ИДБазыИсточник;
	Стр.ИДБазыПриемник = ИДБазыПриемник;
	
	Стр.ИДОбъекта 						= ?(Тек_ИДОбъекта = "", ИДОбъекта, Тек_ИДОбъекта);
	Стр.ИмяФайлаОбмена 					= ?(Тек_ИмяФайлаОбмена = "", ПутьКФайлуОбмена, Тек_ИмяФайлаОбмена);
	Если ПараметрыКонвертации = Неопределено Тогда
		Стр.КонфигурацияКонвертацииОбмена 	= оду_ОбщийПовтИсп.КонфигурацияКД2();
		Стр.РежимОбмена 					= оду_ОбщийПовтИсп.РежимВыгрузка();
	Иначе
		Стр.КонфигурацияКонвертацииОбмена 	= ПараметрыКонвертации.КонфигурацияКонвертацииОбмена;//оду_ОбщийПовтИсп.КонфигурацияКД2();
		Стр.РежимОбмена 					= ПараметрыКонвертации.РежимОбмена;//оду_ОбщийПовтИсп.РежимВыгрузка();
	КонецЕсли; 
	Стр.ПриоритетДопПризнака 			= ?(НомерСообщения = "", 0, НомерСообщения);
	
	Стр.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгрузка();  
	ТипXMLОбъектаИсточника = ?(Тек_ТипXMLОбъекта = "", ТипXMLОбъекта, Тек_ТипXMLОбъекта);
	Стр.ТипXMLОбъектаИсточника = ТипXMLОбъектаИсточника;
	
	СтруктураПараметровОбъектаПриемника = СтруктураПараметровОбъектаПриемника(ТипXMLОбъектаИсточника);
	Стр.ТипXMLОбъектаПриемника = СтруктураПараметровОбъектаПриемника.ТипXMLОбъектаПриемника;
	Стр.ПриоритетОбъекта = СтруктураПараметровОбъектаПриемника.ПриоритетОбъекта;
	
КонецПроцедуры


&НаСервере
Функция ТекстЗапросаПолученияПараметровКонвертацииПоРаспределению()     
	
	Возврат

		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_УТ
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка = &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_Подчиненные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка <> &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|	И &РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена.Код КАК ВерсияКонфигурации,
		|	ВТ_Подчиненные.УО КАК УО,
		|	ВТ_Подчиненные.ОтборыОбмена КАК ОтборыОбмена
		|ИЗ
		|	ВТ_УТ КАК ВТ_УТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ПО ВТ_УТ.НастройкаКонвертацииОбмена = ВТ_Подчиненные.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_Подчиненные.УО ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена.Код,
		|	ВТ_Подчиненные.УО,
		|	ВТ_Подчиненные.ОтборыОбмена
		|ИЗ
		|	ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УТ КАК ВТ_УТ
		|		ПО ВТ_Подчиненные.НастройкаКонвертацииОбмена = ВТ_УТ.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_УТ.НастройкаКонвертацииОбмена ЕСТЬ NULL
		|ИТОГИ
		|	МАКСИМУМ(ВерсияКонфигурации)
		|ПО
		|	НастройкаКонвертацииОбмена";

КонецФункции

&НаСервере
Функция МассивСтруктурПараметровКонвертацииПоРаспределению(ИмяПВД = "", Тек_ТипXMLОбъекта = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияПараметровКонвертацииПоРаспределению();
																	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Ссылка", УО);
	
	ТипXMLОбъектаИсточника = ?(Тек_ТипXMLОбъекта = "", ТипXMLОбъекта, Тек_ТипXMLОбъекта);
	Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъектаИсточника);
	Запрос.УстановитьПараметр("РаспределятьПодчиненнымУО", РаспределятьПодчиненнымУО);
	
	РЗ = Запрос.Выполнить();  
	
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РЗ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		МассивУО = Новый Массив;
				 
		ВДЗ = Выборка.Выбрать();
		
		Пока ВДЗ.Следующий() Цикл
			МассивУО.Добавить(ВДЗ.УО);	
		КонецЦикла;
		
		ПараметрыКонвертации = оду_Общий_ПараметрыКонвертацииОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, Выборка.НастройкаКонвертацииОбмена); 
		//ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена; 
		ПараметрыКонвертации.Вставить("ИмяПВД", ИмяПВД);
		ПараметрыКонвертации.Вставить("оду_УзелПланаОбмена", УзелПланаОбмена);
		ПараметрыКонвертации.Вставить("ВерсияКонфигурации", Выборка.ВерсияКонфигурации); 
		
		ПараметрыКонвертации.Вставить("РаспределятьПодчиненнымУО", РаспределятьПодчиненнымУО); 
		
		//ПараметрыКонвертации.Вставить("МассивУО", МассивУО); 
		СтруктураПараметров = Новый Структура("ПараметрыКонвертации, МассивУО", ПараметрыКонвертации, МассивУО);
		
		МассивСтруктурПараметровКонвертации.Добавить(СтруктураПараметров);
		
	КонецЦикла;      
	
	Возврат МассивСтруктурПараметровКонвертации;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПолученияПараметровКонвертации()     
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.СсылкаУО КАК УО,
		|	ВложенныйЗапрос.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВложенныйЗапрос.ОтборыОбмена КАК ОтборыОбмена,
		|	ВложенныйЗапрос.НастройкаКонвертацииОбмена.Код КАК ВерсияКонфигурации,
		|	ВложенныйЗапрос.ПланОбмена КАК ПланОбмена
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		оду_БазыУчастникиОбмена.Ссылка КАК СсылкаУО,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|					ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|					ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|				ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|		КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|		оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена,
		|		оду_БазыУчастникиОбмена.ПланОбмена КАК ПланОбмена
		|	ИЗ
		|		Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|			ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|				И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|	ГДЕ
		|		оду_БазыУчастникиОбмена.Ссылка = &Ссылка
		|		И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|		И оду_БазыУчастникиОбмена.Используется = ИСТИНА) КАК ВложенныйЗапрос";

КонецФункции

&НаСервере
Функция МассивПараметровКонвертацииОбычный(ИмяПВД = "", Тек_ТипXMLОбъекта = "")
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияПараметровКонвертации();
																	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Ссылка", УО);
	
	ТипXMLОбъектаИсточника = ?(Тек_ТипXMLОбъекта = "", ТипXMLОбъекта, Тек_ТипXMLОбъекта);
	Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъектаИсточника);
	
	РЗ = Запрос.Выполнить();  
				 
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	Если ВДЗ.Следующий() Тогда     
		
		//МассивПараметровКонвертации = Новый Массив;
									
		//ПараметрыКонвертации = оду_Общий_ПараметрыКонвертацииОбъекта();
		ПараметрыКонвертации = оду_Общий.ПараметрыКонвертацииОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, УО); 
		ПараметрыКонвертации.УО = УО;	
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ.НастройкаКонвертацииОбмена);
		ПараметрыКонвертации.НастройкаКонвертации = ВДЗ.НастройкаКонвертацииОбмена;
		
		//ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена; 
		//ПараметрыКонвертации.Вставить("ИмяПВД", ИмяПВД);
		ПараметрыКонвертации.Вставить("ПланОбмена", ВДЗ.ПланОбмена);
		//ПараметрыКонвертации.Вставить("ВерсияКонфигурации", ВДЗ.ВерсияКонфигурации);
		//МассивПараметровКонвертации.Добавить(ПараметрыКонвертации);       
		
		//ПараметрыКонвертации.Вставить("РаспределятьПодчиненнымУО", РаспределятьПодчиненнымУО); 
		
		Если ЗначениеЗаполнено(ИмяПВД) Тогда
			ПараметрыКонвертации.ИмяПВД = ИмяПВД;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ПараметрыКонвертации, МассивУО", ПараметрыКонвертации, Неопределено);
		МассивСтруктурПараметровКонвертации.Добавить(СтруктураПараметров);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	//Если ЗначениеЗаполнено(УО)  Тогда
	//	МассивУчастниковОбмена = МассивУчастниковОбмена();
	//	
	//	Для каждого СтруктураНастроекОбмена Из МассивУчастниковОбмена Цикл
	//		ПараметрыКонвертации = СтруктураНастроекОбмена.НастройкаКонвертацииОбмена; 			
	//	КонецЦикла; 
	//
	//Иначе
	//	ПараметрыКонвертации = СтруктураНастроекКонвертацииИзФормы(ДанныеОбмена);
	//КонецЕсли; 

	
	//Возврат МассивПараметровКонвертации;
	Возврат МассивСтруктурПараметровКонвертации;
	
КонецФункции 

&НаСервере
Функция МассивСтруктурПараметровКонвертации(ИмяПВД = "", Тек_ТипXMLОбъекта = "")
		
	//Если ВыгрузитьЧЗФайл = Истина Тогда 
	
	Если Конвертация_НастройкаИзПараметров = Истина Тогда
		Возврат СтруктураНастроекКонвертацииИзФормы();    
	//TODO:  Подумать
	//ИначеЕсли РаспределятьПодчиненнымУО = Истина Тогда 
	//	Возврат МассивСтруктурПараметровКонвертацииПоРаспределению(ИмяПВД);
	Иначе    
		Возврат МассивПараметровКонвертацииОбычный(ИмяПВД);	
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция СтруктураНастроекКонвертацииИзФормы(ДанныеОбмена = Неопределено)
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_ОбщийПовтИсп", ТекущийПользователь); 
	Если пр_Модуль = Неопределено Тогда
		пр_Модуль = оду_ОбщийПовтИсп;
	КонецЕсли; 
	
	ПараметрыКонвертации = оду_Общий_ПараметрыКонвертацииОбъекта();
	
	
	Если КонвертацияИспользоватьНастройкиКонвертации = Истина Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, КонвертацияНастройкаКонвертации); 
		ПараметрыКонвертации.НастройкаКонвертации = КонвертацияНастройкаКонвертации;
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ЭтотОбъект); 
		ПараметрыКонвертации.ВыгрузкаБезПроверкиРегистрации = КонвертацияВыгрузкаБезПроверкиРегистрации;
		ПараметрыКонвертации.ПОДИзОбработкиБСП = КонвертацияИспользоватьОбработкуБСП;
		ПараметрыКонвертации.ИспользоватьНастройкиКонвертации = КонвертацияИспользоватьНастройкиКонвертации;
		ПараметрыКонвертации.ПОДИзФайла = ЗначениеЗаполнено(КонвертацияПутьФайлуКонвертации) И
		НЕ (КонвертацияИспользоватьОбработкуБСП ИЛИ КонвертацияИспользоватьНастройкиКонвертации);
		
		Если ПараметрыКонвертации.ПОДИзФайла = Истина Тогда
			ПараметрыКонвертации.ПутьКПОД = КонвертацияПутьФайлуКонвертации;
		КонецЕсли; 
		
		Если КонвертацияИспользоватьОбработкуБСП = Истина Тогда
			ПараметрыКонвертации.ОбработкаОтладкиБСП = КонвертацияОбработкаБСП;
		КонецЕсли; 
		
		ПараметрыКонвертации.КонфигурацияКонвертацииОбмена = КонвертацияКонфигурацияОбмена;
		
	КонецЕсли; 

	ПараметрыКонвертации.ДанныеОбмена = ДанныеОбмена; 
	
	ПараметрыКонвертации.Вставить("ОтборыОбмена", УО.ОтборыОбмена);
		
	ПараметрыКонвертации.Вставить("РаспределятьПодчиненнымУО", РаспределятьПодчиненнымУО); 
		
	//Возврат ПараметрыКонвертации;
	
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	//Пока Выборка.Следующий() Цикл
	//	
	//	МассивУО = Новый Массив;
	//			 
	//	ВДЗ = Выборка.Выбрать();
	//	
	//	Пока ВДЗ.Следующий() Цикл
	//		МассивУО.Добавить(ВДЗ.УО);	
	//	КонецЦикла;
	//	
	//	ПараметрыКонвертации = оду_Общий_ПараметрыКонвертацииОбъекта();
	//	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, Выборка.НастройкаКонвертацииОбмена); 
	//	//ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена; 
	//	ПараметрыКонвертации.Вставить("ИмяПВД", ИмяПВД);
	//	ПараметрыКонвертации.Вставить("оду_УзелПланаОбмена", УзелПланаОбмена);
	//	ПараметрыКонвертации.Вставить("ВерсияКонфигурации", Выборка.ВерсияКонфигурации); 
	//	
	//	//ПараметрыКонвертации.Вставить("МассивУО", МассивУО); 
	//	
	//КонецЦикла;  
	
	МассивУО = Неопределено;
	СтруктураПараметров = Новый Структура("ПараметрыКонвертации, МассивУО", ПараметрыКонвертации, МассивУО);
	
	МассивСтруктурПараметровКонвертации.Добавить(СтруктураПараметров);

	Возврат МассивСтруктурПараметровКонвертации;
	
КонецФункции 

&НаСервере
Функция СоответвиеПараметровВыгрузки(ДанныеОбмена)
	
	Если ДанныеОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 

	оду_ДополнительныеСвойстваОбъектаПриемник = ДополнительныеСвойстваОбъекта;
	
	Если ДополнительныеСвойстваОбъекта = "" Тогда
		оду_ДополнительныеСвойстваОбъекта = ДополнительныеСвойстваОбъекта;	
	Иначе
		оду_ДополнительныеСвойстваОбъекта = ЗначениеИзСтрокиВнутр(ДополнительныеСвойстваОбъекта); //Структура параметров	
	КонецЕсли; 
	
	СоответвиеПараметровВыгрузки = Новый Соответствие();
	//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", ДанныеОбмена, ПереносТолькоСсылок));		
	
	СтруктураПараметров = Новый Структура(); 
	
	//оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	//оду_СтруктураУО.ИДБазыИсточник = ИДБазыИсточник;
	//оду_СтруктураУО.ИДБазыПриемник = ИДБазыПриемник;
	//СтруктураПараметров.Вставить("оду_СтруктураУО", ЗначениеВСтрокуВнутр(оду_СтруктураУО));
	
	СтруктураПараметров.Вставить("оду_МассивСсылок1С", ДанныеОбмена);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъекта", оду_ДополнительныеСвойстваОбъекта);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъектаПриемник", оду_ДополнительныеСвойстваОбъектаПриемник);
	
	СоответвиеПараметровВыгрузки.Вставить(ТипXMLОбъекта, СтруктураПараметров);	
	Возврат  СоответвиеПараметровВыгрузки;
		
КонецФункции 

&НаСервере
Функция ПутьКФайлуОбмена(НомерСообщения = "", ВерсияКонфигурации = "")
	
	Если ВыгрузитьЧЗФайл = Истина Тогда
		
		Если ЗначениеЗаполнено(ПутьКФайлуОбмена)  Тогда
			ИмяФайлаОбмена =  ПутьКФайлуОбмена;
		Иначе
			ИмяФайлаОбмена = ИмяФайлаОбмена(КаталогХраненияФайловОбработки, НомерСообщения, ВерсияКонфигурации) + ".xml";
		КонецЕсли; 
		
	Иначе
		
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		
		//Если ЗначениеЗаполнено(КонвертацияПутьКФайлуДанных)  Тогда
		//	ИмяФайлаОбмена = КонвертацияПутьКФайлуДанных;
		//ИначеЕсли ЗначениеЗаполнено(КонвертацияПутьККаталогуДанных)  Тогда
		//	ИмяФайлаОбмена = пр_КлиентСервер.ВернутьПолныйПутьКфайлуПоДате(КонвертацияПутьККаталогуДанных, "Объект1С", "xml");//, "День");
		//Иначе
		ИмяБазыПриемника = пр_Общий.ДанныеИБПоСсылкам(УО, "Код", , "Структура").Код;
		//ИмяФайлаОбмена = пр_Общий.ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника) + ".xml";
		ИмяФайлаОбмена = ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника, НомерСообщения, ВерсияКонфигурации) + ".xml";
		//КонецЕсли; 
		
	КонецЕсли; 
	
	СтруктураПутиФайла = Неопределено;
	Если РезультатПодготовкиПутиКФайлу(ИмяФайлаОбмена, СтруктураПутиФайла) = Истина Тогда
		Возврат  ИмяФайлаОбмена;
	Иначе
		
		Если СтруктураПутиФайла <> Неопределено Тогда
			РасширениеФайла = СтруктураПутиФайла.РасширениеФайла; 
			Если НЕ ЗначениеЗаполнено(РасширениеФайла)  Тогда
				РасширениеФайла = "xml";			
			КонецЕсли; 
		КонецЕсли; 
		
		Возврат  ПолучитьИмяВременногоФайла(РасширениеФайла);
		
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция МассивУО(КоличествоПараметровКонвертации = 0, СтруктураПараметровКонвертации = Неопределено)        
	
	МассивУО = Неопределено;
	
	Если ВыгрузитьЧЗФайл = Истина Тогда
		Возврат Неопределено;
	ИначеЕсли РаспределятьПодчиненнымУО = Истина Тогда
		
		Если  ОтправитьВыбранныймУО = Истина Тогда    
			
			//TODO: 	Проверить
			МассивУО = ?(СписокУО.Количество() = 0 , Неопределено, СписокУО.Выгрузить(,"УО").ВыгрузитьКолонку("УО"));	
			
			МассивСтр = СписокУО.НайтиСтроки(Новый Структура("Выбрать", Истина)); 
			Если МассивСтр.Количество() > 0 Тогда
				МассивУО = Новый Массив;
			Иначе	
				Возврат  Неопределено;
			КонецЕсли;
			
			Для каждого Стр Из МассивСтр Цикл
				МассивУО.Добавить(Стр.УО);
			КонецЦикла;
			
		ИначеЕсли КоличествоПараметровКонвертации > 0 И СтруктураПараметровКонвертации <> Неопределено Тогда 
			МассивУО = СтруктураПараметровКонвертации.МассивУО;	
		Иначе
			Возврат  Неопределено;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат  МассивУО;   
	
КонецФункции

&НаСервере
Функция ТипXMLОбъекта(ВыбранныйОбъект) 
	
	ТипXML = "";
	Если ТипЗнч(ВыбранныйОбъект) = пр_НастройкиПовтИсп.ТипСтрока() Тогда
		ТипXML = ВыбранныйОбъект;
	ИначеЕсли ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		
		Данные = пр_Общий.ЗначенияРеквизитовОбъекта(ВыбранныйОбъект, "ЗначениеПустойСсылки");
		Если Данные.ЗначениеПустойСсылки <> Неопределено Тогда
			ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(Данные.ЗначениеПустойСсылки);
		Иначе
			МассивИмени	= СтрРазделить(ВыбранныйОбъект.ПолноеИмя, ".");  
			Если МассивИмени.Количество() = 2 Тогда  
				
				ИмяТипа 		= МассивИмени[0];
				Имя 			= МассивИмени[1];
				
				Если ИмяТипа = "РегистрСведений" Тогда
					ИмяТипа = "InfoRg";
					//ИмяТипа = "InformationRegisterRecordSet"; 
					ВыборкаМассивом = Ложь;  
				ИначеЕсли ИмяТипа = "РегистрНакопления"  Тогда
					ИмяТипа = "AccumRg";
					ВыборкаМассивом = Ложь;  
				Иначе
					ВыборкаМассивом = Истина;  
				КонецЕсли;
				
				ТипXML = СтрШаблон("%1.%2", ИмяТипа, Имя); 		
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ВыбранныйОбъект);
	КонецЕсли;   
	
	Возврат ТипXML;  
	
КонецФункции

#КонецОбласти

#КонецОбласти
 

#Область  Регламенты

&НаКлиенте
Процедура РегламентОбмена(Команда)
	РегламентОбменаНаСервере();
КонецПроцедуры

&НаСервере
Процедура РегламентОбменаНаСервере()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ЭтаОбработка.РезультатВыгрузкиИзПланаОбмена(РежимОтладки);
	
КонецПроцедуры

#КонецОбласти
 

#Область  Алгоритмы  

&НаКлиенте
Процедура ОбновитьСопоставлениеНоменклатурыВидЦены(Команда)
	РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен();
КонецПроцедуры

Функция ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен()

	Возврат	
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УчастникОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбменаОрганизации.Организация, НЕОПРЕДЕЛЕНО) КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|		ПО (оду_БазыУчастникиОбменаОрганизации.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦеныСрез
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И ВидЦен В
		|					(ВЫБРАТЬ
		|						ВТ_ТекущиеДанные.ВидЦены КАК ВидЦены
		|					ИЗ
		|						ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК НоменклатураОснования,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦен,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТ_кеги
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|		ПО (ВТ_ЦеныСрез.Номенклатура = НоменклатураДополнительныеРеквизиты.Значение)
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования""
		|	И НоменклатураДополнительныеРеквизиты.Значение <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныСрез.Номенклатура КАК Номенклатура,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦен,
		|	ВТ_ЦеныСрез.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_кеги.Номенклатура,
		|	ВТ_кеги.ВидЦен,
		|	ВТ_кеги.Цена
		|ИЗ
		|	ВТ_кеги КАК ВТ_кеги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, ВТ_ЦеныСрез.Номенклатура) КАК Номенклатура,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура КАК НоменклатураБ,
		|	ВТ_ЦеныСрез.Номенклатура КАК НоменклатураСрез,
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, ВТ_ЦеныСрез.ВидЦен) КАК ВидЦены,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены КАК ВидЦеныБ,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦеныСрез,
		|	ВТ_ЦеныСрез.Цена ЕСТЬ NULL КАК Удалить
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_ЦеныСрез
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.аян_ОграничениеНоменклатурыПоВидуЦен КАК аян_ОграничениеНоменклатурыПоВидуЦен
		|		ПО ВТ_ЦеныСрез.Номенклатура = аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура
		|			И ВТ_ЦеныСрез.ВидЦен = аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены
		|ГДЕ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.Номенклатура, НЕОПРЕДЕЛЕНО)
		|	И ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО)";
	
КонецФункции 

Функция РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен(РежимОтладки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если РежимОтладки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	ОбъемТранзакции = 1000;
	
	ТекТранз = ОбъемТранзакции;
	Осч = 1;
	Сч = 1;
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Попытка
			
			Запись = РегистрыСведений.аян_ОграничениеНоменклатурыПоВидуЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Если ВДЗ.Удалить = Истина Тогда
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.Удалить();	
				КонецЕсли;
			Иначе	
				Запись.Записать();
			КонецЕсли;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
		
		Если Сч >= ТекТранз ИЛИ Осч = ВДЗ.Количество() Тогда //Последняя запись
			//Зафиксировать транзакцию
			ЗафиксироватьТранзакцию();
			
			Если Осч <> ВДЗ.Количество() Тогда //Если запись не последняя продолжаем
				ТекТранз = ОбъемТранзакции;
				Сч = 1;
				НачатьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		Осч = Осч + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область  Модули

&НаСервере
Функция КаталогХраненияТекущейОбработки()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ПолныйПутьКОбработке =  ЭтаОбработка.ИспользуемоеИмяФайла;
	КаталогХраненияТекущейОбработки = КаталогФайла(ПолныйПутьКОбработке, 2);
	
	Возврат КаталогХраненияТекущейОбработки;
	
КонецФункции 

#Область  Оду_Общий

//	КонфигурацияКонвертацииОбмена
//	ПОДИзФайла
//	ПутьКПОД
//	ПОДИзОбработкиБСП
//	ОбработкаОтладкиБСП
//	ПОД
//	РежимОтладки
Функция оду_Общий_ПараметрыКонвертацииОбъекта()  Экспорт
	
	ПараметрыКонвертации = Новый Структура();
	ПараметрыКонвертации.Вставить("УО");  //Участник обмена  С.оду_БазыУчастникиОбмена
	ПараметрыКонвертации.Вставить("ДанныеОбмена");
	ПараметрыКонвертации.Вставить("ОбъектОбмена");
	ПараметрыКонвертации.Вставить("КонфигурацияКонвертацииОбмена", Неопределено);
	ПараметрыКонвертации.Вставить("РежимОтладки", Ложь);
	ПараметрыКонвертации.Вставить("ПОДИзФайла", Ложь);
	ПараметрыКонвертации.Вставить("ПутьКПОД", "");
	ПараметрыКонвертации.Вставить("ПОДИзОбработкиБСП", Ложь);
	ПараметрыКонвертации.Вставить("ИспользоватьОбработкуБСП", Ложь);
	ПараметрыКонвертации.Вставить("ОбработкаОтладкиБСП", Неопределено);
	ПараметрыКонвертации.Вставить("ИспользоватьНастройкиКонвертации", Ложь);
	ПараметрыКонвертации.Вставить("ВыгрузкаБезПроверкиРегистрации", Ложь);  //TODO:  Доделать проверку при выгрузке, когда выгрузка происходит сразу - чз обработку, без регистрации
	
	ПараметрыКонвертации.Вставить("НастройкаКонвертации", Неопределено); 
	ПараметрыКонвертации.Вставить("ВерсияКонфигурации", ""); 
	
	ПараметрыКонвертации.Вставить("ПОД", "");
	ПараметрыКонвертации.Вставить("ПутьКОбработкеОтладки", "");
	ПараметрыКонвертации.Вставить("ПутьКФайлуОбмена", "");
	ПараметрыКонвертации.Вставить("ТипХраненияФайла", "");
	ПараметрыКонвертации.Вставить("РежимОбмена", "");
	ПараметрыКонвертации.Вставить("ИмяПВД", "");
	ПараметрыКонвертации.Вставить("ЭтапЗапроса", 0);
	
	//Доп настраиваемые поля
	ПараметрыКонвертации.Вставить("ИДБазыИсточник", ""); // Для обратной связи
	ПараметрыКонвертации.Вставить("ИДБазыПриемник", ""); // Для обратной связи 
	ПараметрыКонвертации.Вставить("РаспределятьПодчиненнымУО", ЛОжь);  //Признак распределения подчиненным УО
	ПараметрыКонвертации.Вставить("МассивУО", Неопределено);  //МассивУО - которым будут распределяться выгрузка
	ПараметрыКонвертации.Вставить("ДополнительныеСвойстваОбъекта", ""); //
	
	ПараметрыКонвертации.Вставить("ОтборыОбмена", "");
	
	Возврат  ПараметрыКонвертации;
	
КонецФункции 

Функция КаталогФайлаОбмена(НастройкиТекущейБД, ИмяКаталогаПриемника)  Экспорт
	
	КаталогОбмена = НастройкиТекущейБД.КаталогОбмена;
	Если ЗначениеЗаполнено(КаталогОбмена)  Тогда
		//ПолныйПутьККаталогу = КаталогОбмена + "\" + НастройкиТекущейБД.КодБазыДанных + "_" + ИмяБазыПриемника;
		ПолныйПутьККаталогу = КаталогОбмена + "\" + НастройкиТекущейБД.ИмяКаталогаОбмена + "_vs_" + ИмяКаталогаПриемника;
		КаталогСуществует = пр_Общий.КаталогСуществует(ПолныйПутьККаталогу);
		Если КаталогСуществует = Ложь Тогда
			ПолныйПутьККаталогу = ""; //По умолчанию	
		КонецЕсли; 
	Иначе
		ПолныйПутьККаталогу = ""; //По умолчанию	
	КонецЕсли; 
	
	Возврат  ПолныйПутьККаталогу;
	
КонецФункции 

Функция ИмяФайлаОбмена(НастройкиТекущейБД, ИмяКаталогаПриемника, НомерСообщения = "", ВерсияКонфигурации = "")  Экспорт
	
	Если ВыгрузитьЧЗФайл = Истина Тогда
		ПолныйПутьККаталогу = КаталогХраненияФайловОбработки + "\ДанныеОбмена";
	Иначе
		ПолныйПутьККаталогу = КаталогФайлаОбмена(НастройкиТекущейБД, ИмяКаталогаПриемника);
	КонецЕсли; 
	
	ИмяФайлаОбмена = ИмяФайлаОбменаПоПутиКаталога(ПолныйПутьККаталогу, НомерСообщения, ВерсияКонфигурации);
	
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 


Функция ИмяФайлаОбменаПоПутиКаталога(ПолныйПутьККаталогу, НомерСообщения = "", ВерсияКонфигурации = "")  Экспорт
	
	ИмяФайлаОбмена = "";
	Если ЗначениеЗаполнено(ПолныйПутьККаталогу)  Тогда
		
		Если ИмяФайлаИзСтроки = Истина И ЗначениеЗаполнено(ИмяФайла)  Тогда
			ИмяФайлаОбмена = СтрШаблон("%1\%2", ПолныйПутьККаталогу, ИмяФайла);
		Иначе	
			Если НомерСообщения = "" Тогда
				Если ИмяФайлаПоВремени = Истина Тогда
					ДобавочноеПоле = СтрЗаменить(Строка(ТекущаяДатаСеанса()),".", "");
					ДобавочноеПоле = СтрЗаменить(ДобавочноеПоле,":", "");
				КонецЕсли; 
			Иначе
				ДобавочноеПоле = НомерСообщения;
			КонецЕсли; 
			
			Если ВерсияКонфигурации = "" Тогда
				ТекстВерсии = ВерсияКонфигурации;
			Иначе
				МВерсии = СтрРазделить(ВерсияКонфигурации, ".");
				ТекстВерсии = СтрСоединить(МВерсии, "_");
			КонецЕсли; 
			
			ИмяФайлаОбмена = СтрШаблон("%1\UOD %2 %3", ПолныйПутьККаталогу, ТекстВерсии, ДобавочноеПоле);// + " " + пр_Общий.СгенерироватьСлучайныйТекст(3);
			
		КонецЕсли; 
		
		Возврат  ИмяФайлаОбмена;
		
	КонецЕсли; 
	
	ИмяФайлаОбмена = КаталогВременныхФайлов(); //По умолчанию			
	
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 



&НаСервере
Функция ТекстЗапросаРаспределения()
	Возврат
		"ВЫБРАТЬ
		|	ТЗ.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ.РежимОбмена КАК РежимОбмена,
		|	ТЗ.СостояниеОбмена КАК СостояниеОбмена,
		|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ТЗ.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ТЗ.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ТЗ.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ТЗ.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ТЗ.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ТЗ.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта
		|ПОМЕСТИТЬ ВТ_НачДанные
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК ТЗ
		|ГДЕ
		|	ТЗ.ИДБазыИсточник = ТЗ.ИДБазыПриемник
		|	И ТЗ.ИДБазыПриемник = &ИДБазыИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена КАК ИмяКаталогаОбмена,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы
		|ПОМЕСТИТЬ ВТ_БазыПолучатели
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачДанные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_НачДанные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_БазыПолучатели.ИДБазы КАК ИДБазыПриемник,
		|	ВТ_НачДанные.РежимОбмена КАК РежимОбмена,
		|	ВТ_НачДанные.СостояниеОбмена КАК СостояниеОбмена,
		|	ВТ_НачДанные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_НачДанные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_НачДанные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_НачДанные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_НачДанные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_НачДанные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_НачДанные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_НачДанные.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ВТ_НачДанные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_НачДанные.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта,
		|	ВТ_БазыПолучатели.ИмяКаталогаОбмена КАК ИмяКаталогаПриемника,
		|	ВТ_БазыПолучатели.Код КАК Код
		|ИЗ
		|	ВТ_БазыПолучатели КАК ВТ_БазыПолучатели,
		|	ВТ_НачДанные КАК ВТ_НачДанные
		|ИТОГИ ПО
		|	ИмяФайлаОбмена,
		|	ИмяКаталогаПриемника";

КонецФункции

&НаСервере
Функция РезульататРаспределенияВыгрузкиИзПланаОбменаНаСервере()   
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД(); 
	
	Запрос = Новый Запрос;
	//Запрос.Текст = ТекстЗапросаРаспределенияПоПодчиненнымУОПослеВыгрузки(); 
	Запрос.Текст = ТекстЗапросаРаспределения();  
	Запрос.УстановитьПараметр("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;	
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Попытка
		
		//|	оду_НастройкиУчастниковОбмена.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.Код + "" - "" + оду_НастройкиУчастниковОбмена.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.ИДБазы + "")"" КАК ПредставлениеИсточника,
		ПредставлениеИсточника = НастройкиТекущейБД.ПредставлениеТекущейБД;
		
		РезультатРаспределенияПоПодчиненнымУО =  РезультатРаспределенияДанныхОбменаПоПодчиненнымУОИзРезультатаЗапроса(РезультатЗапроса, НастройкиТекущейБД, ПредставлениеИсточника);
		
		Если РезультатРаспределенияПоПодчиненнымУО = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезульататРаспределенияВыгрузкиИзПланаОбменаНаСервере", , пр_Ошибка, ПредставлениеИсточника);	
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки; 
	
	ЗафиксироватьТранзакцию();
	
КонецФункции      

&НаСервере
Процедура РаспределитьПодчиненнымПоИмениФайлаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_СостояниеОбъектовОбмена.ДанныеОбмена КАК ДанныеОбмена,
		|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
		|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
		|	оду_СостояниеОбъектовОбмена.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
		|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
		|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	оду_СостояниеОбъектовОбмена.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	оду_СостояниеОбъектовОбмена.НомерПопытки КАК НомерПопытки,
		|	оду_СостояниеОбъектовОбмена.ОписаниеОшибки КАК ОписаниеОшибки,
		|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбмена КАК ПриоритетОбмена,
		|	оду_СостояниеОбъектовОбмена.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	оду_СостояниеОбъектовОбмена.РежимОбмена КАК РежимОбмена,
		|	оду_СостояниеОбъектовОбмена.РежимОтладки КАК РежимОтладки,
		|	оду_СостояниеОбъектовОбмена.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	оду_СостояниеОбъектовОбмена.СостояниеОбмена КАК СостояниеОбмена,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	оду_СостояниеОбъектовОбмена.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	оду_СостояниеОбъектовОбмена.ЭтоУдалениеОбъекта КАК ЭтоУдалениеОбъекта
		|ИЗ
		|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
		|ГДЕ
		|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена = &ИмяФайлаОбмена";
	
	Запрос.УстановитьПараметр("ИмяФайлаОбмена", ПутьКФайлуОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыКонвертации = Неопределено;
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена(Неопределено, ПараметрыКонвертации, , , ПутьКФайлуОбмена, );
	Иначе
		ТаблицаДляЗаписи = РезультатЗапроса.Выгрузить();
	КонецЕсли; 
	
	Если РаспределятьПодчиненнымУО = Истина  Тогда    
		МассивЗагруженныхФайловОбмена = Неопределено;   
		МассивУО = Неопределено;  
		РезультатРаспределения = РезультатРаспределенияПоПодчиненнымУО(ТаблицаДляЗаписи, МассивЗагруженныхФайловОбмена, МассивУО);			
		Если  РезультатРаспределения = Истина Тогда   
			РезультатОчисткиЗаписей = РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, , РаспределятьПодчиненнымУО);
		КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры


Функция РезультатРаспределенияДанныхОбменаПоПодчиненнымУОИзРезультатаЗапроса(РезультатЗапроса, НастройкиТекущейБД, ПредставлениеИсточника)
	
	ВыборкаИмяФайлаОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИмяФайлаОбмена.Следующий() Цикл
		
		ВыборкаИмяКаталогаОбмена = ВыборкаИмяФайлаОбмена.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИмяКаталогаОбмена.Следующий() Цикл
			
			КаталогОбмена = оду_Общий.КаталогФайлаОбмена(НастройкиТекущейБД, ВыборкаИмяКаталогаОбмена.ИмяКаталогаПриемника);
			ИмяФайлаПриемника = ИмяФайлаПриемникаДляПодчиненноУО(ВыборкаИмяКаталогаОбмена.ИмяФайлаОбмена, КаталогОбмена, ПредставлениеИсточника);
			
			Если ИмяФайлаПриемника = Неопределено Тогда
				Возврат Ложь;	
			КонецЕсли;
			
			ВДЗ = ВыборкаИмяКаталогаОбмена.Выбрать();
			
			Пока ВДЗ.Следующий() Цикл   
				
				Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.ИмяФайлаОбмена = ИмяФайлаПриемника;
				
				Запись.Записать(); 
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецФункции



Функция ИмяФайлаПриемникаДляПодчиненноУО(ИмяТекущегоФайлаОбмена, КаталогаОбменаПриемник, ПредставлениеИсточника) 
	
	Попытка
		
		ИмяФайла = Сред(ИмяТекущегоФайлаОбмена, СтрНайти(ИмяТекущегоФайлаОбмена, "\", НаправлениеПоиска.СКонца)); 
		ИмяФайлаПриемника = КаталогаОбменаПриемник + ИмяФайла; 
		КопироватьФайл(ИмяТекущегоФайлаОбмена, ИмяФайлаПриемника);	
		
		Возврат ИмяФайлаПриемника;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезультатКопированияФайлаОбменаДляПодчиненноУО", , пр_Ошибка, ПредставлениеИсточника);	
		Возврат Неопределено;
	КонецПопытки;  
	
КонецФункции


//ВыборкаУО
//	КонфигурацияКонвертацииОбмена
//	ПОДИзФайла
//  ПутьКПОД
//	ПОДИзОбработкиБСП
//	ОбработкаОтладкиБСП
//	ПОД
//	РежимОтладки
Функция ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена = Неопределено, СоответвиеПараметровВыгрузки = Неопределено, 
										ПутьКФайлуОбмена, ОбработкаОбменаДанных = Неопределено, ПараметрыКонвертации)    Экспорт 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", ТекущийПользователь); 
	Результат = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, 
										ПутьКФайлуОбмена, ОбработкаОбменаДанных, ПараметрыКонвертации, ВыгрузитьЧЗФайл);
	Возврат  Результат;
	
КонецФункции


//TODO:  проверить
Функция ЗаполнитьДанныеОбработкиОбмена(ОбработкаОбменаДанных, ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПараметрыКонвертации)
	
	Если ТаблицаСостоянийОбмена <> Неопределено Тогда
		
		Если ОбработкаОбменаДанных.Данные = Неопределено Тогда
			СтруктураДанных = Новый Структура();
		Иначе
			СтруктураДанных = ОбработкаОбменаДанных.Данные;
		КонецЕсли; 
		
		СтруктураДанных.Вставить("СоответвиеПараметровВыгрузки", СоответвиеПараметровВыгрузки); 
		СтруктураДанных.Вставить("ТаблицаСостоянийОбмена", ТаблицаСостоянийОбмена); 
		//СтруктураДанных.Вставить("ОтборыОбмена", ПараметрыКонвертации.ОтборыОбмена); 
		
		ОбработкаОбменаДанных.Данные = СтруктураДанных;
		
	КонецЕсли; 
	
	Возврат  СтруктураДанных;
	
КонецФункции

Процедура ЗаполнитьНастройкиОбменаДанных(ОбработкаОбменаДанных, ПараметрыКонвертации)
	
	Для каждого Стр Из ОбработкаОбменаДанных.ТаблицаНастройкиПараметров Цикл
		
		Если Стр.ПередаватьПараметрПриВыгрузке = Ложь Тогда
			Продолжить;
		КонецЕсли; 
		
		//Если выгрузка осуществляется из обработки, по запросыСсылки найти Источника
		// Если использовать мх распределения - то не должен заполняться
		Если ПараметрыКонвертации.РаспределятьПодчиненнымУО = Ложь Тогда
			Если Стр.Имя = "оду_СтруктураУО" Тогда 
				оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник", ПараметрыКонвертации.ИДБазыИсточник, ПараметрыКонвертации.ИДБазыПриемник); 
				Стр.Значение = ЗначениеВСтрокуВнутр(оду_СтруктураУО);
			КонецЕсли;			
		КонецЕсли; 
		
		Если Стр.Имя = "оду_ДополнительныеСвойстваОбъекта" ИЛИ Стр.Имя = "оду_ДополнительныеСвойстваОбъектаПриемник" Тогда
			Если ПараметрыКонвертации.Свойство("ДополнительныеСвойстваОбъекта") Тогда
				Стр.Значение = ПараметрыКонвертации.ДополнительныеСвойстваОбъекта;
			КонецЕсли;
		КонецЕсли; 	 
		
		Если Стр.Имя = "оду_ОтборыОбмена" Тогда 
			Если ПараметрыКонвертации.Свойство("ОтборыОбмена") Тогда
				Стр.Значение = ПараметрыКонвертации.ОтборыОбмена;
			КонецЕсли;
		КонецЕсли; 	 
		
	КонецЦикла; 
	
КонецПроцедуры
 

Процедура ДоработатьОбработкаОбменаДанных(ОбработкаОбменаДанных, ПараметрыКонвертации)
 
	//TODO:  
	//Доделать 
	МассивПравилВыгрузки = Новый Массив();
	
	ИмяПВД = ?(ПараметрыКонвертации.ИмяПВД = "", "УниверсальноеПВД", ПараметрыКонвертации.ИмяПВД);
	
	Если ЗначениеЗаполнено(ИмяПВД)  Тогда
		
		ИзменитьДеревоПравилВыгрузки(ОбработкаОбменаДанных.ТаблицаПравилВыгрузки.Строки, , ИмяПВД, МассивПравилВыгрузки);
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("ТекущаяСтрокаПравилаВыгрузки", МассивПравилВыгрузки[0]);
		
		Если ИмяПВД = "УниверсальноеПВД" Тогда
			
			//Передается массив структур (ИмяТипаСсылки и Массив по этому типу)
			ОбработкаОбменаДанных.Комментарий = "оду_ВыгрузкаИзРегистрации";
			
			СтруктураДанных.Вставить("СоответвиеПараметровВыгрузки", Неопределено);
			СтруктураДанных.Вставить("ТаблицаСостоянийОбмена", Неопределено);
			
		ИначеЕсли ИмяПВД = "ВыгрузкаДанныхИзПланаОбмена" Тогда
			ОбработкаОбменаДанных.Комментарий = "оду_ВыгрузкаДанныхИзПланаОбмена";
		КонецЕсли;
			
		ОбработкаОбменаДанных.Данные = СтруктураДанных;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, РодительПВД = "", ИмяПВД, МассивПравилВыгрузки)
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		Если СтрокаИсходногоДерева.Имя = РодительПВД Тогда
			СтрокаИсходногоДерева.Включить = 2;
		ИначеЕсли  СтрокаИсходногоДерева.Имя = ИмяПВД Тогда	
			СтрокаИсходногоДерева.Включить = 1;
			МассивПравилВыгрузки.Добавить(СтрокаИсходногоДерева);
		Иначе 
			СтрокаИсходногоДерева.Включить = 0;
		КонецЕсли;
		
		Если СтрокаИсходногоДерева.Строки.Количество() > 0 Тогда
			ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, РодительПВД, ИмяПВД, МассивПравилВыгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



Функция ЗаписатьСостоянияПослеВыгрузкиОбъектов(ТаблицаСостоянийОбмена, ВыгруженоБезОшибок, РаспределятьПодчиненнымУО = Ложь, МассивУО = Неопределено, КоличествоВыгруженныхОбъектов = Неопределено)
	
	ПустаяВыгрузка = КоличествоВыгруженныхОбъектов = 0;
	
	Если ВыгруженоБезОшибок = Истина Тогда
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена;
	Иначе	
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("Обработан", Истина));
	КонецЕсли; 	
	
	Если ТаблицаДляЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
		
	НачатьТранзакцию();
	
	Попытка
	
		//TODO: Подумать, без имени файла не найти на удаление
		Если ВыгруженоБезОшибок = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДляЗаписи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
		КонецЕсли;  
		
		Если ПустаяВыгрузка = Истина Тогда
			МассивЗагруженныхФайловОбмена = Новый Массив;
			ВыгруженоБезОшибок = Ложь;
		КонецЕсли;
		
		Для каждого Стр Из ТаблицаДляЗаписи Цикл
			
			Если ПустаяВыгрузка = Истина Тогда
				МассивЗагруженныхФайловОбмена.Добавить(Стр.ИмяФайлаОбмена);	
			Иначе
				Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
				Если ВыгруженоБезОшибок = Истина Тогда
					Стр.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
				Иначе 
					Стр.ИмяФайлаОбмена = ""; //Проверить
				КонецЕсли;  
				
				ЗаполнитьЗначенияСвойств(Запись, Стр);
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла; 
		
		Если РаспределятьПодчиненнымУО = Истина И ВыгруженоБезОшибок = Истина Тогда    
			МассивЗагруженныхФайловОбмена = Неопределено; 
			РезультатРаспределения = РезультатРаспределенияПоПодчиненнымУО(ТаблицаДляЗаписи, МассивЗагруженныхФайловОбмена, МассивУО);			
			Если  РезультатРаспределения = Ложь Тогда   
				ВызватьИсключение "Не удалась распределенить объекты обмена подчиненным УО";	
			КонецЕсли;
		Иначе 
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если  ПустаяВыгрузка = Истина ИЛИ (РезультатРаспределения = Истина И ВыгруженоБезОшибок = Истина) Тогда   
			РезультатОчисткиЗаписей = РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, , РаспределятьПодчиненнымУО);
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		ОписаниеОшибки = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ЗаписатьСостоянияПослеВыгрузкиОбъектов", , ОписаниеОшибки);	
	КонецПопытки;
	
КонецФункции 



Функция ТекстЗапросаРаспределенияПоПодчиненнымУОПослеВыгрузки()
	Возврат
		"ВЫБРАТЬ
		|	ТЗ.ИДОбъекта КАК ИДОбъекта,
		|	ТЗ.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ТЗ.ИДБазыПриемник КАК ИДБазыПриемник,
		|	ТЗ.РежимОбмена КАК РежимОбмена,
		|	ТЗ.СостояниеОбмена КАК СостояниеОбмена,
		|	ТЗ.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ТЗ.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ТЗ.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ТЗ.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ТЗ.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ТЗ.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ТЗ.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ТЗ.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ТЗ.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ТЗ.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта
		|ПОМЕСТИТЬ ВТ_НачДанные
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена КАК ИмяКаталогаОбмена,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы
		|ПОМЕСТИТЬ ВТ_БазыПолучатели
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА 
		|	#ОтборМассивУО 
		//|	И оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных = ИСТИНА
		//|	И оду_БазыУчастникиОбмена.ИДБазы <> &ИДБазы
		//|	И оду_БазыУчастникиОбмена.ТекущаяБД = Истина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НачДанные.ИДОбъекта КАК ИДОбъекта,
		|	ВТ_НачДанные.ИДБазыИсточник КАК ИДБазыИсточник,
		|	ВТ_БазыПолучатели.ИДБазы КАК ИДБазыПриемник,
		|	ВТ_НачДанные.РежимОбмена КАК РежимОбмена,
		|	ВТ_НачДанные.СостояниеОбмена КАК СостояниеОбмена,
		|	ВТ_НачДанные.ТипXMLОбъектаИсточника КАК ТипXMLОбъектаИсточника,
		|	ВТ_НачДанные.ТипXMLОбъектаПриемника КАК ТипXMLОбъектаПриемника,
		|	ВТ_НачДанные.ДатаВыгрузки КАК ДатаВыгрузки,
		|	ВТ_НачДанные.ИмяФайлаОбмена КАК ИмяФайлаОбмена,
		|	ВТ_НачДанные.ПриоритетОбмена КАК ПриоритетОбмена,
		|	ВТ_НачДанные.ПриоритетОбъекта КАК ПриоритетОбъекта,
		|	ВТ_НачДанные.ПриоритетДопПризнака КАК ПриоритетДопПризнака,
		|	ВТ_НачДанные.СменаИсточникаПриеменикаПриРазрешенииКоллизий КАК СменаИсточникаПриеменикаПриРазрешенииКоллизий,
		|	ВТ_НачДанные.КонфигурацияКонвертацииОбмена КАК КонфигурацияКонвертацииОбмена,
		|	ВТ_НачДанные.ДополнительныеСвойстваОбъекта КАК ДополнительныеСвойстваОбъекта,
		|	ВТ_БазыПолучатели.ИмяКаталогаОбмена КАК ИмяКаталогаПриемника,
		|	ВТ_БазыПолучатели.Код КАК Код
		|ИЗ
		|	ВТ_БазыПолучатели КАК ВТ_БазыПолучатели,
		|	ВТ_НачДанные КАК ВТ_НачДанные
		|ИТОГИ ПО
		|	ИмяФайлаОбмена,
		|	ИмяКаталогаПриемника";

КонецФункции

Функция РезультатРаспределенияПоПодчиненнымУО(ТЗ, МассивЗагруженныхФайловОбмена = Неопределено, МассивУО = Неопределено)   Экспорт
	
	Попытка
		
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		Запрос = Новый Запрос;
		ЗапросТекст = ТекстЗапросаРаспределенияПоПодчиненнымУОПослеВыгрузки(); 
		
		ОтборМассивУО = ""; 
		Если МассивУО <> Неопределено Тогда      
			ОтборМассивУО = "
			|	И оду_БазыУчастникиОбмена.Ссылка В (&МассивУО)"; 
			Запрос.УстановитьПараметр("МассивУО", МассивУО);   
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(ЗапросТекст, "#ОтборМассивУО", ОтборМассивУО);	
		
		//Запрос.УстановитьПараметр("ИДБазы", ИДБазыПриемника);
		Запрос.УстановитьПараметр("ТЗ", ТЗ);   
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;	
		КонецЕсли; 
		
		//|	оду_НастройкиУчастниковОбмена.Сервер + "" : "" + оду_НастройкиУчастниковОбмена.Код + "" - "" + оду_НастройкиУчастниковОбмена.ИДКонфигурации + "" ("" + оду_НастройкиУчастниковОбмена.ИДБазы + "")"" КАК ПредставлениеИсточника,
      	ПредставлениеИсточника = НастройкиТекущейБД.ПредставлениеТекущейБД;
		Возврат оду_Общий.РезультатРаспределенияДанныхОбменаПоПодчиненнымУОИзРезультатаЗапроса(РезультатЗапроса, НастройкиТекущейБД, ПредставлениеИсточника, МассивЗагруженныхФайловОбмена);
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезультатРаспределенияДанныхОбменаПоПодчиненнымУО", , пр_Ошибка, ПредставлениеИсточника);	
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции


//TODO:  переделать установить блокировку на записи после выполнения запроса
//Если ЭтоПриемник = Истина - значит последняя очистка 
//Дополнительно удаляем записи с регистрации и файлВыгрузки
//У источника удаляем по дате выгрузки и дате регистрации
Функция РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла(МассивЗагруженныхФайловОбмена, ЭтоПриемник = Ложь, РаспределятьПодчиненнымУО = Ложь)
	
	Попытка
		
		НачатьТранзакцию();
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	оду_СостояниеОбъектовОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
			|	оду_СостояниеОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник,
			|	оду_СостояниеОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_СостояниеОбъектовОбмена.ДатаВыгрузки КАК ДатаВыгрузки,
			|	оду_СостояниеОбъектовОбмена.ДатаРегистрации КАК ДатаРегистрации,
			|	оду_СостояниеОбъектовОбмена.ПриоритетДопПризнака КАК НомерСообщенияОбмена
			|ПОМЕСТИТЬ ВТ_ДанныеСостояний
			|ИЗ
			|	РегистрСведений.оду_СостояниеОбъектовОбмена КАК оду_СостояниеОбъектовОбмена
			|ГДЕ
			|	оду_СостояниеОбъектовОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
			|	#ОтборОтложеннногоПроведения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ Различные
			|	оду_ОшибкиОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_ОшибкиОбмена.ИДБазыИсточник КАК ИДБазыИсточник,
			|	оду_ОшибкиОбмена.ИДБазыПриемник КАК ИДБазыПриемник
			|ИЗ
			|	РегистрСведений.оду_ОшибкиОбмена КАК оду_ОшибкиОбмена
			|ГДЕ
			|	оду_ОшибкиОбмена.ИмяФайлаОбмена В(&МассивЗагруженныхФайловОбмена)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	оду_РегистрацияОбъектовОбмена.ИДОбъекта КАК ИДОбъекта,
			|	оду_РегистрацияОбъектовОбмена.ИДБазыПриемник КАК ИДБазыПриемник
			|ИЗ
			|	ВТ_ДанныеСостояний КАК ВТ_ДанныеСостояний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.оду_РегистрацияОбъектовОбмена КАК оду_РегистрацияОбъектовОбмена
			|		ПО  ВТ_ДанныеСостояний.ИДОбъекта = оду_РегистрацияОбъектовОбмена.ИДОбъекта
			|ГДЕ Истина
			|";
		
		ОтборОтложеннногоПроведения = "";
		Если ЭтоПриемник = Ложь Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|			И ВТ_ДанныеСостояний.ИДБазыПриемник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник
			|			И (ВТ_ДанныеСостояний.ДатаВыгрузки >= оду_РегистрацияОбъектовОбмена.ДатаРегистрации)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|			И ВТ_ДанныеСостояний.ИДБазыИсточник = оду_РегистрацияОбъектовОбмена.ИДБазыПриемник";
			
			ОтборОтложеннногоПроведения = "И оду_СостояниеОбъектовОбмена.СостояниеОбмена <> &СостояниеОбменаОтложенноеПроведение";
			Запрос.УстановитьПараметр("СостояниеОбменаОтложенноеПроведение", оду_ОбщийПовтИсп.СостояниеОтложенноеПроведение());
		КонецЕсли; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборОтложеннногоПроведения", ОтборОтложеннногоПроведения); 
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("МассивЗагруженныхФайловОбмена", МассивЗагруженныхФайловОбмена);
		
		ПакетЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		ЗапросСостояний = ПакетЗапроса[0];
		ЗапросОшибок = ПакетЗапроса[1];
		
		//Если ЭтоПриемник = Истина Тогда
			ЗапросРегистраций = ПакетЗапроса[2];
		//КонецЕсли; 
				
		ВДЗ = ЗапросСостояний.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросСостояний;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			
			Пока ВДЗ.Следующий() Цикл
				Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.Прочитать();
				Запись.Удалить();
			КонецЦикла;
			
			//Удаляем регистрацию из Плана обмена
			Если Лев(ВДЗ.ИДОбъекта, 4) = "UOD_" И ЭтоПриемник = Ложь Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	оду_БазыУчастникиОбмена.ПланОбмена КАК оду_УзелПланаОбмена
					|ИЗ
					|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
					|ГДЕ
					|	оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
					|	И оду_БазыУчастникиОбмена.ИДБазы = &ИДБазы";
				
				Запрос.УстановитьПараметр("ИДБазы", ВДЗ.ИДБазыПриемник);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаУзла = РезультатЗапроса.Выбрать();
				
				Если ВыборкаУзла.Следующий() Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзла.оду_УзелПланаОбмена, ВДЗ.НомерСообщенияОбмена);		
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
		ВДЗ = ЗапросОшибок.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_ОшибкиОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросОшибок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			
			Пока ВДЗ.Следующий() Цикл
				оду_Общий.РезультатЗаписиОшибкиОбмена(ВДЗ, Истина,, НЕ ЭтоПриемник);
			КонецЦикла;
			
		КонецЕсли; 
		
		ВДЗ = ЗапросРегистраций.Выбрать();
		Если ВДЗ.Количество() > 0 Тогда
			
			//Если ЭтоПриемник = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_РегистрацияОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ЗапросРегистраций;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
			//КонецЕсли; 
			
			//Если ЭтоПриемник = Истина Тогда
			Пока ВДЗ.Следующий() Цикл
				Запись = РегистрыСведений.оду_РегистрацияОбъектовОбмена.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
				Запись.Прочитать();
				Запись.Удалить();
			КонецЦикла;
			//КонецЕсли; 
			
		КонецЕсли; 
		
		Если ЭтоПриемник = Истина ИЛИ РаспределятьПодчиненнымУО = Истина Тогда
			оду_Общий.РезультатОчисткиФайловОбмена(МассивЗагруженныхФайловОбмена);
			//Для каждого ПутьКФайлу Из МассивЗагруженныхФайловОбмена Цикл
			//	УдалитьФайлы(ПутьКФайлу);
			//КонецЦикла; 
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
		Возврат  Истина;
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезультатОчисткиЗаписейПослеЗагрузкиПоИмениФайла", , ОписаниеОшибки);	
		Возврат  Ложь;
	КонецПопытки;

КонецФункции 

&НаКлиенте
Процедура ВыгрузитьМассивОбъектовОбмена(Команда)
	ВыгрузитьМассивОбъектовОбменаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьМассивОбъектовОбменаНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры





#КонецОбласти


#Область  пр_общий

//Функция Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ПутьККаталогу  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Функция РезультатПодготовкиПутиКФайлу(ПолныйПутьКФайлу, СтруктураПутиФайла = Неопределено) Экспорт
	
	Попытка
		
		Если СтруктураПутиФайла = Неопределено Тогда
			СтруктураПутиФайла = СтруктураПутиФайла(ПолныйПутьКФайлу);
		КонецЕсли; 
		
		ПутьККаталогу = СтруктураПутиФайла.КаталогФайла;
		СоздатьКаталог(ПутьККаталогу);
		
		Возврат Истина;
		
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

&НаСервере
Функция СтруктураПутиФайла(ПолныйПутьФайла)  Экспорт
	
	СтруктураПутиФайла = Новый Структура();
	
	ДлинаРазделенияФайла = СтрНайти(ПолныйПутьФайла, "\", НаправлениеПоиска.СКонца) - 1;
	СтруктураПутиФайла.Вставить("КаталогФайла", Лев(ПолныйПутьФайла, ДлинаРазделенияФайла));
	СтруктураПутиФайла.Вставить("ПолноеИмяФайла", Прав(ПолныйПутьФайла, СтрДлина(ПолныйПутьФайла) - ДлинаРазделенияФайла - 1));
	
	МассивПутиФайла = СтрРазделить(СтруктураПутиФайла.ПолноеИмяФайла, ".", Ложь);
	
	СтруктураПутиФайла.Вставить("ИмяФайла", МассивПутиФайла[0]);
	СтруктураПутиФайла.Вставить("РасширениеФайла", МассивПутиФайла[1]);
	
	Возврат  СтруктураПутиФайла;
	
КонецФункции 

Функция КаталогФайла(ПолныйПутьФайла, НомерВхождения = 1)  Экспорт
	
	КаталогФайла = Лев(ПолныйПутьФайла, СтрНайти(ПолныйПутьФайла, "\", НаправлениеПоиска.СКонца,, НомерВхождения) - 1);
	Возврат	КаталогФайла;
	
КонецФункции 

Функция ЗафиксироватьОшибку(Метод = "", пр_Ошибка = "", ОтправлятьВТелеграмм = Истина, ПоказатьОшибку = Истина, Объект1С = "",  Данные = Неопределено, ДопИнформация = "")  Экспорт
	
	Если пр_Ошибка <> "" И ПоказатьОшибку = Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
	Если ОтправлятьВТелеграмм = Истина Тогда
		//ОтправитьСообщениеВТелеграмExchange(Метод, Объект1С, пр_Ошибка, БазаУО, Версия, Данные, ДопИнформация);
	КонецЕсли; 
	
КонецФункции 


Функция ИсполняемыйМодульКаталога(Каталог, ИмяМодуля, Пользователь = Неопределено)   Экспорт 
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИмяМодуля) Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Каталог) Тогда
			Возврат пр_Общий.ИсполняемыйМодуль(ИмяМодуля, Пользователь);	
		КонецЕсли; 
		
		ПутьКОбработкеОтладки = ?(Прав(Каталог,1) = "\", Каталог, Каталог + "\") + ИмяМодуля + ".epf";
		ИсполняемыйМодуль = пр_Общий.ПолучитьВнешнююОбработкуПоПути(ПутьКОбработкеОтладки);	
		
		Если ИсполняемыйМодуль = Неопределено Тогда
			Возврат пр_Общий.ИсполняемыйМодуль(ИмяМодуля, Пользователь);	
		КонецЕсли; 
		
		Возврат ИсполняемыйМодуль;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		ЗафиксироватьОшибку("ИсполняемыйМодульКаталога", пр_Ошибка);
	КонецПопытки; 
	
КонецФункции  

#КонецОбласти

#Область  пр_Клиент

&НаКлиенте
Функция ИсполняемыйМодульКаталогаКлиент(Каталог, ИмяМодуля, ИмяОбработки = "", ИмяВнешенйФормы = "Форма", ПарамФормы = Неопределено, Пользователь = Неопределено, ФормаВладелец = Неопределено)   Экспорт 
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИмяМодуля) Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Каталог) Тогда
			Возврат пр_Клиент.ИсполняемыйМодуль(ИмяМодуля, ИмяВнешенйФормы, Пользователь, ФормаВладелец);	
		КонецЕсли; 
		
		ПутьКОбработкеОтладки = ?(Прав(Каталог,1) = "\", Каталог, Каталог + "\") + ИмяМодуля + ".epf";
		ИсполняемыйМодуль = пр_Клиент.ПолучитьФормуПоПути(ПутьКОбработкеОтладки, ИмяОбработки, ИмяВнешенйФормы, ПарамФормы, ФормаВладелец);		
		
		Если ИсполняемыйМодуль = Неопределено Тогда
			Возврат пр_Клиент.ИсполняемыйМодуль(ИмяМодуля, ИмяВнешенйФормы, Пользователь, ФормаВладелец);	
		КонецЕсли; 
		
		Возврат ИсполняемыйМодуль;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		ЗафиксироватьОшибку("ИсполняемыйМодульКаталога", пр_Ошибка);
	КонецПопытки; 
	
КонецФункции  

&НаКлиенте
Процедура ПеренестиОбъект(Команда)
	ПеренестиОбъект1СНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПеренестиОбъект1СНаСервере()
	
	ОбъектНаОтпарвку = Объект1С.ПолучитьОбъект();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	//ПолныйПутьКОбъекту1с = ПутьККаталогуJSON + "\" + ОбъектНаОтпарвку.Метаданные().Имя + ".json";
	ПутьККаталогуJSON = "\\192.168.100.11\core-sync\Обмен\Данные";
	ПолныйПутьКОбъекту1с = ПутьККаталогуJSON + "\Объект1С.json";
	ЗаписьJSON.ОткрытьФайл(ПолныйПутьКОбъекту1с);
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектНаОтпарвку, НазначениеТипаXML.Явное);
	
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьОбъект(Команда)
	ПрочитатьОбъектНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПрочитатьОбъектНаСервере()
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ПутьККаталогуJSON = "\\192.168.100.11\core-sync\Обмен\Данные";
	ПолныйПутьКОбъекту1с = ПутьККаталогуJSON + "\Объект1С.json";
	ЧтениеJSON.ОткрытьФайл(ПолныйПутьКОбъекту1с);
	
	ОбъектПолученный = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	ОбъектПолученный.ОбменДанными.Загрузка = Истина;
	
	Попытка
	
		ОбъектПолученный.Записать();
		Объект1С = ОбъектПолученный.Ссылка;
	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить(); 
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти
 

#КонецОбласти
 