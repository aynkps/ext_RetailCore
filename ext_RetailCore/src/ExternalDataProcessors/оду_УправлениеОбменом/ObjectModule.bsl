#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	//Номер задачи Текст задачи Исполнитель Дата
	ПараметрыРегистрации.Версия = "2024-01-26";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОбработки; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	//ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента");
	
	//ПараметрыРегистрации.Информация = "кпс_"; 
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОбработки;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	//СтрТаблицы.ПоказыватьОповещение = Истина;
	//СтрТаблицы.Модификатор = "ПечатьMXL";
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	РезультатВыполнения = РезультатВыгрузкиИзПланаОбмена();
	
КонецПроцедуры

Функция ТекстЗапросаПолученияПараметровПланаОбмена()     
	Возврат
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена КАК НастройкаКонвертации,
		|	оду_БазыУчастникиОбмена.Код КАК КодБазыДанных,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазыПриемник,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена КАК ИмяКаталогаОбмена,
		|	оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО КАК РаспределятьПодчиненнымУО,
		|	оду_БазыУчастникиОбмена.ПланОбмена КАК ПланОбмена,
		|	оду_БазыУчастникиОбмена.ТекущаяВерсияКонфигурации КАК ВерсияКонфигурации,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияЗагрузки
		|		ПО (ДополнительныеСведенияЗагрузки.Свойство.ИдентификаторДляФормул = ""ВремяЗагрузкиДанныхИзПланаОбмена"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияВыгрузки
		|		ПО (ДополнительныеСведенияВыгрузки.Свойство.ИдентификаторДляФормул = ""ВремяВыгрузкиДанныхИзПланаОбмена"")
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
		|	И ЕСТЬNULL(ДополнительныеСведенияЗагрузки.Значение, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ДополнительныеСведенияВыгрузки.Значение, ДАТАВРЕМЯ(1, 1, 1)) 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка,
		|	оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.Код,
		|	оду_БазыУчастникиОбмена.ИДБазы,
		|	оду_БазыУчастникиОбмена.ИмяКаталогаОбмена,
		|	оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО,
		|	оду_БазыУчастникиОбмена.ПланОбмена,
		|	оду_БазыУчастникиОбмена.ТекущаяВерсияКонфигурации,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.ПланОбмена <> ЗНАЧЕНИЕ(ПланОбмена.оду_ПланОбмена.ПустаяСсылка)
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ЛОЖЬ";

КонецФункции

Функция МассивПараметровКонвертацииПланаОбмена(НастройкиТекущейБД)
		
	ИмяПВД = "ВыгрузкаДанныхИзПланаОбмена";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияПараметровПланаОбмена();
	
	РЗ = Запрос.Выполнить();  
				 
	Если РЗ.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РЗ.Выбрать();
	
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	Если ВДЗ.Следующий() Тогда     
		
		УО = ВДЗ.УО;
									
		ПараметрыКонвертации = оду_Общий.ПараметрыКонвертацииОбъекта();
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, УО); 
		ПараметрыКонвертации.УО = УО;	
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ.НастройкаКонвертации);
		
		ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, ВДЗ, "НастройкаКонвертации, ИДБазыПриемник, ПланОбмена");
		ПараметрыКонвертации.Вставить("ИДБазыИсточник", НастройкиТекущейБД.ИДБазыИсточник);
		ПараметрыКонвертации.Вставить("КодБазыДанных", ВДЗ.КодБазыДанных);
		
		ПолныйПутьККаталогу = оду_Общий.КаталогФайлаОбмена(НастройкиТекущейБД, ВДЗ.ИмяКаталогаОбмена);
		ПараметрыКонвертации.Вставить("ИмяКаталогаОбмена", ПолныйПутьККаталогу);
		
		ПараметрыКонвертации.ИмяПВД = ИмяПВД;
		
		СтруктураПараметров = Новый Структура("ПараметрыКонвертации, МассивУО", ПараметрыКонвертации, Неопределено);
		МассивСтруктурПараметровКонвертации.Добавить(СтруктураПараметров);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат МассивСтруктурПараметровКонвертации;
	
КонецФункции 

Функция РезультатВыгрузкиИзПланаОбмена(РежимОтладки = Ложь) Экспорт
	
	Попытка
	
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		Если НастройкиТекущейБД.РаспределятьПодчиненнымУО = Истина Тогда
			РезультатЗаполнения = РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен(РежимОтладки);
		КонецЕсли; 
		
		МассивПараметровПланаОбмена = МассивПараметровКонвертацииПланаОбмена(НастройкиТекущейБД);  
		
		Если Не ЗначениеЗаполнено(МассивПараметровПланаОбмена )Тогда
			Возврат Ложь;		
		КонецЕсли;
		
		Для каждого СтруктураПараметровКонвертации Из МассивПараметровПланаОбмена Цикл
		
			ПараметрыКонвертации = СтруктураПараметровКонвертации.ПараметрыКонвертации;  
			РезультатВыгрузки = РезультатВыгрузкиИзПланаОбменаДалее(ПараметрыКонвертации, РежимОтладки);
			//TODO:  не возвращает истину при пустой выгрузке на какую-то точку
			//Если РезультатВыгрузки = Истина Тогда
				ЗафиксироватьДатуВыгрузки();
			//КонецЕсли;
		КонецЦикла; 
		
		оду_Общий.ВыполнитьОбменВФоне(оду_ОбщийПовтИсп.РежимВыгрузка(), 2); 
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("РезультатВыгрузкиИзПланаОбмена", , пр_Ошибка,,,, );
	КонецПопытки;
	
КонецФункции 

Процедура ЗафиксироватьДатуВыгрузки()    
	
	//Если Комментарий = "оду_ВыгрузкаДанныхИзПланаОбмена" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
			|	ЕСТЬNULL(ДополнительныеРеквизитыИСведения.Ссылка, НЕОПРЕДЕЛЕНО) КАК Свойство
			|ИЗ
			|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО (ДополнительныеРеквизитыИСведения.ИдентификаторДляФормул = ""ВремяВыгрузкиДанныхИзПланаОбмена"")
			|ГДЕ
			|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
			|	И ДополнительныеРеквизитыИСведения.Ссылка ЕСТЬ НЕ NULL ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВДЗ = РезультатЗапроса.Выбрать();
		
		Если ВДЗ.Следующий() Тогда
			пр_Общий.РезультатЗаписиДопСведений(ВДЗ.УО, ВДЗ.Свойство, ТекущаяДатаСеанса());	
		КонецЕсли;
		
	//КонецЕсли;
	
КонецПроцедуры


Функция РезультатВыгрузкиИзПланаОбменаДалее(ПараметрыКонвертации, РежимОтладки = Ложь)
	
	УзелПланаОбмена = ПараметрыКонвертации.ПланОбмена;
	Если НЕ ЗначениеЗаполнено(УзелПланаОбмена)  Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелПланаОбмена);
	НомерСообщения = ЗаписьСообщения.НомерСообщения;
	
	ВДЗ = ПланыОбмена.ВыбратьИзменения(УзелПланаОбмена, НомерСообщения);//, ФильтрОбмена);
	
	Данные = Новый Массив;
	
	Если ВДЗ.Следующий() Тогда
		Зареганые = ВДЗ.Получить();
		Данные.Добавить(Зареганые);
	КонецЕсли; 
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Если Данные.Количество() = 0 Тогда 
		Возврат Неопределено;	
	КонецЕсли;
	
	Тек_ТипXMLОбъекта = пр_Общий.ИмяТипаXMLПоСсылке(УзелПланаОбмена);
	
	Тек_ИДОбъекта 	= СтрШаблон("UOD_%1_%2", НомерСообщения, ПараметрыКонвертации.КодБазыДанных);
	
	ПутьКФайлуОбмена = ИмяФайлаОбменаПоПутиКаталога(ПараметрыКонвертации, НомерСообщения) + ".xml";
	
	ПараметрыКонвертации.ПутьКФайлуОбмена = ПутьКФайлуОбмена;
	
	ТаблицаСостоянийОбмена = ТаблицаСостоянийОбмена(ПараметрыКонвертации, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, НомерСообщения);
	СоответвиеПараметровВыгрузки = СоответвиеПараметровВыгрузки(Тек_ТипXMLОбъекта);
	
	Если РежимОтладки = Ложь Тогда 
		
		Если ПараметрыКонвертации.РаспределятьПодчиненнымУО = Истина Тогда
			СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхСРаспределением(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПутьКФайлуОбмена, , ПараметрыКонвертации);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелПланаОбмена, НомерСообщения);		
		Иначе
			СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ПутьКФайлуОбмена, , ПараметрыКонвертации);
		КонецЕсли;	
		
		Возврат СтрокаОтветаОбмена;
		
	КонецЕсли;
	
	//РезультатВыгрузки = РезультатВыполненияОбменаНаСеререДалее(НастройкиТекущейБД.БазаДанных, Тек_ИДОбъекта, Тек_ТипXMLОбъекта, , ИмяПВД, НомерСообщения);
	//Возврат РезультатВыгрузки;
	
КонецФункции 

Функция ПараметрыКонвертацииТекущейБД(НастройкиТекущейБД)
	
	ПараметрыКонвертации = оду_Общий.ПараметрыКонвертацииОбъекта();
	
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, НастройкиТекущейБД.БазаДанных); 
	ПараметрыКонвертации.УО = НастройкиТекущейБД.БазаДанных;	
	ЗаполнитьЗначенияСвойств(ПараметрыКонвертации, НастройкиТекущейБД.НастройкаКонвертацииОбмена);
	ПараметрыКонвертации.НастройкаКонвертации = НастройкиТекущейБД.НастройкаКонвертацииОбмена;
	
	Возврат ПараметрыКонвертации;
	
КонецФункции 

Функция ТаблицаСостоянийОбмена(ПараметрыКонвертации, Тек_ИДОбъекта, ТипXMLОбъектаИсточника, НомерСообщения)
	
	ТаблицаСостоянийОбмена = оду_Общий.ТаблицаСостоянийОбмена();
	Стр = ТаблицаСостоянийОбмена.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ПараметрыКонвертации);  
	Стр.ДатаВыгрузки = ТекущаяДатаСеанса();
	
	Стр.ИДОбъекта 						= Тек_ИДОбъекта;
	Стр.ИмяФайлаОбмена 					= ПараметрыКонвертации.ПутьКФайлуОбмена;
	Стр.КонфигурацияКонвертацииОбмена 	= ПараметрыКонвертации.КонфигурацияКонвертацииОбмена;
	Стр.РежимОбмена 					= ПараметрыКонвертации.РежимОбмена;
	Стр.ПриоритетДопПризнака 			= НомерСообщения;
	
	Стр.СостояниеОбмена 				= оду_ОбщийПовтИсп.СостояниеВыгрузка();  
	Стр.ТипXMLОбъектаИсточника 			= ТипXMLОбъектаИсточника;
	Стр.ТипXMLОбъектаПриемника 			= ТипXMLОбъектаИсточника;
	
	Стр.ПриоритетОбъекта 				= 0;
	
	Возврат ТаблицаСостоянийОбмена;
	
КонецФункции 

Функция СоответвиеПараметровВыгрузки(ТипXMLОбъекта, ДанныеОбмена = Неопределено, ДополнительныеСвойстваОбъекта = "")
	
	Если ДанныеОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 

	оду_ДополнительныеСвойстваОбъектаПриемник = ДополнительныеСвойстваОбъекта;
	
	Если ДополнительныеСвойстваОбъекта = "" Тогда
		оду_ДополнительныеСвойстваОбъекта = ДополнительныеСвойстваОбъекта;	
	Иначе
		оду_ДополнительныеСвойстваОбъекта = ЗначениеИзСтрокиВнутр(ДополнительныеСвойстваОбъекта); //Структура параметров	
	КонецЕсли; 
	
	СоответвиеПараметровВыгрузки = Новый Соответствие();
	
	СтруктураПараметров = Новый Структура(); 
	
	СтруктураПараметров.Вставить("оду_МассивСсылок1С", ДанныеОбмена);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъекта", оду_ДополнительныеСвойстваОбъекта);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъектаПриемник", оду_ДополнительныеСвойстваОбъектаПриемник);
	
	СоответвиеПараметровВыгрузки.Вставить(ТипXMLОбъекта, СтруктураПараметров);
	
	Возврат  СоответвиеПараметровВыгрузки;
		
КонецФункции 

Функция ИмяФайлаОбменаПоПутиКаталога(ПараметрыКонвертации, НомерСообщения = "", ИмяФайлаПоВремени = Истина)  Экспорт
	
	ИмяФайлаОбмена = "";
	
	ПолныйПутьККаталогу = ПараметрыКонвертации.ИмяКаталогаОбмена;
	ВерсияКонфигурации = ПараметрыКонвертации.ВерсияКонфигурации;
	
	Если ЗначениеЗаполнено(ПолныйПутьККаталогу)  Тогда
		
		//Если ИмяФайлаИзСтроки = Истина И ЗначениеЗаполнено(ИмяФайла)  Тогда
		//	ИмяФайлаОбмена = СтрШаблон("%1\%2", ПолныйПутьККаталогу, ИмяФайла);
		//Иначе	
			Если НомерСообщения = "" Тогда
				Если ИмяФайлаПоВремени = Истина Тогда
					ДобавочноеПоле = СтрЗаменить(Строка(ТекущаяДатаСеанса()),".", "");
					ДобавочноеПоле = СтрЗаменить(ДобавочноеПоле,":", "");
				КонецЕсли; 
			Иначе
				//ДобавочноеПоле = НомерСообщения;
				ДобавочноеПоле = НомерСообщения;
			КонецЕсли; 
			
			Если ВерсияКонфигурации = "" Тогда
				ТекстВерсии = ВерсияКонфигурации;
			Иначе
				МВерсии = СтрРазделить(ВерсияКонфигурации, ".");
				ТекстВерсии = СтрСоединить(МВерсии, "_");
			КонецЕсли; 
			
			ИмяФайлаОбмена = СтрШаблон("%1\UOD %2 %3", ПолныйПутьККаталогу, ТекстВерсии, ДобавочноеПоле);// + " " + пр_Общий.СгенерироватьСлучайныйТекст(3);
			
		//КонецЕсли; 
		
		Возврат  ИмяФайлаОбмена;
		
	КонецЕсли; 
	
	ИмяФайлаОбмена = КаталогВременныхФайлов(); //По умолчанию			
	
	Возврат  ИмяФайлаОбмена;
	
КонецФункции 

Функция ТекстЗапросаВыгрузкиПоРаспределению()     
	
	Возврат

		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_УТ
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка = &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УО,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбмена.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена,
		|	оду_БазыУчастникиОбмена.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_Подчиненные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|		ПО (оду_БазыУчастникиОбменаСостав.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|			И (оду_БазыУчастникиОбменаСостав.ТипXMLОбъектаИсточника = &ТипXMLОбъектаИсточника)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка <> &Ссылка
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|	И &РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.УО КАК УО,
		|	ВТ_Подчиненные.ОтборыОбмена КАК ОтборыОбмена
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВТ_УТ КАК ВТ_УТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ПО ВТ_УТ.НастройкаКонвертацииОбмена = ВТ_Подчиненные.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_Подчиненные.УО ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Подчиненные.НастройкаКонвертацииОбмена,
		|	ВТ_Подчиненные.УО,
		|	ВТ_Подчиненные.ОтборыОбмена
		|ИЗ
		|	ВТ_Подчиненные КАК ВТ_Подчиненные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УТ КАК ВТ_УТ
		|		ПО ВТ_Подчиненные.НастройкаКонвертацииОбмена = ВТ_УТ.НастройкаКонвертацииОбмена
		|ГДЕ
		|	ВТ_УТ.НастройкаКонвертацииОбмена ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.НастройкаКонвертацииОбмена КАК НастройкаКонвертацииОбмена,
		|	ВТ_Данные.УО КАК УО,
		|	ВТ_Данные.ОтборыОбмена КАК ОтборыОбмена
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ИТОГИ ПО
		|	НастройкаКонвертацииОбмена,
		|	ОтборыОбмена";

КонецФункции


//TODO:  Доработать, если у Распределителей разные ПодчиненныйУчастникОбмена 
Функция ВыполнитьВыгрузкуДанныхСРаспределением(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации, ТипXMLОбъекта = "")
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгрузкиПоРаспределению();
	
																	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	//TODO: доделать
	Запрос.УстановитьПараметр("Ссылка", ПараметрыКонвертации.УО);
	//ТипXMLОбъектаИсточника = ?(Тек_ТипXMLОбъекта = "", ТипXMLОбъекта, Тек_ТипXMLОбъекта);
	//Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъектаИсточника); 
	Запрос.УстановитьПараметр("ТипXMLОбъектаИсточника", ТипXMLОбъекта); 
	Запрос.УстановитьПараметр("РаспределятьПодчиненнымУО", ПараметрыКонвертации.РаспределятьПодчиненнымУО);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, ОбработкаОбменаДанных, ПараметрыКонвертации);
		Возврат СтрокаОтветаОбмена;
	КонецЕсли;
	
	ВыборкаНастройкиКД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивСтруктурПараметровКонвертации = Новый Массив;
	
	Пока ВыборкаНастройкиКД.Следующий() Цикл    
		
		ВыборкаОтборыОбмена = ВыборкаНастройкиКД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОтборыОбмена.Следующий() Цикл 
			
			МассивУО = Новый Массив;
			
			ВДЗ = ВыборкаОтборыОбмена.Выбрать();
			
			Пока ВДЗ.Следующий() Цикл
				МассивУО.Добавить(ВДЗ.УО);	
			КонецЦикла;
			
			ПараметрыКонвертации.Вставить("ОтборыОбмена", ВыборкаОтборыОбмена.ОтборыОбмена);
			ПараметрыКонвертации.Вставить("МассивУО", МассивУО);
			СтрокаОтветаОбмена = ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбменаДалее, 
																ОбработкаОбменаДанных, ПараметрыКонвертации);
			
		КонецЦикла;  
		
	КонецЦикла;    	
	
	Возврат СтрокаОтветаОбмена;
		
КонецФункции

//ВыборкаУО
//	КонфигурацияКонвертацииОбмена
//	ПОДИзФайла
//  ПутьКПОД
//	ПОДИзОбработкиБСП
//	ОбработкаОтладкиБСП
//	ПОД
//	РежимОтладки
Функция ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена = Неопределено, СоответвиеПараметровВыгрузки = Неопределено, 
										ПутьКФайлуОбмена, ОбработкаОбменаДанных = Неопределено, ПараметрыКонвертации, ВыгрузитьЧЗФайл = Ложь)    Экспорт 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	Результат = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, 
										ПутьКФайлуОбмена, ОбработкаОбменаДанных, ПараметрыКонвертации, ВыгрузитьЧЗФайл);
	Возврат  Результат;
	
КонецФункции

#Область  СопоставлениеОграниченияНоменклатурыВидЦены

Функция ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен()

	Возврат	
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УчастникОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбменаОрганизации.Организация, НЕОПРЕДЕЛЕНО) КАК ВидЦены
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|		ПО (оду_БазыУчастникиОбменаОрганизации.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ЦеныСрез
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И ВидЦен В
		|					(ВЫБРАТЬ
		|						ВТ_ТекущиеДанные.ВидЦены КАК ВидЦены
		|					ИЗ
		|						ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.Цена > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК НоменклатураОснования,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО) КАК ВидЦен,
		|	ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВТ_кеги
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|		ПО (ВТ_ЦеныСрез.Номенклатура = НоменклатураДополнительныеРеквизиты.Значение)
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = ""НоменклатураОснования""
		|	И НоменклатураДополнительныеРеквизиты.Значение <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(ВТ_ЦеныСрез.Цена, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЦеныСрез.Номенклатура КАК Номенклатура,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦен,
		|	ВТ_ЦеныСрез.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	ВТ_ЦеныСрез КАК ВТ_ЦеныСрез
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_кеги.Номенклатура,
		|	ВТ_кеги.ВидЦен,
		|	ВТ_кеги.Цена
		|ИЗ
		|	ВТ_кеги КАК ВТ_кеги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, ВТ_ЦеныСрез.Номенклатура) КАК Номенклатура,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура КАК НоменклатураБ,
		|	ВТ_ЦеныСрез.Номенклатура КАК НоменклатураСрез,
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, ВТ_ЦеныСрез.ВидЦен) КАК ВидЦены,
		|	аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены КАК ВидЦеныБ,
		|	ВТ_ЦеныСрез.ВидЦен КАК ВидЦеныСрез,
		|	ВТ_ЦеныСрез.Цена ЕСТЬ NULL КАК Удалить
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_ЦеныСрез
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.аян_ОграничениеНоменклатурыПоВидуЦен КАК аян_ОграничениеНоменклатурыПоВидуЦен
		|		ПО ВТ_ЦеныСрез.Номенклатура = аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура
		|			И ВТ_ЦеныСрез.ВидЦен = аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены
		|ГДЕ
		|	ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.Номенклатура, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.Номенклатура, НЕОПРЕДЕЛЕНО)
		|	И ЕСТЬNULL(аян_ОграничениеНоменклатурыПоВидуЦен.ВидЦены, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ЦеныСрез.ВидЦен, НЕОПРЕДЕЛЕНО)";
	
КонецФункции 

Функция РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен(РежимОтладки = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОграниченийНоменклатурыПоВидуЦен();
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если РежимОтладки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	//Ограничение транзакции 
	ПрерватьЦикл = Ложь; 
	ОбъемТранзакции = 1000;
	
	ТекТранз = ОбъемТранзакции;
	Осч = 1;
	Сч = 1;
	
	НачатьТранзакцию();
	
	Пока ВДЗ.Следующий() И ПрерватьЦикл = Ложь Цикл
		
		Попытка
			
			Запись = РегистрыСведений.аян_ОграничениеНоменклатурыПоВидуЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВДЗ);
			Если ВДЗ.Удалить = Истина Тогда
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					Запись.Удалить();	
				КонецЕсли;
			Иначе	
				Запись.Записать();
			КонецЕсли;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			ОтменитьТранзакцию();
			Возврат Неопределено;
		КонецПопытки;
		
		Если Сч >= ТекТранз ИЛИ Осч = ВДЗ.Количество() Тогда //Последняя запись
			//Зафиксировать транзакцию
			ЗафиксироватьТранзакцию();
			
			Если Осч <> ВДЗ.Количество() Тогда //Если запись не последняя продолжаем
				ТекТранз = ОбъемТранзакции;
				Сч = 1;
				НачатьТранзакцию();
			КонецЕсли;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		Осч = Осч + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти
 


#КонецЕсли
