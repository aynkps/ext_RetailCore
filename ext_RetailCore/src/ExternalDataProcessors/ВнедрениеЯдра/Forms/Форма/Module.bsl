
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура НачальнаяНастройка(Команда)
	НачальнаяНастройкаНаСервере();
	ОбновитьИнтерфесЭтой("");
КонецПроцедуры

&НаСервере
Процедура НачальнаяНастройкаНаСервере()
	
	Попытка
		
		оду_ИспользоватьУниверсальныйОбмен = оду_Общий.оду_ИспользоватьУниверсальныйОбмен();
		Если оду_ИспользоватьУниверсальныйОбмен = Истина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Начальные настройки выполненны";
			Сообщение.Сообщить(); 
			Возврат;
		КонецЕсли; 
		
		
		НачатьТранзакцию();
		 
		Результат = РезультатЗаполненияОсновныхНастроек();
		
		Если Результат = Ложь Тогда
			ВызватьИсключение("");
		КонецЕсли; 
		//
		//
		//Если Результат = Ложь Тогда
		//	ВызватьИсключение("");
		//КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияОсновныхНастроек()
	
	Попытка
		СтруктураИБ = пр_Общий.ПолучитьСтруктуруАдресаИнформационнойБазы();
		
		Запись = РегистрыСведений.оду_НастройкиИнформационнойБазы.СоздатьМенеджерЗаписи();
		Запись.ИмяРабочейБД = СтруктураИБ.ИмяИБ;
		Запись.СерверРабочейБД = СтруктураИБ.СерверИБ;
		Запись.КаталогОбмена = "\\192.168.100.11\core-sync\UOD_W";
		Запись.КоличествоОбъектовВПакетеОбмена = 25;
		Запись.КоличествоПопытокПриОшибке = 3;
		
		Запись.Логировать = Истина;
		Запись.chat_id = "-1001487084014";
		Запись.token = "6410760163:AAGf567oddlU3Z_qGQwne9sYz32pYgh1f10";
		Запись.Записать();
		
		Константы.оду_ИспользоватьУниверсальныйОбмен.Установить(Истина);
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 


&НаКлиенте
Процедура Донастроить(Команда)
	ДонастроитьНаСервере(); 
	
КонецПроцедуры 

&НаСервере
Функция ДонастроитьНаСервере()
	
	Результат = РезультатЗаполненияУО();
	
	
КонецФункции

&НаСервере
Функция РезультатЗаполненияУО()
	
	Попытка
		
		оду_Общий.ПроверкаУзловОбмена();
		
		УО_Сссылка = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ТекущаяБД", Истина);
		
		УО = УО_Сссылка.ПолучитьОбъект();
		
		УО.Используется = Истина;
		УО.ИспользоватьРегламентЗагрузкиДанных = Истина;
		УО.ИДКонфигурации = "Р";
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 



&НаКлиенте
Процедура ПодключитьЯдро(Команда)
	
	Результат = РезультатНастройкиСвязиСЯдром();
	
КонецПроцедуры


&НаСервере
Функция РезультатНастройкиСвязиСЯдром()
	
	Попытка
		
		Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
		НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
		ПараметрыПодключения = Модуль.ПараметрыПодключенияУО(); 
		ПараметрыПодключения.ИДБазыПриемник	= "68df0be5-ed0c-4ee9-9771-7c7483ceece4";	
		ПараметрыПодключения.ИмяБазыПриемника = "retail-core";	
		ПараметрыПодключения.ИмяБазыУО = "retail-core";	
		ПараметрыПодключения.Пользователь = "uExchange";	
		ПараметрыПодключения.Пароль = "exc-a9a7";	
		
		ПараметрыПодключения.Порт = 80;	
		ПараметрыПодключения.Сервер = "192.168.100.11";	
		
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(, "ping", ПараметрыПодключения);
		ЕстьСвязь =  СтруктураОтвета <> Неопределено;	
		Если ЕстьСвязь = Ложь Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось установить связь с ЯДРОМ";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		ПолучитьИзПриемникаНаСервере(ПараметрыПодключения);
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 

&НаСервере
Функция СтруктураОтветаУниверсальногоОбмена(ТелоЗапроса = Неопределено, Метод, ПараметрыПодключения)
	
	
	//ЯдроОбъект.ИмяКаталогаОбмена = оду_Общий.ИмяКаталогаОбменаУчастникаОбмена(ЯдроОбъект.Код, ЯдроОбъект.Сервер);	
	
	Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	//ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Объект); 
	//ПараметрыПодключения.ИмяБазыУО = Объект.Код;
	//
	СтруктураОтвета = Модуль_ОбменУниверсальный.СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, Метод);
	Возврат СтруктураОтвета;
	
КонецФункции 

&НаСервере
Процедура ПолучитьИзПриемникаНаСервере(ПараметрыПодключения)
	
	Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	Данные = Модуль_ОбменУниверсальный.СтруктураДанныхЭтойБазы();
	
	Если ЗначениеЗаполнено(Данные)  Тогда
		ТелоЗапроса = Модуль_ОбменУниверсальный.СформироватьJSON_Сериализ(Данные);
		//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(СтруктураИзТелаHTTPЗапросаУнив(ОтветHTTP);
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ТелоЗапроса, "receiverData", ПараметрыПодключения);
		
		Если ЗначениеЗаполнено(СтруктураОтвета)  Тогда
			Если СтруктураОтвета.code = 200 Тогда
				Результ = Модуль_ОбменУниверсальный.РезультатПроверкиЗаписиНовогоУчастникаОбмена(СтруктураОтвета.data);
				Если Результ = "Уже записан" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = Результ;
					Сообщение.Сообщить(); 
				КонецЕсли; 
			Иначе
			    Сообщить(СтруктураОтвета.error);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнтерфесЭтой(Команда)
	ОбновитьИнтерфейс();
КонецПроцедуры


&НаКлиенте
Процедура ДонастроитьЯдро(Команда)
	ДонастроитьЯдроНаСервере();
КонецПроцедуры


&НаСервере
Функция ДонастроитьЯдроНаСервере()
	
	Попытка
		
		//Ядро = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("Код", "retail-core");  
		Ядро = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", "68df0be5-ed0c-4ee9-9771-7c7483ceece4");		
       	Если НЕ ЗначениеЗаполнено(Ядро) Тогда
			Возврат Ложь;		
		КонецЕсли;
		
		УО = Ядро.ПолучитьОбъект();
		
		УО.Используется = Истина;
		УО.ИспользоватьРегламентЗагрузкиДанных = Истина;
		//УО.ИДКонфигурации = "Р";
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции


&НаКлиенте
Процедура НастроитьВЯдре(Команда)
	НастроитьВЯдреНаСервере();
КонецПроцедуры


&НаСервере
Процедура НастроитьВЯдреНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ ПЕРВЫЕ 1  
		"ВЫБРАТЬ 
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Используется = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	ПланОбмена = пр_Общий.СсылкаПоGUID(ПланыОбмена.оду_ПланОбмена, "6276897b-db7b-11ee-b05d-e8dcce6439ea");	
	НастройкаКО = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_НастройкаКонвертацииДанных", "8a0ce36d-db76-11ee-b05d-e8dcce6439ea");	
	
	Номенклатура = пр_Общий.СсылкаПоGUID(Справочники.ИдентификаторыОбъектовМетаданных, "d6d7c7d9-5e98-11ee-8891-00155d640d44");
	Категория = пр_Общий.СсылкаПоGUID(Справочники.ИдентификаторыОбъектовМетаданных, "d6d7c795-5e98-11ee-8891-00155d640d44");
	
	Пока ВДЗ.Следующий() Цикл
   		РезультатЗаполненияУО_ВЯдре(ВДЗ.Ссылка, НастройкаКО, ПланОбмена, Номенклатура, Категория);	
	КонецЦикла;

КонецПроцедуры   

Функция РезультатЗаполненияУО_ВЯдре(УО_ВЯдре, НастройкаКО, ПланОбмена, Номенклатура, Категория)
	
	Попытка
		
		УО = УО_ВЯдре.ПолучитьОбъект();
		
		УО.Используется = Истина;
		УО.ИспользоватьРегламентВыгрузкиДанных = Истина;
		УО.НастройкаКонвертацииОбмена = НастройкаКО;
		УО.ПланОбмена = ПланОбмена; 
		
		УО.ПодчиненныйУчастникОбмена = Истина;
		
		ТЧ = УО.Состав; 
		
		Нстр = ТЧ.Добавить(); 
		Нстр.Объект = Номенклатура;
		Нстр.Регистрировать = Истина;  
		Нстр.ИспользоватьСамолет = Истина;
		Нстр.ТипXMLОбъектаИсточника = "CatalogRef.Номенклатура";
		Нстр.ТипXMLОбъектаПриемника = "CatalogRef.Номенклатура"; 
		
		Нстр = ТЧ.Добавить(); 
		Нстр.Объект = Категория;
		Нстр.Регистрировать = Истина; 
		Нстр.ИспользоватьСамолет = Истина;
		Нстр.ТипXMLОбъектаИсточника = "CatalogRef.КатегорииНоменклатуры";
		Нстр.ТипXMLОбъектаПриемника = "CatalogRef.КатегорииНоменклатуры";
		
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции    


&НаКлиенте
Процедура ВыгрузитьВсемНаборы(Команда)
	ВыгрузитьВсемНаборыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВсемНаборыНаСервере()
	
	ТипОбъекта = "СоставНаборов";
	//ТипОбъекта = "ЦеныНоменклатуры";
	оду_ТипСсылки = СтрШаблон("InfoRg.%1", ТипОбъекта);    
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставНаборов.НоменклатураНабора КАК НоменклатураНабора,
		|	СоставНаборов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СоставНаборов.Номенклатура КАК Номенклатура,
		|	СоставНаборов.Характеристика КАК Характеристика,
		|	СоставНаборов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СоставНаборов.Общий КАК Общий,
		|	СоставНаборов.Количество КАК Количество,
		|	СоставНаборов.ДоляСтоимости КАК ДоляСтоимости,
		|	СоставНаборов.Порядок КАК Порядок
		|ИЗ
		|	РегистрСведений.СоставНаборов КАК СоставНаборов";
	
	РезультатЗапроса = Запрос.Выполнить();           
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	оду_БазыУчастникиОбмена.Ссылка.Код КАК ИмяБазыПриемника
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ИспользоватьРегламентВыгрузкиДанных = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();

	ТаблицаСостоянийОбмена = Неопределено;
	ПервыйУО = Неопределено;    
	
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	
	Пока ВДЗ.Следующий() Цикл
		УО = ВДЗ.Ссылка;         
		Если ТаблицаСостоянийОбмена = Неопределено Тогда
			ТаблицаСостоянийОбмена = ВыгрузкаПроизвольныхЗаписейРСНаСервере(РезультатЗапроса, УО, ТипОбъекта, оду_ТипСсылки);
			ИмяТекущегоФайлаОбмена = ТаблицаСостоянийОбмена[0].ИмяФайлаОбмена; 
			ПервыйУО = УО;
			Продолжить;
		КонецЕсли;  
		
	КонецЦикла;        
	
	
		
		//
		//ИмяФайлаОбмена = оду_Общий.ИмяФайлаОбмена(НастройкиТекущейБД, ВДЗ.ИмяБазыПриемника) + ".xml";
		//КопироватьФайл(ИмяТекущегоФайлаОбмена, ИмяФайлаОбмена);	
		//
		//Стр = ТаблицаСостоянийОбмена.Добавить();  
		//Стр.ИДБазыПриемник = пр_Общий.ДанныеИБПоСсылкам(УО, "ИДБазы", , "Структура").ИДБазы;
		//Стр.ИДОбъекта = ИДОбъекта;
		//Стр.ИмяФайлаОбмена = ИмяФайлаОбмена;
		
	
	
КонецПроцедуры   


Функция ЗаписатьСостоянияПослеВыгрузкиОбъектов(ТаблицаСостоянийОбмена, ВыгруженоБезОшибок)
	
	Если ВыгруженоБезОшибок = Истина Тогда
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена;
	Иначе	
		ТаблицаДляЗаписи = ТаблицаСостоянийОбмена.НайтиСтроки(Новый Структура("Обработан", Истина));
	КонецЕсли; 	
	
	Если ТаблицаДляЗаписи.Количество() = 0 Тогда
		Возврат Неопределено;	
	КонецЕсли; 
		
	НачатьТранзакцию();
	
	Попытка
		
		Если ВыгруженоБезОшибок = Истина Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.оду_СостояниеОбъектовОбмена");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДляЗаписи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДОбъекта", "ИДОбъекта");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыИсточник", "ИДБазыИсточник");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИДБазыПриемник", "ИДБазыПриемник");
			Блокировка.Заблокировать(); 
		КонецЕсли; 
		
		Для каждого Стр Из ТаблицаДляЗаписи Цикл
			
			Запись = РегистрыСведений.оду_СостояниеОбъектовОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Стр);
			Если ВыгруженоБезОшибок = Истина Тогда
				Запись.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
			КонецЕсли; 
			Запись.Записать();
			
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		ОписаниеОшибки = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ЗаписатьСостоянияПослеВыгрузкиОбъектов", , ОписаниеОшибки);	
	КонецПопытки;
	
КонецФункции 

  

Функция ВыгрузкаПроизвольныхЗаписейРСНаСервере(РезультатЗапроса, УО, ИДОбъекта, оду_ТипСсылки)  
	
	
	//Выгрзку записей РС
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.Ссылка.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|ГДЕ
		|	оду_БазыУчастникиОбменаСостав.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Ссылка", УО);
	
	РЗ = Запрос.Выполнить();
	
	ВДЗ = РЗ.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена; 			
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	ИсходящиеДанные = Новый Структура("ЭтоУдалениеОбъекта", Ложь);
	оду_ДополнительныеСвойстваОбъекта = Новый Структура("ИсходящиеДанные", ИсходящиеДанные);	
	
	СоответвиеПараметровВыгрузки = Новый Соответствие();
	//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", ДанныеОбмена, ПереносТолькоСсылок));		
	
	//оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	//оду_СтруктураУО.ИДБазыИсточник = ИДБазыИсточник;
	//оду_СтруктураУО.ИДБазыПриемник = ИДБазыПриемник;
	
	СтруктураПараметров = Новый Структура(); 
	//СтруктураПараметров.Вставить("оду_СтруктураУО", ЗначениеВСтрокуВнутр(оду_СтруктураУО));
	СтруктураПараметров.Вставить("оду_МассивСсылок1С", РезультатЗапроса);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъекта", оду_ДополнительныеСвойстваОбъекта);
	
	СоответвиеПараметровВыгрузки.Вставить(оду_ТипСсылки, СтруктураПараметров);		
	
	//ИмяФайлаОбменаДалее = КонвертацияПутьКФайлуДанных;
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	ИмяБазыПриемника = пр_Общий.ДанныеИБПоСсылкам(УО, "Код", , "Структура").Код;
	ИмяФайлаОбмена = оду_Общий.ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника) + ".xml";
	
	ТаблицаСостоянийОбмена = оду_Общий.ТаблицаСостоянийОбмена();
	Стр = ТаблицаСостоянийОбмена.Добавить();
	Стр.ДатаВыгрузки = ТекущаяДатаСеанса();
	Стр.ИДБазыИсточник = НастройкиТекущейБД.ИДБазыИсточник;
	Стр.ИДБазыПриемник = пр_Общий.ДанныеИБПоСсылкам(УО, "ИДБазы", , "Структура").ИДБазы;
	Стр.ИДОбъекта = ИДОбъекта;
	Стр.ИмяФайлаОбмена = ИмяФайлаОбмена;
	Стр.КонфигурацияКонвертацииОбмена = оду_ОбщийПовтИсп.КонфигурацияКД2();
	Стр.РежимОбмена = оду_ОбщийПовтИсп.РежимВыгрузка();
	//Стр.СостояниеОбмена = оду_ОбщийПовтИсп.СостояниеВыгружен();
	
	Стр.ТипXMLОбъектаИсточника = оду_ТипСсылки;
	Стр.ТипXMLОбъектаПриемника = оду_ТипСсылки;
	//ЗаполнитьЗначенияСвойств(Стр, ЭтотОбъект); 
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
	СтрокаОтветаОбмена = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбмена, , ПараметрыКонвертации, );
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаписьВСостав(Команда)
	ДобавитьЗаписьВсем();
КонецПроцедуры   

&НаСервере
Функция ДобавитьЗаписьВсем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//"ВЫБРАТЬ ПЕРВЫЕ 1  
		"ВЫБРАТЬ 
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Используется = Истина
		|	И оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		ДобавитьУдалитьЗаписьВСостав(ВДЗ.Ссылка)
		  //РезультатЗаполненияУО_ВЯдре(ВДЗ.Ссылка, НастройкаКО, ПланОбмена, Номенклатура, Категория);	
	КонецЦикла;

КонецФункции     

//ТипXMLОбъекта = "CatalogRef.КатегорииНоменклатуры"
&НаСервере
Функция ДобавитьУдалитьЗаписьВСостав(УО_ВЯдре)
	
	Попытка
		
		УО = УО_ВЯдре.ПолучитьОбъект();
		ТЧ = УО.Состав; 
		
		СтрПоиска = Новый Структура();
		СтрПоиска.Вставить("ТипXMLОбъектаИсточника", ТипXMLОбъекта);
		СтрПоиска.Вставить("ТипXMLОбъектаПриемника", ТипXMLОбъекта);
		СтрПоиска.Вставить("Объект", ОбъектЗаписиВСостав);
		
		МСтр = ТЧ.НайтиСтроки(СтрПоиска);
		
		Если МСтр.Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Нстр = ТЧ.Добавить(); 
		Нстр.Объект = ОбъектЗаписиВСостав;
		Нстр.Регистрировать = Истина; 
		Нстр.ИспользоватьСамолет = Истина;
		Нстр.ТипXMLОбъектаИсточника = ТипXMLОбъекта;
		Нстр.ТипXMLОбъектаПриемника = ТипXMLОбъекта;
		
		Если РежимОтладки = Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ТипXMLОбъекта(ВыбранныйОбъект) 
	
	ТипXML = "";
	Если ТипЗнч(ВыбранныйОбъект) = пр_НастройкиПовтИсп.ТипСтрока() Тогда
		ТипXML = ВыбранныйОбъект;
	ИначеЕсли ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		
		Данные = пр_Общий.ЗначенияРеквизитовОбъекта(ВыбранныйОбъект, "ЗначениеПустойСсылки");
		Если Данные.ЗначениеПустойСсылки <> Неопределено Тогда
			ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(Данные.ЗначениеПустойСсылки);
		Иначе
			МассивИмени	= СтрРазделить(ВыбранныйОбъект.ПолноеИмя, ".");  
			Если МассивИмени.Количество() = 2 Тогда  
				
				ИмяТипа 		= МассивИмени[0];
				Имя 			= МассивИмени[1];
				
				Если ИмяТипа = "РегистрСведений" Тогда
					ИмяТипа = "InfoRg";
					//ИмяТипа = "InformationRegisterRecordSet"; 
					ВыборкаМассивом = Ложь;  
				ИначеЕсли ИмяТипа = "РегистрНакопления"  Тогда
					ИмяТипа = "AccumRg";
					ВыборкаМассивом = Ложь;  
				Иначе
					ВыборкаМассивом = Истина;  
				КонецЕсли;
				
				ТипXML = СтрШаблон("%1.%2", ИмяТипа, Имя); 		
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ВыбранныйОбъект);
	КонецЕсли;   
	
	Возврат ТипXML;  
	
КонецФункции

&НаКлиенте
Процедура ОбъектЗаписиВСоставПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектЗаписиВСостав) Тогда
		ТипXMLОбъекта = ТипXMLОбъекта(ОбъектЗаписиВСостав);
	Иначе
		ТипXMLОбъекта = "";	
	КонецЕсли;
	
КонецПроцедуры






