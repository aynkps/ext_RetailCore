
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура НачальнаяНастройка(Команда)
	НачальнаяНастройкаНаСервере();
	ОбновитьИнтерфесЭтой("");
КонецПроцедуры

&НаСервере
Процедура НачальнаяНастройкаНаСервере()
	
	Попытка
		
		//оду_ИспользоватьУниверсальныйОбмен = оду_Общий.оду_ИспользоватьУниверсальныйОбмен();
		//Если оду_ИспользоватьУниверсальныйОбмен = Истина Тогда
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = "Начальные настройки выполненны";
		//	Сообщение.Сообщить(); 
		//	Возврат;
		//КонецЕсли; 
		
		НачатьТранзакцию();
		 
		Результат = РезультатЗаполненияОсновныхНастроек();
		
		Если Результат = Ложь Тогда
			ВызватьИсключение("");
		КонецЕсли; 
		//
		//
		//Если Результат = Ложь Тогда
		//	ВызватьИсключение("");
		//КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияОсновныхНастроек()
	
	Попытка
		СтруктураИБ = пр_Общий.ПолучитьСтруктуруАдресаИнформационнойБазы();
		
		Запись = РегистрыСведений.оду_НастройкиИнформационнойБазы.СоздатьМенеджерЗаписи();
		Запись.ИмяРабочейБД = СтруктураИБ.ИмяИБ;
		Запись.СерверРабочейБД = СтруктураИБ.СерверИБ;
		Запись.КаталогОбмена = "\\192.168.100.11\core-sync\UOD_W";
		Запись.КоличествоОбъектовВПакетеОбмена = 25;
		Запись.КоличествоПопытокПриОшибке = 3;
		
		Запись.Логировать = Истина;
		Запись.chat_id = "-1001487084014";
		Запись.token = "6410760163:AAGf567oddlU3Z_qGQwne9sYz32pYgh1f10";
		Запись.Записать();
		
		Константы.оду_ИспользоватьУниверсальныйОбмен.Установить(Истина);
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 


&НаКлиенте
Процедура Донастроить(Команда)
	ДонастроитьНаСервере(); 
	
КонецПроцедуры 

&НаСервере
Функция ДонастроитьНаСервере()
	
	Результат = РезультатЗаполненияУО();
	
	
КонецФункции

&НаСервере
Функция РезультатЗаполненияУО()
	
	Попытка
		
		//оду_Общий.ПроверкаУзловОбмена();
		ПроверкаУзловОбмена();

		
		УО_Сссылка = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ТекущаяБД", Истина);
		
		УО = УО_Сссылка.ПолучитьОбъект();
		
		УО.Используется = Истина;
		УО.ИспользоватьРегламентЗагрузкиДанных = Истина;
		УО.ИДКонфигурации = "Р";
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 



&НаКлиенте
Процедура ПодключитьЯдро(Команда)
	
	Результат = РезультатНастройкиСвязиСЯдром();
	
КонецПроцедуры


&НаСервере
Функция РезультатНастройкиСвязиСЯдром()
	
	Попытка
		
		Модуль = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_ОбщийПовтИсп", пр_НастройкиПовтИсп.ТекущийПользователь());
		НастройкиТекущейБД = Модуль.НастройкиТекущейБД();
		ПараметрыПодключения = Модуль.ПараметрыПодключенияУО(); 
		ПараметрыПодключения.ИДБазыПриемник	= "68df0be5-ed0c-4ee9-9771-7c7483ceece4";	
		ПараметрыПодключения.ИмяБазыПриемника = "retail-core";	
		ПараметрыПодключения.ИмяБазыУО = "retail-core";	
		ПараметрыПодключения.Пользователь = "uExchange";	
		ПараметрыПодключения.Пароль = "exc-a9a7";	
		
		ПараметрыПодключения.Порт = 80;	
		ПараметрыПодключения.Сервер = "192.168.100.11";	
		
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(, "ping", ПараметрыПодключения);
		ЕстьСвязь =  СтруктураОтвета <> Неопределено;	
		Если ЕстьСвязь = Ложь Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось установить связь с ЯДРОМ";
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		ПолучитьИзПриемникаНаСервере(ПараметрыПодключения);
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции 

&НаСервере
Функция СтруктураОтветаУниверсальногоОбмена(ТелоЗапроса = Неопределено, Метод, ПараметрыПодключения)
	
	
	//ЯдроОбъект.ИмяКаталогаОбмена = оду_Общий.ИмяКаталогаОбменаУчастникаОбмена(ЯдроОбъект.Код, ЯдроОбъект.Сервер);	
	
	Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	//ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Объект); 
	//ПараметрыПодключения.ИмяБазыУО = Объект.Код;
	//
	СтруктураОтвета = Модуль_ОбменУниверсальный.СтруктураОтветаУниверсальногоОбмена(ПараметрыПодключения, ТелоЗапроса, Метод);
	Возврат СтруктураОтвета;
	
КонецФункции 

&НаСервере
Процедура ПолучитьИзПриемникаНаСервере(ПараметрыПодключения)
	
	Модуль_ОбменУниверсальный = пр_НастройкиПовтИсп.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	Данные = Модуль_ОбменУниверсальный.СтруктураДанныхЭтойБазы();
	
	Если ЗначениеЗаполнено(Данные)  Тогда
		ТелоЗапроса = Модуль_ОбменУниверсальный.СформироватьJSON_Сериализ(Данные);
		//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(СтруктураИзТелаHTTPЗапросаУнив(ОтветHTTP);
		СтруктураОтвета = СтруктураОтветаУниверсальногоОбмена(ТелоЗапроса, "receiverData", ПараметрыПодключения);
		
		Если ЗначениеЗаполнено(СтруктураОтвета)  Тогда
			Если СтруктураОтвета.code = 200 Тогда
				Результ = Модуль_ОбменУниверсальный.РезультатПроверкиЗаписиНовогоУчастникаОбмена(СтруктураОтвета.data);
				Если Результ = "Уже записан" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = Результ;
					Сообщение.Сообщить(); 
				КонецЕсли; 
			Иначе
			    Сообщить(СтруктураОтвета.error);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнтерфесЭтой(Команда)
	ОбновитьИнтерфейс();
КонецПроцедуры


&НаКлиенте
Процедура ДонастроитьЯдро(Команда)
	ДонастроитьЯдроНаСервере();
КонецПроцедуры


&НаСервере
Функция ДонастроитьЯдроНаСервере()
	
	Попытка
		
		//Ядро = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("Код", "retail-core");  
		Ядро = Справочники.оду_БазыУчастникиОбмена.НайтиПоРеквизиту("ИДБазы", "68df0be5-ed0c-4ee9-9771-7c7483ceece4");		
       	Если НЕ ЗначениеЗаполнено(Ядро) Тогда
			Возврат Ложь;		
		КонецЕсли;
		
		УО = Ядро.ПолучитьОбъект();
		
		УО.Используется = Истина;
		УО.ИспользоватьРегламентЗагрузкиДанных = Истина;
		//УО.ИДКонфигурации = "Р";
		УО.ОбменДанными.Загрузка = Истина;
		УО.Записать();
		
		Возврат Истина;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = пр_Ошибка;
		Сообщение.Сообщить(); 
		оду_Общий.ОтправитьСообщениеВТелеграммПетрушка("РезультатЗаполненияОсновныхНастроек", , пр_Ошибка);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции


//TODO:  Переделать. Подумать чтобы вызов был один раз при начале работы системы, и при изменении С.оду_БазыУчастникиОбмена
//TODO:  Добавить регистрацию при изменении настроек УО
//В случае копии базы переписать текущие базы
Процедура ПроверкаУзловОбмена()	Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	оду_ИспользоватьУниверсальныйОбмен = оду_Общий.оду_ИспользоватьУниверсальныйОбмен();
	Если НЕ оду_ИспользоватьУниверсальныйОбмен  Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ТекущаяБД,
		|	&СерверИБ КАК Сервер,
		|	&ИмяИБ КАК Код
		|ПОМЕСТИТЬ ВТ_НачальныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТекущиеДанные.ТекущаяБД КАК ТекущаяБД,
		|	ВТ_ТекущиеДанные.Сервер КАК Сервер,
		|	ВТ_ТекущиеДанные.Код КАК Код,
		|	оду_НастройкиИнформационнойБазы.ИмяРабочейБД ЕСТЬ НЕ NULL  КАК ЭтоРабочаяБД
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	ВТ_НачальныеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.оду_НастройкиИнформационнойБазы КАК оду_НастройкиИнформационнойБазы
		|		ПО ВТ_ТекущиеДанные.Код = оду_НастройкиИнформационнойБазы.ИмяРабочейБД
		|			И ВТ_ТекущиеДанные.Сервер = оду_НастройкиИнформационнойБазы.СерверРабочейБД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//изменились параметры на удаление
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ТекущаяБД,
		|	оду_БазыУчастникиОбмена.ТекущаяБД КАК ТекущаяБД_Было,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД КАК ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.Код КАК Код,
		|	оду_БазыУчастникиОбмена.Порт КАК Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер <> ВТ_ТекущиеДанные.Сервер
		//|			И оду_БазыУчастникиОбмена.Код <> ВТ_ТекущиеДанные.Код  
		//Может поменяться только сервер
		|			ИЛИ оду_БазыУчастникиОбмена.Код <> ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И ВТ_ТекущиеДанные.ЭтоРабочаяБД ЕСТЬ НЕ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ   
		//изменились параметры текущей БД
		|
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка,
		|	ИСТИНА,
		|	оду_БазыУчастникиОбмена.ТекущаяБД,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	оду_БазыУчастникиОбмена.Сервер,
		|	оду_БазыУчастникиОбмена.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПО оду_БазыУчастникиОбмена.Сервер = ВТ_ТекущиеДанные.Сервер
		|			И оду_БазыУчастникиОбмена.Код = ВТ_ТекущиеДанные.Код
		|ГДЕ
		|	(оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|				И ВТ_ТекущиеДанные.ЭтоРабочаяБД <> оду_БазыУчастникиОбмена.ЭтоРабочаяБД
		|			ИЛИ ВТ_ТекущиеДанные.ТекущаяБД = ЛОЖЬ)
		|		ИЛИ (оду_БазыУчастникиОбмена.ТекущаяБД = Ложь И ВТ_ТекущиеДанные.ТекущаяБД = Истина)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		//новый участник обмена
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ТекущаяБД,
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ТекущиеДанные.ЭтоРабочаяБД,
		|	ВТ_ТекущиеДанные.Сервер,
		|	ВТ_ТекущиеДанные.Код,
		|	оду_БазыУчастникиОбмена.Порт
		|ИЗ
		|	ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ПО ВТ_ТекущиеДанные.Сервер = оду_БазыУчастникиОбмена.Сервер
		|			И ВТ_ТекущиеДанные.Код = оду_БазыУчастникиОбмена.Код
		|ГДЕ
		|	оду_БазыУчастникиОбмена.Ссылка ЕСТЬ NULL";
	
	СтруктураИБ = пр_Общий.ПолучитьСтруктуруАдресаИнформационнойБазы();
	Запрос.УстановитьПараметр("ИмяИБ", СтруктураИБ.ИмяИБ);
	Запрос.УстановитьПараметр("СерверИБ", СтруктураИБ.СерверИБ);
	//Запрос.УстановитьПараметр("ЭтоРабочаяБД", СтруктураИБ.ЭтоРабочаяБД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		ЭтоНовыйУчастник = Ложь;
		Если ЗначениеЗаполнено(ВДЗ.Ссылка)  Тогда
			УзелОбъект = ВДЗ.Ссылка.ПолучитьОбъект();
		Иначе          
			ЭтоНовыйУчастник = Истина;
			
			УзелОбъект = Справочники.оду_БазыУчастникиОбмена.СоздатьЭлемент();
			ИД = Новый УникальныйИдентификатор;
			СсылкаНов = Справочники.оду_БазыУчастникиОбмена.ПолучитьСсылку(ИД);
			УзелОбъект.ИДБазы = ИД;
			УзелОбъект.УстановитьСсылкуНового(СсылкаНов);
			ЗаполнитьЗначенияСвойств(УзелОбъект, ВДЗ); 
			
			УзелОбъект.ИмяКаталогаОбмена = оду_Общий.ИмяКаталогаОбменаУчастникаОбмена(УзелОбъект.Код, УзелОбъект.Сервер);	
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(УзелОбъект.Порт) Тогда 
			УзелОбъект.Порт = 80; // По умолчанию
		КонецЕсли;	                                  
		
//TODO:  Добавить регистрацию при изменении настроек УО И отправку в места использования
		Если ВДЗ.ТекущаяБД_Было = Истина Тогда 
			УзелОбъект.ПометкаУдаления = Истина; 
			УзелОбъект.Используется = Ложь;
		ИначеЕсли ВДЗ.ТекущаяБД = Истина Тогда
			УзелОбъект.ПометкаУдаления = Ложь;
			//УзелОбъект.Используется = Истина;
		КонецЕсли;	
		
		УзелОбъект.ИДКонфигурации = пр_Общий.ИДКонфигурации();
		УзелОбъект.ТекущаяБД = ВДЗ.ТекущаяБД;
		УзелОбъект.ЭтоРабочаяБД = ВДЗ.ЭтоРабочаяБД;
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		
		ДанныеПользователя = оду_Общий.СоздатьСлужебногоПользователяДляРаботыСОбменом();
		Если ДанныеПользователя <> Неопределено Тогда
			УзелОбъект.Пользователь = ДанныеПользователя.Пользователь; 	
			УзелОбъект.Пароль 		= ДанныеПользователя.Пароль; 	
		КонецЕсли; 
		
		УзелОбъект.Записать();
		
	КонецЦикла
	
КонецПроцедуры


