
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьПараметрыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(СостояниеЗапроса)  Тогда
		СостояниеЗапроса = оду_ОбщийПовтИсп.СПЗ_Запрос();		
	КонецЕсли; 
	
	ЗаполнитьТаблицуПараметровЗапроса();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДанныеПроизвольногоЗапроса(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли; 
	
	//СтруктураПараметров = Параметры.СтруктураПараметров;
	
	ДанныхОбмена = РезультатВыполненияРегламентаПроизвольногоЗапроса();
	Если ИнтерактивныйВызов = Ложь Тогда
		Закрыть(ДанныхОбмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроизвольныйЗапрос(Команда)
	ОбработатьПроизвольныйЗапросНаСервере(Параметры.СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроизвольныйОтвет(Команда)
	ОбработатьПроизвольныйОтветНаСервере(Параметры.СтруктураПараметров);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыФормы()
	
	Если Параметры.СтруктураПараметров = Неопределено  Тогда
		ИнтерактивныйВызов = Истина;
		ДатаСобытия = ТекущаяДатаСеанса();
	Иначе 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураПараметров, Параметры.СтруктураПараметров.СписокСвойств); 
	КонецЕсли; 
	
	Обр = РеквизитФормыВЗначение("Объект");
	МетаданныеОбъекта = Обр.Метаданные();
	ИДЗапроса = МетаданныеОбъекта.Имя;
	ИмяЗапроса = МетаданныеОбъекта.Синоним;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса) Экспорт
	
	КаталогОбменаПЗ = "";
	Если ЗначениеЗаполнено(ИмяБазыПриемника) И ЗначениеЗаполнено(ИмяЗапроса)  Тогда
		НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
		КаталогОбменаПЗ = оду_Общий.КаталогФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника);
		Если ЗначениеЗаполнено(КаталогОбменаПЗ)  Тогда
			КаталогОбменаПЗ = СтрШаблон("%1\%2\%3", КаталогОбменаПЗ, "arbitraryRequests", ИмяЗапроса);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат КаталогОбменаПЗ;
	
КонецФункции


&НаСервере
Функция РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса = Неопределено)
	
	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса();
	КонецЕсли; 
	
	Обр = РеквизитФормыВЗначение("Объект");
	ДанныхОбмена = Обр.РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса);
	                   
	Если ИнтерактивныйВызов = Истина Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
			Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
				ИмяБазыПриемника = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "Код");
				КаталогОбмена = ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса);
			КонецЕсли; 
			
			ИмяФайла = Формат(ТекущаяДатаСеанса(), "ДФ='yyyy MM dd'"); 
			ИмяФайлаЗапроса = пр_Общий.ПолныйПутьКФайлу(, ИмяФайла, КаталогОбмена, , Истина);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
			//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныхОбмена, ИмяФайлаЗапроса);	
			ТелоЗапроса = Обр.СформироватьJSON_Сериализ(ДанныхОбмена, ИмяФайлаЗапроса);	
		КонецЕсли;
		
	КонецЕсли; 
	Возврат ДанныхОбмена;
	
КонецФункции

&НаСервере
Процедура ОбработатьПроизвольныйЗапросНаСервере(СтруктураПараметров)
	
	Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
		Обр = РеквизитФормыВЗначение("Объект");
		ДанныеОтвета = Обр.ОбработатьПроизвольныйЗапрос(ИмяФайлаЗапроса);
		
		Если ИнтерактивныйВызов = Истина Тогда
			
			//Если НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
				Если НЕ ЗначениеЗаполнено(КаталогОбмена) Тогда
					ИмяБазыПриемника = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "Код");
					КаталогОбмена = ЗаполнитьКаталогХраненияФайловОбмена(ИмяБазыПриемника, ИмяЗапроса);
				КонецЕсли; 
				
				ИмяФайла = Формат(ТекущаяДатаСеанса(), "ДФ='yyyy MM dd'") + " Ответ"; 
				ИмяФайлаЗапроса = пр_Общий.ПолныйПутьКФайлу(, ИмяФайла, КаталогОбмена, , Истина);
				
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяФайлаЗапроса)  Тогда
				//ТелоЗапроса = оду_Общий.СформироватьJSON_Сериализ(ДанныеОтвета, ИмяФайлаЗапроса);
				ТелоЗапроса = Обр.СформироватьJSON_Сериализ(ДанныеОтвета, ИмяФайлаЗапроса);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПроизвольныйОтветНаСервере(СтруктураПараметров)
	//Обр = РеквизитФормыВЗначение("Объект");
	//Обр.ОбработатьПроизвольныйОтвет(СтруктураПараметров);
	
	//Выгрзку записей РС
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая) = &КонвертацииОбменаПустая
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.Используется, ЛОЖЬ) = ЛОЖЬ
		|				ИЛИ ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.НастройкаКонвертацииОбмена.ПометкаУдаления, ИСТИНА) = ИСТИНА
		|			ТОГДА ЕСТЬNULL(оду_БазыУчастникиОбменаСостав.Ссылка.НастройкаКонвертацииОбмена, &КонвертацииОбменаПустая)
		|	КОНЕЦ КАК НастройкаКонвертацииОбмена
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Состав КАК оду_БазыУчастникиОбменаСостав
		|ГДЕ
		|	оду_БазыУчастникиОбменаСостав.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("КонвертацииОбменаПустая", ПредопределенноеЗначение("Справочник.оду_НастройкаКонвертацииДанных.ПустаяСсылка"));
	Запрос.УстановитьПараметр("Ссылка", УчастникОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Если ВДЗ.Следующий() Тогда
		ПараметрыКонвертации = ВДЗ.НастройкаКонвертацииОбмена; 			
	Иначе
		Возврат;
	КонецЕсли; 
	
	
	//МассивОбъектовОбмена = Новый Массив;
	//МассивОбъектовОбмена.Добавить(Объект1С);					  
	//ПараметрыРегистрации = оду_Общий.ПараметрыРегистрацииУчастниковОбменаПоТипуОбъекта(МассивОбъектовОбмена, ТекущийПользователь, , УО);
	//
	//Если ПараметрыРегистрации = Неопределено Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	//ПараметрыКонвертации = СтруктураНастроекОбмена.НастройкаКонвертацииОбмена; 			
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 3
		|	ЦеныНоменклатурыСрезПоследних.Период КАК Период,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦен,
		|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК ЕдиницаИзмерения,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ИСТИНА КАК Актуальность
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			Номенклатура.ПометкаУдаления = ЛОЖЬ
		|				И ВидЦены.ПометкаУдаления = ЛОЖЬ
		|				И Упаковка.Наименование ЕСТЬ НЕ NULL ) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	НЕ ЦеныНоменклатурыСрезПоследних.Номенклатура.Наименование ПОДОБНО ""%яяя%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ИсходящиеДанные = Новый Структура("ЭтоУдалениеОбъекта", Истина);
	оду_ДополнительныеСвойстваОбъекта = Новый Структура("ИсходящиеДанные", ИсходящиеДанные);	
	
	СоответвиеПараметровВыгрузки = Новый Соответствие();
	//СоответвиеПараметровВыгрузки.Вставить(ИмяТипаXML, Новый Структура("ОбъектДляПравилВыгрузки, ПереносТолькоСсылок", ДанныеОбмена, ПереносТолькоСсылок));		
	
	//оду_СтруктураУО = Новый Структура("ИДБазыИсточник, ИДБазыПриемник"); 
	//оду_СтруктураУО.ИДБазыИсточник = ИДБазыИсточник;
	//оду_СтруктураУО.ИДБазыПриемник = ИДБазыПриемник;
	
	СтруктураПараметров = Новый Структура(); 
	//СтруктураПараметров.Вставить("оду_СтруктураУО", ЗначениеВСтрокуВнутр(оду_СтруктураУО));
	СтруктураПараметров.Вставить("оду_МассивСсылок1С", РезультатЗапроса);
	СтруктураПараметров.Вставить("оду_ДополнительныеСвойстваОбъекта", оду_ДополнительныеСвойстваОбъекта);
	
	СоответвиеПараметровВыгрузки.Вставить("ЦеныНоменклатуры", СтруктураПараметров);		
	
	//ИмяФайлаОбменаДалее = КонвертацияПутьКФайлуДанных;
	НастройкиТекущейБД = оду_ОбщийПовтИсп.НастройкиТекущейБД();
	
	//ИмяБазыПриемника = пр_Общий.ДанныеИБПоСсылкам(УО, "Код", , "Структура").Код;
	//ИмяФайлаОбмена = пр_Модуль.ИмяФайлаОбмена(НастройкиТекущейБД, ИмяБазыПриемника);
	
	ТаблицаСостоянийОбмена = оду_Общий.ТаблицаСостоянийОбмена();
	Стр = ТаблицаСостоянийОбмена.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ЭтотОбъект); 
	
	//СтрокаОтветаОбмена = пр_Модуль.ВыполнитьВыгрузкуДанныхУОДКД2(ТаблицаСостоянийОбмена, СоответвиеПараметровВыгрузки, ИмяФайлаОбмена, , ПараметрыКонвертации);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "КаталогОбмена", Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗапросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаталогОбмена)  Тогда
		//пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса",, КаталогОбмена);
		УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса",, КаталогОбмена);
	Иначе	
		пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ИмяФайлаЗапроса");
		НачПоз = СтрНайти(ИмяФайлаЗапроса,"\",НаправлениеПоиска.СКонца) - 1;
		КаталогОбмена = Лев(ИмяФайлаЗапроса, НачПоз);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УстановкаКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла = Истина, КаталогПоУмолчанию = "", МножественныйВыбор = Ложь)	Экспорт
	пр_Клиент.РезультатУстановкиКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла, КаталогПоУмолчанию, МножественныйВыбор);	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПараметровЗапросаЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекЭлемент = Элементы.ТаблицаПараметровЗапроса.ТекущиеДанные;
	
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	пр_Клиент.Объект1СОкончаниеВводаТекста(ТекЭлемент.Значение, Текст, СтандартнаяОбработка); 
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли; 
	
	Начало = ТекущаяДата();
	ВыполнитьНаСервере();  
	//Сообщить(СтрШаблон("ДлительностьОперации: %1", ТекущаяДата() - Начало));
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНаСервере()
	
	ДатаСобытия = ТекущаяДатаСеанса();
	
	СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса();
	Обр = РеквизитФормыВЗначение("Объект");
	ДанныеОтвета = Обр.РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса);
	
	ТекстСообщ = СтрШаблон("Сервер: %1; Обработано: %2; Скорость: %3; ДлительностьОперации: %4", УчастникОбмена.Сервер, 
							ДанныеОтвета, УчастникОбмена.ПриоритетОбмена, ТекущаяДатаСеанса() - ДатаСобытия); 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщ;
	Сообщение.Сообщить();
	
КонецПроцедуры

//TODO:  Пропиать заполенние пользовательских настроек из Формы и ТаблицаПараметровЗапроса
Функция ПолучитьСтруктуруНастроекЗапроса()
	
	Попытка
		
		пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь()); 
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		ЗаполнитьЗначенияСвойств(СтруктураЗапроса, ЭтотОбъект); 
		
		//ИДБазыПриемник = "d9b5685d-27f0-49e8-90d6-3a73f0962514"; //Тест  ytaptest6
		//СтруктураЗапроса.Вставить("СсылкаУО", УчастникОбмена);
		ИДБазыПриемник = пр_Общий.ЗначениеРеквизитаПоСсылке(УчастникОбмена, "ИДБазы");
		//ИДБазыИсточник = 
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		//СтруктураЗапроса.ИДБазыИсточник = ИДБазыИсточник;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		//СтруктураНастроек.ВыполнятьВФоне = Истина;
		//СтруктураНастроек.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(пр_НастройкиПовтИсп.ТекущийПользователь());
		СтруктураЗапроса.ПараметрыЗапроса = ПараметрыПроизвольногоЗапроса();
		
		пр_Модуль.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 

&НаСервере
Функция ПараметрыПроизвольногоЗапроса()
	
	МассивПараметров = Новый Массив;
	
	Для каждого Стр Из ТаблицаПараметровЗапроса Цикл
		
		Если Стр.Использовать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктПарам = Новый Структура("ИмяПараметра, Тип, Значение"); 		
		СтруктПарам.Вставить("ИмяПараметра", Стр.ИмяПараметра); 
		СтруктПарам.Вставить("Тип", пр_Общий.ИмяТипаXMLПоСсылке(Стр.Значение)); 
		СтруктПарам.Вставить("Значение", пр_Общий.ИД_Ссылки(Стр.Значение)); 
		МассивПараметров.Добавить(СтруктПарам);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции 

&НаКлиенте
Процедура ПутьКОбработкеИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ПутьКОбработкеИсточник");
КонецПроцедуры

&НаКлиенте
Процедура ПутьКОбработкеПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	пр_Клиент.УстановкаКаталогаФайлаНачалоВыбора(ЭтотОбъект, "ПутьКОбработкеПриемник");
КонецПроцедуры

&НаКлиенте
Процедура СверкаДляВсехТТ(Команда)
	СверкаДляВсехТТНаСервере();
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСбораТТ()
	Возврат
			//"ВЫБРАТЬ Первые 2  
		"ВЫБРАТЬ  
		|	оду_БазыУчастникиОбмена.Ссылка КАК УчастникОбмена,
		|	оду_БазыУчастникиОбмена.ИДБазы КАК ИДБазы,
		|	оду_БазыУчастникиОбмена.Сервер КАК Сервер,
		|	оду_БазыУчастникиОбмена.ПриоритетОбмена КАК ПриоритетОбмена
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ПодчиненныйУчастникОбмена = ИСТИНА
		//|	И оду_БазыУчастникиОбмена.ПриоритетОбмена < 10 
		|	И оду_БазыУчастникиОбмена.ПриоритетОбмена >= &ПриоритетОбмена
		|	И оду_БазыУчастникиОбмена.ПриоритетОбмена < &ПриоритетДо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетОбмена";

КонецФункции

&НаСервере
Процедура СверкаДляВсехТТНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораТТ(); 
		
	Запрос.УстановитьПараметр("ПриоритетОбмена", ПриоритетОбмена);	
	Запрос.УстановитьПараметр("ПриоритетДо", ПриоритетДо);
	
	РезультатЗапроса = Запрос.Выполнить();
	НомерУО = 1;
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		УчастникОбмена = ВДЗ.УчастникОбмена;
		ДатаСобытия = ТекущаяДатаСеанса();
		
		СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса();
		СтруктураЗапроса.Вставить("НомерУО", НомерУО);
		
		Обр = РеквизитФормыВЗначение("Объект");
		ДанныеОтвета = Обр.РезультатВыполненияРегламентаПроизвольногоЗапроса(СтруктураЗапроса); 
		
		ТекстСообщ = СтрШаблон("Сервер: %1; Обработано: %2; Скорость: %3; ДлительностьОперации: %4", ВДЗ.Сервер, ДанныеОтвета, ВДЗ.ПриоритетОбмена, ТекущаяДатаСеанса() - ДатаСобытия); 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщ;
		Сообщение.Сообщить();
		
		НомерУО = НомерУО + 1;
		
	КонецЦикла; 
	
	МНайд = ТаблицаПараметровЗапроса.НайтиСтроки(Новый Структура("Использовать, Значение", Истина, "ПолучениеАктуальногоВидаЦен"));
	Если МНайд.Количество() > 0 Тогда
		ЗаполнитьОтборыТекущейБазы();	
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция ЗаполнитьОтборыТекущейБазы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	оду_БазыУчастникиОбменаОрганизации.Организация КАК Отбор
		|ПОМЕСТИТЬ ВТ_ОтборыПодчиненных
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|ГДЕ
		|	оду_БазыУчастникиОбменаОрганизации.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбменаОрганизации.Ссылка.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбменаОрганизации.Ссылка.ПодчиненныйУчастникОбмена = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	оду_БазыУчастникиОбмена.Ссылка КАК УчастникОбмена,
		|	ЕСТЬNULL(оду_БазыУчастникиОбменаОрганизации.Организация, НЕОПРЕДЕЛЕНО) КАК Отбор
		|ПОМЕСТИТЬ ВТ_ТекущиеДанные
		|ИЗ
		|	Справочник.оду_БазыУчастникиОбмена КАК оду_БазыУчастникиОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.оду_БазыУчастникиОбмена.Организации КАК оду_БазыУчастникиОбменаОрганизации
		|		ПО (оду_БазыУчастникиОбменаОрганизации.Ссылка = оду_БазыУчастникиОбмена.Ссылка)
		|ГДЕ
		|	оду_БазыУчастникиОбмена.ПометкаУдаления = ЛОЖЬ
		|	И оду_БазыУчастникиОбмена.Используется = ИСТИНА
		|	И оду_БазыУчастникиОбмена.ТекущаяБД = ИСТИНА
		|	И оду_БазыУчастникиОбмена.РаспределятьПодчиненнымУО = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ТекущиеДанные.Отбор, НЕОПРЕДЕЛЕНО) КАК Отбор,
		|	ЕСТЬNULL(ВТ_ОтборыПодчиненных.Отбор, НЕОПРЕДЕЛЕНО) КАК ОтборПодчиненных
		|ИЗ
		|	ВТ_ТекущиеДанные КАК ВТ_ТекущиеДанные
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОтборыПодчиненных КАК ВТ_ОтборыПодчиненных
		|		ПО ВТ_ТекущиеДанные.Отбор = ВТ_ОтборыПодчиненных.Отбор
		|ГДЕ
		|	ЕСТЬNULL(ВТ_ОтборыПодчиненных.Отбор, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ВТ_ТекущиеДанные.Отбор, НЕОПРЕДЕЛЕНО)";    
	
	Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ВДЗ = Пакет[2].Выбрать();
	
	Если ВДЗ.Количество() = 0 Тогда
		Возврат Неопределено; 
	КонецЕсли; 
	
	ВыборкаУО = Пакет[1].Выбрать();
	
	Если ВыборкаУО.Следующий() Тогда  
		УчастникОбмена = ВыборкаУО.УчастникОбмена;   
		ОбъектУО = УчастникОбмена.ПолучитьОбъект();
		ТЧОграничения = ОбъектУО.Организации; 
	Иначе
		Возврат Неопределено; 
	КонецЕсли; 
	
	Пока ВДЗ.Следующий() Цикл
		
		Если ВДЗ.Отбор = Неопределено Тогда   
			Нстр = ТЧОграничения.Добавить();
			Нстр.Организация = ВДЗ.ОтборПодчиненных; 
		ИначеЕсли ВДЗ.ОтборПодчиненных = Неопределено Тогда
			СтрПоиска = Новый Структура("Организация", ВДЗ.Отбор);
			МПоиска = ТЧОграничения.НайтиСтроки(СтрПоиска); 
			Нстр = МПоиска[0]; 
			ТЧОграничения.Удалить(Нстр);
		Иначе                         
			СтрПоиска = Новый Структура("Организация", ВДЗ.Отбор);
			МПоиска = ТЧОграничения.НайтиСтроки(СтрПоиска); 
			Нстр = МПоиска[0];
			Нстр.Организация = ВДЗ.ОтборПодчиненных; 
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Если РежимОтладки = Ложь Тогда
		ОбъектУО.ОбменДанными.Загрузка = Истина;
		ОбъектУО.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 


//&НаКлиенте
//Процедура УстановкаКаталогаФайлаНачалоВыбора(Форма, ИмяРеквизита, ВыборФайла = Истина, КаталогПоУмолчанию = "", МножественныйВыбор = Ложь)	Экспорт
//	
//	Каталог = пр_Клиент.ВыборКаталогаФайлаНачалоВыбора(ВыборФайла, КаталогПоУмолчанию, МножественныйВыбор);
//	Если ЗначениеЗаполнено(Каталог)  Тогда
//		Форма[ИмяРеквизита] = Каталог; 
//	КонецЕсли; 

//КонецПроцедуры   


#Область  ЗапонитьНачальныеПараметрыСверки


//TODO:  Переделать
&НаСервере
Процедура ЗаполнитьТаблицуПараметровЗапроса()   
	
	ЗаполнитьПараметрДополнительногоСвойства("ТипЗапроса", "ОчиститьПоОтборуБД");  
	ЗаполнитьПараметрДополнительногоСвойства("ТипЗапроса", "ПолучениеАктуальногоВидаЦен");  
	ЗаполнитьПараметрДополнительногоСвойства("ТипЗапроса", "СверкаСотрудников");  
	
	ЗаполнитьПараметрДополнительногоСвойства("ТипОбъекта", "ЦеныНоменклатуры");
	ЗаполнитьПараметрДополнительногоСвойства("ТипОбъекта", "ШтрихкодыНоменклатуры");
	ЗаполнитьПараметрДополнительногоСвойства("КоличествоВыборки", 900);
	ЗаполнитьПараметрДополнительногоСвойства("ВРежимеОтладки", Истина);
	ЗаполнитьПараметрДополнительногоСвойства("ПроизвольныйЗапрос", Истина);
		
КонецПроцедуры



&НаСервере
Процедура ЗаполнитьПараметрДополнительногоСвойства(ИмяПараметра, ЗначениеСвойства)
	
	Нстр = ТаблицаПараметровЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра, Значение", ИмяПараметра, ЗначениеСвойства));
	Если Нстр.Количество() = 0  Тогда
		Стр = ТаблицаПараметровЗапроса.Добавить();
		Стр.Использовать = Ложь;
		//Стр.Использовать = Истина;
		Стр.ИмяПараметра = ИмяПараметра;
		Стр.Значение = ЗначениеСвойства;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОграничениеНоменклатурыПоВидуЦен(Команда)
	ЗаполнитьОграничениеНоменклатурыПоВидуЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграничениеНоменклатурыПоВидуЦенНаСервере()
	
	ЭтаОбр = РеквизитФормыВЗначение("Объект");
	ЭтаОбр.РезультатЗаполненияОграниченийНоменклатурыПоВидуЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопОтборыОбмена(Команда)
	 ПередЗаписью(Ложь);
КонецПроцедуры


Процедура ПередЗаписью(Отказ)
	
	УО = УчастникОбмена.ПолучитьОбъект();
	Организации = УО.Организации; 

	МассивОтборов = Новый Массив;
				  
	Для каждого Стр Из Организации Цикл
	
		ЗаполнитьОтборыПриИзменении(Стр, УО.ТекущаяБД);
		СтруктураОтборов = Новый Структура("ТипXMLОбъектаИсточника, ИДОбъектаИсточника, ТипXMLОбъектаПриемника, ИДОбъектаПриемника"); 
		ЗаполнитьЗначенияСвойств(СтруктураОтборов, Стр);
		МассивОтборов.Добавить(СтруктураОтборов);
		
	КонецЦикла;
	
	Если МассивОтборов.Количество() > 0 Тогда
		ОтборыОбмена = ЗначениеВСтрокуВнутр(МассивОтборов);				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборыПриИзменении(ТекЭлемент, ЭтоТекущаяБД)
	 
	Если ЗначениеЗаполнено(ТекЭлемент.Организация)  Тогда
		
		Если ЭтоТекущаяБД = Истина Тогда
			
			ТекЭлемент.ИДОбъектаИсточника = пр_Общий.ИД_Ссылки(ТекЭлемент.Организация);
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ИДОбъектаПриемника) Тогда
				ТекЭлемент.ИДОбъектаПриемника = ТекЭлемент.ИДОбъектаИсточника;  //По умолчанию они равны
			КонецЕсли; 

			ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ТекЭлемент.Организация);
			ТекЭлемент.ТипXMLОбъектаИсточника = ТипXML; 
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ТипXMLОбъектаПриемника) Тогда
				ТекЭлемент.ТипXMLОбъектаПриемника = ТипXML;  //По умолчанию они равны
			КонецЕсли;    
			
		Иначе 
			
			ТекЭлемент.ИДОбъектаПриемника = пр_Общий.ИД_Ссылки(ТекЭлемент.Организация);
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ИДОбъектаИсточника) Тогда
				ТекЭлемент.ИДОбъектаИсточника = ТекЭлемент.ИДОбъектаПриемника;  //По умолчанию они равны
			КонецЕсли;    
			
			ТипXML = пр_Общий.ИмяТипаXMLПоСсылке(ТекЭлемент.Организация);
			ТекЭлемент.ТипXMLОбъектаПриемника = ТипXML;
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ТипXMLОбъектаИсточника) Тогда
				ТекЭлемент.ТипXMLОбъектаИсточника = ТипXML;  //По умолчанию они равны
			КонецЕсли;    
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область  Прочие

&НаКлиенте
Процедура УстановитьПризнакРабочейБД(Команда)
	УстановитьПризнакРабочейБДНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакРабочейБДНаСервере()
	
	УО = УчастникОбмена.ПолучитьОбъект();
	УО.ЭтоРабочаяБД = Истина;
	УО.ОбменДанными.Загрузка = Истина;
	УО.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаБазы(Команда)
	ОчисткаБазыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчисткаБазыНаСервере()
	Обр = РеквизитФормыВЗначение("Объект");
	Обр.ОчиститьПоОтборуБД(100, РежимОтладки);  
КонецПроцедуры




#КонецОбласти

#КонецОбласти

#Область  сменаНастрокиКД

&НаКлиенте
Процедура СменитьНастройкуКД(Команда)  
	Если ЗначениеЗаполнено(НастрокаКД) Тогда
		СменитьНастройкуКДНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СменитьНастройкуКДНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСбораТТ(); 
		
	Запрос.УстановитьПараметр("ПриоритетОбмена", ПриоритетОбмена);	
	Запрос.УстановитьПараметр("ПриоритетДо", ПриоритетДо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		УО_Об = ВДЗ.УчастникОбмена.ПолучитьОбъект();
		Если УО_Об.НастройкаКонвертацииОбмена <> НастрокаКД Тогда
			УО_Об.НастройкаКонвертацииОбмена = НастрокаКД;
			УО_Об.ОбменДанными.Загрузка = Истина;
			УО_Об.Записать();
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

#КонецОбласти

