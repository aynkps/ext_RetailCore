//1. При внедрении заменить имена "ЗаменаИмяОбработки" функций Запрос, Ответ, ОбработкаОтвета на Имя обработки (например "РегламентУстановкиРозничныхЦенМП_")
//2. Если нужно скорретировать параметры в функции ПолучитьСтруктуруНастроекЗапроса
//3. После отладки, при внедрении перенести полностью область Имя обработки (например "РегламентУстановкиРозничныхЦенМП_") в ОМ.оду_ОбменДанными 
//4. В ОМ.оду_ОбменДанными убрать лишние методы обработки 

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	
	//Номер задачи Текст задачи Исполнитель Дата
	ПараметрыРегистрации.Версия = "2024-02-27";
	
	//имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	НаименованиеОтчета = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации.Наименование = НаименованиеОтчета; 
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	//ПараметрыРегистрации.Информация = "кпс_"; 
	
	СтрТаблицы = ПараметрыРегистрации.Команды.Добавить();
	СтрТаблицы.Представление = НаименованиеОтчета;
	СтрТаблицы.Идентификатор = ЭтотОбъект.Метаданные().Имя;
	СтрТаблицы.Использование = "ОткрытиеФормы";
	//СтрТаблицы.ПоказыватьОповещение = Истина;

	//ПараметрыРегистрации.РассылкаОтчетов = Истина; 
	
 	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОтчета = РезультатВыполненияПроизвольногоОтчета();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ДанныеОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеОтчета) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура("ДанныеОтчета", ДанныеОтчета);
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("МакетВнешнСоединение");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры


//TODO:  Получать настройки динамичестки из ОбработкиПроизвольногоЗапроса и  С_оду_БазыУчастникиОбмена, и РС_Настроек
Функция ПолучитьСтруктуруНастроекЗапроса(пр_Модуль)
	
	Попытка
	
		ИДБазыПриемник = "4b71e702-b4e6-48aa-bd8d-05430f71e6b4"; //Тест  retail-core-test
		//ИДБазыИсточник = 
		
		//СсылкаУО = пр_Общий.СсылкаПоТипXML("CatalogRef.оду_БазыУчастникиОбмена", ИДБазыПриемник);
		//Если СсылкаУО = Неопределено Тогда
		//	Возврат Неопределено;                                                                   
		//КонецЕсли; 
		
		СтруктураЗапроса = пр_Модуль.СтруктураПараметровВыполненияПроизвольногоЗапроса();
		
		СтруктураЗапроса.ИДБазыПриемник = ИДБазыПриемник;
		//СтруктураЗапроса.ИДБазыИсточник = ИДБазыИсточник;
		
		МетаданныеОбъекта = ЭтотОбъект.Метаданные();
		СтруктураЗапроса.ИДЗапроса = МетаданныеОбъекта.Имя;
		СтруктураЗапроса.ИмяЗапроса = МетаданныеОбъекта.Синоним;
		
		СтруктураЗапроса.РежимОтладки = Истина;
		
		//TODO:  Доработать в программном интерфейсе
		//СтруктураНастроек.КаталогОбмена = Истина;
		//СтруктураНастроек.ВыполнятьВФоне = Истина;
		//СтруктураНастроек.ОбменЧерезФайл = Истина;
		СтруктураЗапроса.Пользователь = Строка(пр_НастройкиПовтИсп.ТекущийПользователь());
		//СтруктураЗапроса.Вставить("ПодготовитьДанные", Истина);
		
		оду_Общий.ЗаполнитьНастройкиОбменаПроизвольногоЗапроса(СтруктураЗапроса);
		
		Возврат СтруктураЗапроса;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange(СтруктураЗапроса.ИДЗапроса, , пр_Ошибка);
	КонецПопытки;
	
КонецФункции 

Функция РезультатВыполненияПроизвольногоОтчета()
	
	пр_Модуль = пр_Общий.ИсполняемыйМодуль("оду_Общий", пр_НастройкиПовтИсп.ТекущийПользователь());
	
	СтруктураЗапроса = ПолучитьСтруктуруНастроекЗапроса(пр_Модуль);
	
	РезультатЗапроса = пр_Модуль.РезультатВыполненияПроизвольногоЗапроса(СтруктураЗапроса, ЭтотОбъект); 
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли; 
	
	Если СтруктураЗапроса.ПодготовитьДанные = Истина  Тогда
		Возврат РезультатЗапроса;	
	КонецЕсли; 
	
	РезультатОбработкиОтвета = ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_ОбработкаОтвета(РезультатЗапроса);
	
	Возврат РезультатОбработкиОтвета;
	
КонецФункции 

#Область  ДляОтладкиБезФоновомРежиме

Функция оду_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Запрос(СтруктураЗапроса);
КонецФункции 

Функция оду_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Ответ(СтруктураЗапроса);
КонецФункции 

Функция оду_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	Возврат ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_ОбработкаОтвета(СтруктураЗапроса);
КонецФункции 

#КонецОбласти


//TODO:  Перенести после отладки в ОМ.оду_ОбменДанными
#Область  ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_
 
#Область  Запрос

//СтруктураЗапроса
Функция ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Запрос(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Для примера
		Если ПараметрыЗапроса = Неопределено Тогда
			ПараметрыЗапроса = Новый Структура();
			//ПараметрыЗапроса.Вставить("ПериодСреза", НачалоДня(ТекущаяДата()) + 60*60);
			//СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
		КонецЕсли; 

		
		//TODO:  Написать функциию обработки ответа
		ДанныеЗапроса = Неопределено;
		Данные = Новый Структура();

		
		Возврат Данные;	
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Запрос", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки;
	
КонецФункции 

#КонецОбласти

#Область  Ответ

Функция ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Ответ(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		//TODO:  Написать функциию обработки ответа
		//ДанныеОвета = ИмяЗапроса_Запрос(СтруктураЗапроса, ИмяЗапроса);
		ДанныеОвета = Неопределено;
		Возврат ДанныеОвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_Ответ", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#Область  ОбработкаОтвета
 
Функция ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_ОбработкаОтвета(СтруктураЗапроса = Неопределено) Экспорт
	
	Попытка
	
		ДанныеЗапроса = СтруктураЗапроса.ДанныеЗапроса;
		Если ДанныеЗапроса = Неопределено Тогда
			Возврат Неопределено;		
		КонецЕсли; 
		
		ПараметрыЗапроса = СтруктураЗапроса.ПараметрыЗапроса;
		
		
		//TODO:  Написать функциию обработки ответа
		ДанныеОбработкиОтвета = Неопределено;
		Возврат ДанныеОбработкиОтвета;
		
	Исключение
		пр_Ошибка = ОписаниеОшибки();
		оду_Общий.ОтправитьСообщениеВТелеграмExchange("ОтчетСверкаНоменкатурыИКатегорийУТ_Розница_ОбработкаОтвета", , пр_Ошибка,,,, СтруктураЗапроса);
	КонецПопытки; 
	
КонецФункции 

#КонецОбласти

#КонецОбласти


#КонецЕсли
